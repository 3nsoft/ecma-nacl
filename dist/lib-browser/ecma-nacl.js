require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* Copyright(c) 2013 - 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
var arrays = require('../util/arrays');
var sm = require('./scalarmult');
var core = require('./core');
var sbox = require('./secret_box');
var streamMod = require('./stream');
var SIGMA = streamMod.SIGMA;
/**
 * Replacement of crypto_box_keypair in
 * crypto_box/curve25519xsalsa20poly1305/ref/keypair.c
 * Public key can be generated for any given secret key, which itself should be
 * randomly generated.
 * @param sk is Uint8Array of 32 bytes of a secret key.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use. It may be undefined, in which case an internally created one is used.
 * @returns Uint8Array with 32 bytes of a public key, that corresponds given
 * secret key.
 */
function generate_pubkey(sk, arrFactory) {
    if (!(sk instanceof Uint8Array)) {
        throw new TypeError("Key array k must be Uint8Array.");
    }
    if (sk.length !== 32) {
        throw new Error("Key array sk should have 32 " + "elements (bytes) in it, but it is " + sk.length + " elements long.");
    }
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var pk = arrFactory.getUint8Array(32);
    sm.curve25519_base(pk, sk, arrFactory);
    arrFactory.wipeRecycled();
    return pk;
}
exports.generate_pubkey = generate_pubkey;
/**
 * n array in crypto_box/curve25519xsalsa20poly1305/ref/before.c
 */
var n_to_calc_dhshared_key = new Uint8Array(16);
/**
 * Analog of crypto_box_beforenm in
 * crypto_box/curve25519xsalsa20poly1305/ref/before.c
 * @param pk is Uint8Array, 32 items long.
 * @param sk is Uint8Array, 32 items long.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use. It may be undefined, in which case an internally created one is used.
 * @return Uint8Array with 32 bytes of stream key for the box, under given
 * public and secret keys.
 */
function calc_dhshared_key(pk, sk, arrFactory) {
    if (!(pk instanceof Uint8Array)) {
        throw new TypeError("Public key array pk must be Uint8Array.");
    }
    if (pk.length !== 32) {
        throw new Error("Public key array pk should have 32 elements (bytes) in it, but it is " + pk.length + " elements long.");
    }
    if (!(sk instanceof Uint8Array)) {
        throw new TypeError("Secret key array sk must be Uint8Array.");
    }
    if (sk.length !== 32) {
        throw new Error("Secret key array sk should have 32 elements (bytes) in it, but it is " + sk.length + " elements long.");
    }
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var s = new Uint8Array(32);
    sm.curve25519(s, sk, pk, arrFactory);
    core.hsalsa20(s, n_to_calc_dhshared_key, s, SIGMA);
    arrFactory.wipeRecycled();
    return s;
}
exports.calc_dhshared_key = calc_dhshared_key;
/**
 * Analog of crypto_box in crypto_box/curve25519xsalsa20poly1305/ref/box.c
 * @param m is Uint8Array of message bytes that need to be encrypted by secret key.
 * @param n is Uint8Array, 24 bytes long nonce.
 * @param pk is Uint8Array, 32 bytes long public key of message receiving party.
 * @param sk is Uint8Array, 32 bytes long secret key of message sending party.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use. It may be undefined, in which case an internally created one is used.
 * @return Uint8Array with resulting cipher of incoming message, packaged according
 * to NaCl's xsalsa20+poly1305 secret-box bytes layout, trimmed of initial zeros.
 */
function pack(m, n, pk, sk, arrFactory) {
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var k = calc_dhshared_key(pk, sk, arrFactory);
    var c = sbox.pack(m, n, k, arrFactory);
    arrFactory.wipeRecycled();
    return c;
}
exports.pack = pack;
/**
 * Analog of crypto_box_open in crypto_box/curve25519xsalsa20poly1305/ref/box.c
 * @param c is Uint8Array of cipher bytes that need to be opened.
 * @param n is Uint8Array, 24 bytes long nonce.
 * @param pk is Uint8Array, 32 bytes long public key of message receiving party.
 * @param sk is Uint8Array, 32 bytes long secret key of message sending party.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use. It may be undefined, in which case an internally created one is used.
 * @return Uint8Array with decrypted message bytes.
 * Array is a view of buffer, which has 32 zeros preceding message bytes.
 * @throws Error when cipher bytes fail verification.
 */
function open(c, n, pk, sk, arrFactory) {
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var k = calc_dhshared_key(pk, sk, arrFactory);
    var m = sbox.open(c, n, k, arrFactory);
    arrFactory.wipeRecycled();
    return m;
}
exports.open = open;
var stream;
(function (stream) {
    stream.pack = sbox.pack;
    stream.open = sbox.open;
})(stream = exports.stream || (exports.stream = {}));
Object.freeze(stream);
var formatWN;
(function (formatWN) {
    /**
     * @param m is Uint8Array of message bytes that need to be encrypted by secret key.
     * @param n is Uint8Array, 24 bytes long nonce.
     * @param pk is Uint8Array, 32 bytes long public key of message receiving party.
     * @param sk is Uint8Array, 32 bytes long secret key of message sending party.
     * @param arrFactory is typed arrays factory, used to allocated/find an array
     * for use. It may be undefined, in which case an internally created one is used.
     * @returns Uint8Array, where nonce is packed together with cipher.
     * Length of the returned array is 40 bytes greater than that of a message.
     */
    function pack(m, n, pk, sk, arrFactory) {
        if (!arrFactory) {
            arrFactory = arrays.makeFactory();
        }
        var k = calc_dhshared_key(pk, sk, arrFactory);
        var c = sbox.formatWN.pack(m, n, k, arrFactory);
        arrFactory.wipeRecycled();
        return c;
    }
    formatWN.pack = pack;
    /**
     * @param c is Uint8Array with nonce and cipher bytes that need to be opened by
     * secret key.
     * @param pk is Uint8Array, 32 bytes long public key of message receiving party.
     * @param sk is Uint8Array, 32 bytes long secret key of message sending party.
     * @param arrFactory is typed arrays factory, used to allocated/find an array
     * for use. It may be undefined, in which case an internally created one is used.
     * @return Uint8Array with decrypted message bytes.
     * Array is a view of buffer, which has 32 zeros preceding message bytes.
     */
    function open(c, pk, sk, arrFactory) {
        if (!arrFactory) {
            arrFactory = arrays.makeFactory();
        }
        var k = calc_dhshared_key(pk, sk, arrFactory);
        var m = sbox.formatWN.open(c, k, arrFactory);
        arrFactory.wipeRecycled();
        return m;
    }
    formatWN.open = open;
    formatWN.copyNonceFrom = sbox.formatWN.copyNonceFrom;
    /**
     * @param pk is Uint8Array, 32 bytes long public key of message receiving party.
     * @param sk is Uint8Array, 32 bytes long secret key of message sending party.
     * @param nextNonce is nonce, which should be used for the very first packing.
     * All further packing will be done with new nonce, as it is automatically evenly
     * advanced.
     * Note that nextNonce will be copied.
     * @param delta is a number between 1 and 255 inclusive, used to advance nonce.
     * When missing, it defaults to two.
     * @param arrFactory is typed arrays factory, used to allocated/find an array
     * for use. It may be undefined, in which case an internally created one is used.
     * @return a frozen object with pack & open functions, and destroy
     * It is NaCl's secret box for a calculated DH-shared key, with automatically
     * evenly advancing nonce.
     */
    function makeEncryptor(pk, sk, nextNonce, delta, arrFactory) {
        if ('number' !== typeof delta) {
            delta = 2;
        }
        if (!arrFactory) {
            arrFactory = arrays.makeFactory();
        }
        var k = calc_dhshared_key(pk, sk, arrFactory);
        var enc = sbox.formatWN.makeEncryptor(k, nextNonce, delta, arrFactory);
        arrFactory.wipe(k);
        return enc;
    }
    formatWN.makeEncryptor = makeEncryptor;
    /**
     * @param pk is Uint8Array, 32 bytes long public key of message receiving party.
     * @param sk is Uint8Array, 32 bytes long secret key of message sending party.
     * @param arrFactory is typed arrays factory, used to allocated/find an array
     * for use. It may be undefined, in which case an internally created one is used.
     * @return a frozen object with open and destroy functions.
     * It is NaCl's secret box for a calculated DH-shared key.
     */
    function makeDecryptor(pk, sk, arrFactory) {
        if (!arrFactory) {
            arrFactory = arrays.makeFactory();
        }
        var k = calc_dhshared_key(pk, sk, arrFactory);
        var enc = sbox.formatWN.makeDecryptor(k, arrFactory);
        arrFactory.wipe(k);
        return enc;
    }
    formatWN.makeDecryptor = makeDecryptor;
})(formatWN = exports.formatWN || (exports.formatWN = {}));
Object.freeze(formatWN);
exports.NONCE_LENGTH = 24;
exports.KEY_LENGTH = 32;
exports.JWK_ALG_NAME = 'NaCl-box-CXSP';
Object.freeze(exports);

},{"../util/arrays":17,"./core":2,"./scalarmult":4,"./secret_box":5,"./stream":6}],2:[function(require,module,exports){
/* Copyright(c) 2013-2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
/**
 * Analog of crypto_core in crypto_core/salsa20/ref/core.c
 * It makes nicer, shorter code to have variables of this function sitting in
 * one array, but expanded version runs faster.
 * We inlined load_littleendian(() & store_littleendian(), and rotate()
 * functions from the original source.
 * @param out is Uint8Array, 64 bytes long, into which result is placed.
 * @param inArr is Uint8Array, 16 bytes long, of incoming bytes.
 * @param k is Uint8Array, 32 bytes long.
 * @param c is Uint8Array, 16 bytes long.
 */
function salsa20(out, inArr, k, c) {
    // inlined load_littleendian()'s
    var x0 = c[0] | (c[1] << 8) | (c[2] << 16) | (c[3] << 24);
    var j0 = x0;
    var x1 = k[0] | (k[1] << 8) | (k[2] << 16) | (k[3] << 24);
    var j1 = x1;
    var x2 = k[4] | (k[5] << 8) | (k[6] << 16) | (k[7] << 24);
    var j2 = x2;
    var x3 = k[8] | (k[9] << 8) | (k[10] << 16) | (k[11] << 24);
    var j3 = x3;
    var x4 = k[12] | (k[13] << 8) | (k[14] << 16) | (k[15] << 24);
    var j4 = x4;
    var x5 = c[4] | (c[5] << 8) | (c[6] << 16) | (c[7] << 24);
    var j5 = x5;
    var x6 = inArr[0] | (inArr[1] << 8) | (inArr[2] << 16) | (inArr[3] << 24);
    var j6 = x6;
    var x7 = inArr[4] | (inArr[5] << 8) | (inArr[6] << 16) | (inArr[7] << 24);
    var j7 = x7;
    var x8 = inArr[8] | (inArr[9] << 8) | (inArr[10] << 16) | (inArr[11] << 24);
    var j8 = x8;
    var x9 = inArr[12] | (inArr[13] << 8) | (inArr[14] << 16) | (inArr[15] << 24);
    var j9 = x9;
    var x10 = c[8] | (c[9] << 8) | (c[10] << 16) | (c[11] << 24);
    var j10 = x10;
    var x11 = k[16] | (k[17] << 8) | (k[18] << 16) | (k[19] << 24);
    var j11 = x11;
    var x12 = k[20] | (k[21] << 8) | (k[22] << 16) | (k[23] << 24);
    var j12 = x12;
    var x13 = k[24] | (k[25] << 8) | (k[26] << 16) | (k[27] << 24);
    var j13 = x13;
    var x14 = k[28] | (k[29] << 8) | (k[30] << 16) | (k[31] << 24);
    var j14 = x14;
    var x15 = c[12] | (c[13] << 8) | (c[14] << 16) | (c[15] << 24);
    var j15 = x15;
    var t = 0;
    for (var i = 20; i > 0; i -= 2) {
        // inlined rotate()'s
        t = (x0 + x12);
        x4 ^= (t << 7) | (t >>> 25);
        t = (x4 + x0);
        x8 ^= (t << 9) | (t >>> 23);
        t = (x8 + x4);
        x12 ^= (t << 13) | (t >>> 19);
        t = (x12 + x8);
        x0 ^= (t << 18) | (t >>> 14);
        t = (x5 + x1);
        x9 ^= (t << 7) | (t >>> 25);
        t = (x9 + x5);
        x13 ^= (t << 9) | (t >>> 23);
        t = (x13 + x9);
        x1 ^= (t << 13) | (t >>> 19);
        t = (x1 + x13);
        x5 ^= (t << 18) | (t >>> 14);
        t = (x10 + x6);
        x14 ^= (t << 7) | (t >>> 25);
        t = (x14 + x10);
        x2 ^= (t << 9) | (t >>> 23);
        t = (x2 + x14);
        x6 ^= (t << 13) | (t >>> 19);
        t = (x6 + x2);
        x10 ^= (t << 18) | (t >>> 14);
        t = (x15 + x11);
        x3 ^= (t << 7) | (t >>> 25);
        t = (x3 + x15);
        x7 ^= (t << 9) | (t >>> 23);
        t = (x7 + x3);
        x11 ^= (t << 13) | (t >>> 19);
        t = (x11 + x7);
        x15 ^= (t << 18) | (t >>> 14);
        t = (x0 + x3);
        x1 ^= (t << 7) | (t >>> 25);
        t = (x1 + x0);
        x2 ^= (t << 9) | (t >>> 23);
        t = (x2 + x1);
        x3 ^= (t << 13) | (t >>> 19);
        t = (x3 + x2);
        x0 ^= (t << 18) | (t >>> 14);
        t = (x5 + x4);
        x6 ^= (t << 7) | (t >>> 25);
        t = (x6 + x5);
        x7 ^= (t << 9) | (t >>> 23);
        t = (x7 + x6);
        x4 ^= (t << 13) | (t >>> 19);
        t = (x4 + x7);
        x5 ^= (t << 18) | (t >>> 14);
        t = (x10 + x9);
        x11 ^= (t << 7) | (t >>> 25);
        t = (x11 + x10);
        x8 ^= (t << 9) | (t >>> 23);
        t = (x8 + x11);
        x9 ^= (t << 13) | (t >>> 19);
        t = (x9 + x8);
        x10 ^= (t << 18) | (t >>> 14);
        t = (x15 + x14);
        x12 ^= (t << 7) | (t >>> 25);
        t = (x12 + x15);
        x13 ^= (t << 9) | (t >>> 23);
        t = (x13 + x12);
        x14 ^= (t << 13) | (t >>> 19);
        t = (x14 + x13);
        x15 ^= (t << 18) | (t >>> 14);
    }
    x0 = (x0 + j0);
    x1 = (x1 + j1);
    x2 = (x2 + j2);
    x3 = (x3 + j3);
    x4 = (x4 + j4);
    x5 = (x5 + j5);
    x6 = (x6 + j6);
    x7 = (x7 + j7);
    x8 = (x8 + j8);
    x9 = (x9 + j9);
    x10 = (x10 + j10);
    x11 = (x11 + j11);
    x12 = (x12 + j12);
    x13 = (x13 + j13);
    x14 = (x14 + j14);
    x15 = (x15 + j15);
    // inlined store_littleendian()'s
    out[0] = x0;
    out[1] = x0 >>> 8;
    out[2] = x0 >>> 16;
    out[3] = x0 >>> 24;
    out[4] = x1;
    out[5] = x1 >>> 8;
    out[6] = x1 >>> 16;
    out[7] = x1 >>> 24;
    out[8] = x2;
    out[9] = x2 >>> 8;
    out[10] = x2 >>> 16;
    out[11] = x2 >>> 24;
    out[12] = x3;
    out[13] = x3 >>> 8;
    out[14] = x3 >>> 16;
    out[15] = x3 >>> 24;
    out[16] = x4;
    out[17] = x4 >>> 8;
    out[18] = x4 >>> 16;
    out[19] = x4 >>> 24;
    out[20] = x5;
    out[21] = x5 >>> 8;
    out[22] = x5 >>> 16;
    out[23] = x5 >>> 24;
    out[24] = x6;
    out[25] = x6 >>> 8;
    out[26] = x6 >>> 16;
    out[27] = x6 >>> 24;
    out[28] = x7;
    out[29] = x7 >>> 8;
    out[30] = x7 >>> 16;
    out[31] = x7 >>> 24;
    out[32] = x8;
    out[33] = x8 >>> 8;
    out[34] = x8 >>> 16;
    out[35] = x8 >>> 24;
    out[36] = x9;
    out[37] = x9 >>> 8;
    out[38] = x9 >>> 16;
    out[39] = x9 >>> 24;
    out[40] = x10;
    out[41] = x10 >>> 8;
    out[42] = x10 >>> 16;
    out[43] = x10 >>> 24;
    out[44] = x11;
    out[45] = x11 >>> 8;
    out[46] = x11 >>> 16;
    out[47] = x11 >>> 24;
    out[48] = x12;
    out[49] = x12 >>> 8;
    out[50] = x12 >>> 16;
    out[51] = x12 >>> 24;
    out[52] = x13;
    out[53] = x13 >>> 8;
    out[54] = x13 >>> 16;
    out[55] = x13 >>> 24;
    out[56] = x14;
    out[57] = x14 >>> 8;
    out[58] = x14 >>> 16;
    out[59] = x14 >>> 24;
    out[60] = x15;
    out[61] = x15 >>> 8;
    out[62] = x15 >>> 16;
    out[63] = x15 >>> 24;
}
exports.salsa20 = salsa20;
/**
 * Analog of crypto_core in crypto_core/hsalsa20/ref2/core.c
 * It makes nicer, shorter code to have variables of this function sitting in
 * one array, but expanded version runs faster.
 * We inlined load_littleendian(() & store_littleendian(), and rotate()
 * functions from the original source.
 * @param out is Uint8Array, 32 bytes long, into which result is placed.
 * @param inArr is Uint8Array, 16 bytes long, of incoming bytes.
 * @param k is Uint8Array, 32 bytes long.
 * @param c is Uint8Array, 16 bytes long.
 */
function hsalsa20(out, inArr, k, c) {
    // inlined load_littleendian()'s
    var x0 = c[0] | (c[1] << 8) | (c[2] << 16) | (c[3] << 24);
    var x1 = k[0] | (k[1] << 8) | (k[2] << 16) | (k[3] << 24);
    var x2 = k[4] | (k[5] << 8) | (k[6] << 16) | (k[7] << 24);
    var x3 = k[8] | (k[9] << 8) | (k[10] << 16) | (k[11] << 24);
    var x4 = k[12] | (k[13] << 8) | (k[14] << 16) | (k[15] << 24);
    var x5 = c[4] | (c[5] << 8) | (c[6] << 16) | (c[7] << 24);
    var x6 = inArr[0] | (inArr[1] << 8) | (inArr[2] << 16) | (inArr[3] << 24);
    var x7 = inArr[4] | (inArr[5] << 8) | (inArr[6] << 16) | (inArr[7] << 24);
    var x8 = inArr[8] | (inArr[9] << 8) | (inArr[10] << 16) | (inArr[11] << 24);
    var x9 = inArr[12] | (inArr[13] << 8) | (inArr[14] << 16) | (inArr[15] << 24);
    var x10 = c[8] | (c[9] << 8) | (c[10] << 16) | (c[11] << 24);
    var x11 = k[16] | (k[17] << 8) | (k[18] << 16) | (k[19] << 24);
    var x12 = k[20] | (k[21] << 8) | (k[22] << 16) | (k[23] << 24);
    var x13 = k[24] | (k[25] << 8) | (k[26] << 16) | (k[27] << 24);
    var x14 = k[28] | (k[29] << 8) | (k[30] << 16) | (k[31] << 24);
    var x15 = c[12] | (c[13] << 8) | (c[14] << 16) | (c[15] << 24);
    var t = 0;
    for (var i = 20; i > 0; i -= 2) {
        // inlined rotate()'s
        t = (x0 + x12);
        x4 ^= (t << 7) | (t >>> 25);
        t = (x4 + x0);
        x8 ^= (t << 9) | (t >>> 23);
        t = (x8 + x4);
        x12 ^= (t << 13) | (t >>> 19);
        t = (x12 + x8);
        x0 ^= (t << 18) | (t >>> 14);
        t = (x5 + x1);
        x9 ^= (t << 7) | (t >>> 25);
        t = (x9 + x5);
        x13 ^= (t << 9) | (t >>> 23);
        t = (x13 + x9);
        x1 ^= (t << 13) | (t >>> 19);
        t = (x1 + x13);
        x5 ^= (t << 18) | (t >>> 14);
        t = (x10 + x6);
        x14 ^= (t << 7) | (t >>> 25);
        t = (x14 + x10);
        x2 ^= (t << 9) | (t >>> 23);
        t = (x2 + x14);
        x6 ^= (t << 13) | (t >>> 19);
        t = (x6 + x2);
        x10 ^= (t << 18) | (t >>> 14);
        t = (x15 + x11);
        x3 ^= (t << 7) | (t >>> 25);
        t = (x3 + x15);
        x7 ^= (t << 9) | (t >>> 23);
        t = (x7 + x3);
        x11 ^= (t << 13) | (t >>> 19);
        t = (x11 + x7);
        x15 ^= (t << 18) | (t >>> 14);
        t = (x0 + x3);
        x1 ^= (t << 7) | (t >>> 25);
        t = (x1 + x0);
        x2 ^= (t << 9) | (t >>> 23);
        t = (x2 + x1);
        x3 ^= (t << 13) | (t >>> 19);
        t = (x3 + x2);
        x0 ^= (t << 18) | (t >>> 14);
        t = (x5 + x4);
        x6 ^= (t << 7) | (t >>> 25);
        t = (x6 + x5);
        x7 ^= (t << 9) | (t >>> 23);
        t = (x7 + x6);
        x4 ^= (t << 13) | (t >>> 19);
        t = (x4 + x7);
        x5 ^= (t << 18) | (t >>> 14);
        t = (x10 + x9);
        x11 ^= (t << 7) | (t >>> 25);
        t = (x11 + x10);
        x8 ^= (t << 9) | (t >>> 23);
        t = (x8 + x11);
        x9 ^= (t << 13) | (t >>> 19);
        t = (x9 + x8);
        x10 ^= (t << 18) | (t >>> 14);
        t = (x15 + x14);
        x12 ^= (t << 7) | (t >>> 25);
        t = (x12 + x15);
        x13 ^= (t << 9) | (t >>> 23);
        t = (x13 + x12);
        x14 ^= (t << 13) | (t >>> 19);
        t = (x14 + x13);
        x15 ^= (t << 18) | (t >>> 14);
    }
    // inlined store_littleendian()'s
    out[0] = x0;
    out[1] = x0 >>> 8;
    out[2] = x0 >>> 16;
    out[3] = x0 >>> 24;
    out[4] = x5;
    out[5] = x5 >>> 8;
    out[6] = x5 >>> 16;
    out[7] = x5 >>> 24;
    out[8] = x10;
    out[9] = x10 >>> 8;
    out[10] = x10 >>> 16;
    out[11] = x10 >>> 24;
    out[12] = x15;
    out[13] = x15 >>> 8;
    out[14] = x15 >>> 16;
    out[15] = x15 >>> 24;
    out[16] = x6;
    out[17] = x6 >>> 8;
    out[18] = x6 >>> 16;
    out[19] = x6 >>> 24;
    out[20] = x7;
    out[21] = x7 >>> 8;
    out[22] = x7 >>> 16;
    out[23] = x7 >>> 24;
    out[24] = x8;
    out[25] = x8 >>> 8;
    out[26] = x8 >>> 16;
    out[27] = x8 >>> 24;
    out[28] = x9;
    out[29] = x9 >>> 8;
    out[30] = x9 >>> 16;
    out[31] = x9 >>> 24;
}
exports.hsalsa20 = hsalsa20;
Object.freeze(exports);

},{}],3:[function(require,module,exports){
/* Copyright(c) 2013-2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
var verify = require('../util/verify');
/**
 * Analog of add in crypto_onetimeauth/poly1305/ref/auth.c
 * @param h is array of 17 uint32's.
 * @param c is array of 17 uint32's.
 */
function add(h, c) {
    var u = 0;
    for (var j = 0; j < 17; j += 1) {
        u += h[j] + c[j];
        u &= 0xffffffff;
        h[j] = u & 255;
        u >>>= 8;
    }
}
/**
 * Analog of squeeze in crypto_onetimeauth/poly1305/ref/auth.c
 * @param h is array of 17 uint32's.
 */
function squeeze(h) {
    var u = 0;
    for (var j = 0; j < 16; j += 1) {
        u += h[j];
        u &= 0xffffffff;
        h[j] = u & 255;
        u >>>= 8;
    }
    u += h[16];
    u &= 0xffffffff;
    h[16] = u & 3;
    u = 5 * (u >>> 2); // multiplication by 5 is safe here
    u &= 0xffffffff;
    for (j = 0; j < 16; j += 1) {
        u += h[j];
        u &= 0xffffffff;
        h[j] = u & 255;
        u >>>= 8;
    }
    u += h[16];
    u &= 0xffffffff;
    h[16] = u;
}
/**
 * minusp array in crypto_onetimeauth/poly1305/ref/auth.c
 * Length === 17.
 */
var minusp = new Uint32Array([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252]);
/**
 * Analog of freeze in crypto_onetimeauth/poly1305/ref/auth.c
 * @param h is array of 17 uint32's.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use.
 */
function freeze(h, arrFactory) {
    var horig = arrFactory.getUint32Array(17);
    horig.set(h);
    add(h, minusp);
    var negative = -(h[16] >> 7);
    negative &= 0xffffffff;
    for (var j = 0; j < 17; j += 1) {
        h[j] ^= negative & (horig[j] ^ h[j]);
    }
    arrFactory.recycle(horig);
}
/**
 * Analog of mulmod in crypto_onetimeauth/poly1305/ref/auth.c
 * @param h is array of 17 uint32's.
 * @param r is array of 17 uint32's.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use.
 */
function mulmod(h, r, arrFactory) {
    var hr = arrFactory.getUint32Array(17), u = 0;
    for (var i = 0; i < 17; i += 1) {
        u = 0;
        for (var j = 0; j <= i; j += 1) {
            u += h[j] * r[i - j];
            u &= 0xffffffff;
        }
        for (var j = i + 1; j < 17; j += 1) {
            u += 320 * h[j] * r[i + 17 - j];
            u &= 0xffffffff;
        }
        hr[i] = u;
    }
    h.set(hr);
    squeeze(h);
    arrFactory.recycle(hr);
}
/**
 * Analog of crypto_onetimeauth in crypto_onetimeauth/poly1305/ref/auth.c
 * @param outArr is Uint8Array, 16 bytes long, into which poly hash is placed.
 * @param inArr is Uint8Array, with incoming bytes, whatever the length there is.
 * @param k is Uint8Array, 32 bytes long.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use.
 */
function poly1305(outArr, inArr, k, arrFactory) {
    var r = arrFactory.getUint32Array(17), h = arrFactory.getUint32Array(17), c = arrFactory.getUint32Array(17), inlen = inArr.length, inArrInd = 0;
    r[0] = k[0];
    r[1] = k[1];
    r[2] = k[2];
    r[3] = k[3] & 15;
    r[4] = k[4] & 252;
    r[5] = k[5];
    r[6] = k[6];
    r[7] = k[7] & 15;
    r[8] = k[8] & 252;
    r[9] = k[9];
    r[10] = k[10];
    r[11] = k[11] & 15;
    r[12] = k[12] & 252;
    r[13] = k[13];
    r[14] = k[14];
    r[15] = k[15] & 15;
    r[16] = 0;
    for (var j = 0; j < 17; j += 1) {
        h[j] = 0;
    }
    var j = 0;
    while (inlen > 0) {
        for (j = 0; j < 17; j += 1) {
            c[j] = 0;
        }
        for (j = 0; (j < 16) && (j < inlen); j += 1) {
            c[j] = inArr[inArrInd + j];
        }
        c[j] = 1;
        inArrInd += j;
        inlen -= j;
        add(h, c);
        mulmod(h, r, arrFactory);
    }
    freeze(h, arrFactory);
    for (var j = 0; j < 16; j += 1) {
        c[j] = k[j + 16];
    }
    c[16] = 0;
    add(h, c);
    for (var j = 0; j < 16; j += 1) {
        outArr[j] = h[j];
    }
}
exports.poly1305 = poly1305;
/**
 * Analog of crypto_onetimeauth in crypto_onetimeauth/poly1305/ref/verify.c
 * @param h is Uint8Array, 16 bytes long poly hash.
 * @param inArr is Uint8Array, with incoming bytes, whatever the length there is.
 * @param k is Uint8Array, 32 bytes long.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use.
 * @return true, if calculated poly hash is identical to the given hash, otherwise,
 * false.
 */
function poly1305_verify(h, inArr, k, arrFactory) {
    var correct = arrFactory.getUint8Array(16);
    poly1305(correct, inArr, k, arrFactory);
    var areSame = verify.v16(h, correct);
    arrFactory.recycle(correct);
    return areSame;
}
exports.poly1305_verify = poly1305_verify;
Object.freeze(exports);

},{"../util/verify":19}],4:[function(require,module,exports){
/* Copyright(c) 2013-2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
/**
 * Analog of add in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param a is Uint32Array, 32 items long.
 * @param b is Uint32Array, 32 items long.
 */
function add(out, a, b) {
    var u = 0;
    for (var j = 0; j < 31; j += 1) {
        u += a[j] + b[j];
        u &= 0xffffffff;
        out[j] = u & 255;
        u >>>= 8;
    }
    u += a[31] + b[31];
    u &= 0xffffffff;
    out[31] = u;
}
/**
 * Analog of sub in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param a is Uint32Array, 32 items long.
 * @param b is Uint32Array, 32 items long.
 */
function sub(out, a, b) {
    var u = 218;
    for (var j = 0; j < 31; j += 1) {
        u += a[j] + 65280 - b[j];
        u &= 0xffffffff;
        out[j] = u & 255;
        u >>>= 8;
    }
    u += a[31] - b[31];
    u &= 0xffffffff;
    out[31] = u;
}
/**
 * Analog of squeeze in crypto_scalarmult/curve25519/ref/smult.c
 * @param a is Uint32Array, 32 items long.
 */
function squeeze(a) {
    var u = 0;
    for (var j = 0; j < 31; j += 1) {
        u += a[j];
        u &= 0xffffffff;
        a[j] = u & 255;
        u >>>= 8;
    }
    u += a[31];
    u &= 0xffffffff;
    a[31] = u & 127;
    u = 19 * (u >>> 7);
    u &= 0xffffffff;
    for (var j = 0; j < 31; j += 1) {
        u += a[j];
        u &= 0xffffffff;
        a[j] = u & 255;
        u >>>= 8;
    }
    u += a[31];
    u &= 0xffffffff;
    a[31] = u;
}
/**
 * minusp array in crypto_scalarmult/curve25519/ref/smult.c
 * Length === 32.
 */
var minusp = new Uint32Array([19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);
/**
 * Analog of freeze in crypto_scalarmult/curve25519/ref/smult.c
 * @param a is Uint32Array, 32 items long.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use.
 */
function freeze(a, arrFactory) {
    var aorig = arrFactory.getUint32Array(32);
    aorig.set(a);
    add(a, a, minusp);
    var negative = -((a[31] >>> 7) & 1);
    negative &= 0xffffffff;
    for (var j = 0; j < 32; j += 1) {
        a[j] ^= negative & (aorig[j] ^ a[j]);
    }
    arrFactory.recycle(aorig);
}
/**
 * Analog of mult in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param a is Uint32Array, 32 items long.
 * @param b is Uint32Array, 32 items long.
 */
function mult(out, a, b) {
    var u = 0;
    for (var i = 0; i < 32; i += 1) {
        u = 0;
        for (var j = 0; j <= i; j += 1) {
            u += a[j] * b[i - j];
            u &= 0xffffffff;
        }
        for (var j = i + 1; j < 32; j += 1) {
            u += 38 * a[j] * b[i + 32 - j];
            u &= 0xffffffff;
        }
        out[i] = u;
    }
    squeeze(out);
}
/**
 * Analog of mult121665 in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param a is Uint32Array, 32 items long.
 */
function mult121665(out, a) {
    var u = 0;
    for (var j = 0; j < 31; j += 1) {
        u += 121665 * a[j];
        u &= 0xffffffff;
        out[j] = u & 255;
        u >>>= 8;
    }
    u += 121665 * a[31];
    u &= 0xffffffff;
    out[31] = u & 127;
    u = 19 * (u >>> 7);
    u &= 0xffffffff;
    for (var j = 0; j < 31; j += 1) {
        u += out[j];
        u &= 0xffffffff;
        out[j] = u & 255;
        u >>>= 8;
    }
    u += out[j];
    u &= 0xffffffff;
    out[j] = u;
}
/**
 * Analog of square in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param a is Uint32Array, 32 items long.
 */
function square(out, a) {
    var u = 0;
    for (var i = 0; i < 32; i += 1) {
        u = 0;
        for (var j = 0; j < (i - j); j += 1) {
            u += a[j] * a[i - j];
            u &= 0xffffffff;
        }
        for (var j = (i + 1); j < (i + 32 - j); j += 1) {
            u += 38 * a[j] * a[i + 32 - j];
            u &= 0xffffffff;
        }
        u *= 2;
        u &= 0xffffffff;
        if ((i & 1) === 0) {
            u += a[i / 2] * a[i / 2];
            u &= 0xffffffff;
            u += 38 * a[i / 2 + 16] * a[i / 2 + 16];
            u &= 0xffffffff;
        }
        out[i] = u;
    }
    squeeze(out);
}
/**
 * Analog of select in crypto_scalarmult/curve25519/ref/smult.c
 * @param p is Uint32Array, 64 items long.
 * @param q is Uint32Array, 64 items long.
 * @param r is Uint32Array, 64 items long.
 * @param s is Uint32Array, 64 items long.
 * @param b is a number within Uint32 limits.
 */
function select(p, q, r, s, b) {
    b &= 0xffffffff;
    var t = 0;
    var bminus1 = b - 1;
    bminus1 &= 0xffffffff;
    for (var j = 0; j < 64; j += 1) {
        t = bminus1 & (r[j] ^ s[j]);
        p[j] = s[j] ^ t;
        q[j] = r[j] ^ t;
    }
}
/**
 * Analog of mainloop in crypto_scalarmult/curve25519/ref/smult.c
 * @param work is Uint32Array, 64 items long.
 * @param e is Uint32Array, 32 items long.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use.
 */
function mainloop(work, e, arrFactory) {
    var xzm1 = arrFactory.getUint32Array(64);
    var xzm = arrFactory.getUint32Array(64);
    var xzmb = arrFactory.getUint32Array(64);
    var xzm1b = arrFactory.getUint32Array(64);
    var xznb = arrFactory.getUint32Array(64);
    var xzn1b = arrFactory.getUint32Array(64);
    var a0 = arrFactory.getUint32Array(64);
    var a1 = arrFactory.getUint32Array(64);
    var b0 = arrFactory.getUint32Array(64);
    var b1 = arrFactory.getUint32Array(64);
    var c1 = arrFactory.getUint32Array(64);
    var r = arrFactory.getUint32Array(32);
    var s = arrFactory.getUint32Array(32);
    var t = arrFactory.getUint32Array(32);
    var u = arrFactory.getUint32Array(32);
    var b = 0;
    for (var j = 0; j < 32; j += 1) {
        xzm1[j] = work[j];
    }
    xzm1[32] = 1;
    for (var j = 33; j < 64; j += 1) {
        xzm1[j] = 0;
    }
    xzm[0] = 1;
    for (var j = 1; j < 64; j += 1) {
        xzm[j] = 0;
    }
    // views of last 32 elements of original arrays
    var xzmb_32 = xzmb.subarray(32, 64), xzm1b_32 = xzm1b.subarray(32, 64), a0_32 = a0.subarray(32, 64), a1_32 = a1.subarray(32, 64), b0_32 = b0.subarray(32, 64), b1_32 = b1.subarray(32, 64), c1_32 = c1.subarray(32, 64), xznb_32 = xznb.subarray(32, 64), xzn1b_32 = xzn1b.subarray(32, 64);
    for (var pos = 254; pos >= 0; pos -= 1) {
        b = e[Math.floor(pos / 8)] >>> (pos & 7);
        b &= 1;
        select(xzmb, xzm1b, xzm, xzm1, b);
        add(a0, xzmb, xzmb_32);
        sub(a0_32, xzmb, xzmb_32);
        add(a1, xzm1b, xzm1b_32);
        sub(a1_32, xzm1b, xzm1b_32);
        square(b0, a0);
        square(b0_32, a0_32);
        mult(b1, a1, a0_32);
        mult(b1_32, a1_32, a0);
        add(c1, b1, b1_32);
        sub(c1_32, b1, b1_32);
        square(r, c1_32);
        sub(s, b0, b0_32);
        mult121665(t, s);
        add(u, t, b0);
        mult(xznb, b0, b0_32);
        mult(xznb_32, s, u);
        square(xzn1b, c1);
        mult(xzn1b_32, r, work);
        select(xzm, xzm1, xznb, xzn1b, b);
    }
    work.set(xzm);
    arrFactory.recycle(xzm1, xzm, xzmb, xzm1b, xznb, xzn1b, a0, a1, b0, b1, c1, r, s, t, u);
}
/**
 * Analog of recip in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param z is Uint32Array, 32 items long.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use.
 */
function recip(out, z, arrFactory) {
    var z2 = arrFactory.getUint32Array(32);
    var z9 = arrFactory.getUint32Array(32);
    var z11 = arrFactory.getUint32Array(32);
    var z2_5_0 = arrFactory.getUint32Array(32);
    var z2_10_0 = arrFactory.getUint32Array(32);
    var z2_20_0 = arrFactory.getUint32Array(32);
    var z2_50_0 = arrFactory.getUint32Array(32);
    var z2_100_0 = arrFactory.getUint32Array(32);
    var t0 = arrFactory.getUint32Array(32);
    var t1 = arrFactory.getUint32Array(32);
    /* 2 */ square(z2, z);
    /* 4 */ square(t1, z2);
    /* 8 */ square(t0, t1);
    /* 9 */ mult(z9, t0, z);
    /* 11 */ mult(z11, z9, z2);
    /* 22 */ square(t0, z11);
    /* 2^5 - 2^0 = 31 */ mult(z2_5_0, t0, z9);
    /* 2^6 - 2^1 */ square(t0, z2_5_0);
    /* 2^7 - 2^2 */ square(t1, t0);
    /* 2^8 - 2^3 */ square(t0, t1);
    /* 2^9 - 2^4 */ square(t1, t0);
    /* 2^10 - 2^5 */ square(t0, t1);
    /* 2^10 - 2^0 */ mult(z2_10_0, t0, z2_5_0);
    /* 2^11 - 2^1 */ square(t0, z2_10_0);
    /* 2^12 - 2^2 */ square(t1, t0);
    for (var i = 2; i < 10; i += 2) {
        square(t0, t1);
        square(t1, t0);
    }
    /* 2^20 - 2^0 */ mult(z2_20_0, t1, z2_10_0);
    /* 2^21 - 2^1 */ square(t0, z2_20_0);
    /* 2^22 - 2^2 */ square(t1, t0);
    for (var i = 2; i < 20; i += 2) {
        square(t0, t1);
        square(t1, t0);
    }
    /* 2^40 - 2^0 */ mult(t0, t1, z2_20_0);
    /* 2^41 - 2^1 */ square(t1, t0);
    /* 2^42 - 2^2 */ square(t0, t1);
    for (var i = 2; i < 10; i += 2) {
        square(t1, t0);
        square(t0, t1);
    }
    /* 2^50 - 2^0 */ mult(z2_50_0, t0, z2_10_0);
    /* 2^51 - 2^1 */ square(t0, z2_50_0);
    /* 2^52 - 2^2 */ square(t1, t0);
    for (var i = 2; i < 50; i += 2) {
        square(t0, t1);
        square(t1, t0);
    }
    /* 2^100 - 2^0 */ mult(z2_100_0, t1, z2_50_0);
    /* 2^101 - 2^1 */ square(t1, z2_100_0);
    /* 2^102 - 2^2 */ square(t0, t1);
    for (var i = 2; i < 100; i += 2) {
        square(t1, t0);
        square(t0, t1);
    }
    /* 2^200 - 2^0 */ mult(t1, t0, z2_100_0);
    /* 2^201 - 2^1 */ square(t0, t1);
    /* 2^202 - 2^2 */ square(t1, t0);
    for (var i = 2; i < 50; i += 2) {
        square(t0, t1);
        square(t1, t0);
    }
    /* 2^250 - 2^0 */ mult(t0, t1, z2_50_0);
    /* 2^251 - 2^1 */ square(t1, t0);
    /* 2^252 - 2^2 */ square(t0, t1);
    /* 2^253 - 2^3 */ square(t1, t0);
    /* 2^254 - 2^4 */ square(t0, t1);
    /* 2^255 - 2^5 */ square(t1, t0);
    /* 2^255 - 21 */ mult(out, t1, z11);
    arrFactory.recycle(z2, z9, z11, z2_5_0, z2_10_0, z2_20_0, z2_50_0, z2_100_0, t0, t1);
}
/**
 * Analog of crypto_scalarmult in crypto_scalarmult/curve25519/ref/smult.c
 * @param q is Uint8Array, 32 items long.
 * @param n is Uint8Array, 32 items long.
 * @param p is Uint8Array, 32 items long.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use.
 */
function curve25519(q, n, p, arrFactory) {
    var work = arrFactory.getUint32Array(96);
    var e = arrFactory.getUint32Array(32);
    e.set(n);
    e[0] &= 248;
    e[31] &= 127;
    e[31] |= 64;
    // partial views of work array
    var work_32 = work.subarray(32, 64);
    var work_64 = work.subarray(64, 96);
    work.set(p); // sets first 32 elements, as p.length===32
    mainloop(work, e, arrFactory);
    recip(work_32, work_32, arrFactory);
    mult(work_64, work, work_32);
    freeze(work_64, arrFactory);
    q.set(work_64);
    arrFactory.recycle(work, e);
}
exports.curve25519 = curve25519;
/**
 * base array in crypto_scalarmult/curve25519/ref/base.c
 */
var base = new Uint8Array(32);
base[0] = 9;
/**
 * Analog of crypto_scalarmult_base in crypto_scalarmult/curve25519/ref/base.c
 * @param q is Uint8Array, 32 items long.
 * @param n is Uint8Array, 32 items long.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use.
 */
function curve25519_base(q, n, arrFactory) {
    curve25519(q, n, base, arrFactory);
}
exports.curve25519_base = curve25519_base;
Object.freeze(exports);

},{}],5:[function(require,module,exports){
/* Copyright(c) 2013 - 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
var stream = require('./stream');
var auth = require('./onetimeauth');
var arrays = require('../util/arrays');
var nonceUtils = require('../util/nonce');
function checkPackArgs(m, n, k) {
    if (!(m instanceof Uint8Array)) {
        throw new TypeError("Message array m must be Uint8Array.");
    }
    if (m.length === 0) {
        throw new Error("Message array should have at least one byte.");
    }
    if (!(n instanceof Uint8Array)) {
        throw new TypeError("Nonce array n must be Uint8Array.");
    }
    if (n.length !== 24) {
        throw new Error("Nonce array n should have 24 elements (bytes) in it, but it is " + n.length + " elements long.");
    }
    if (!(k instanceof Uint8Array)) {
        throw new TypeError("Key array k must be Uint8Array.");
    }
    if (k.length !== 32) {
        throw new Error("Key array k should have 32 elements (bytes) in it, but it is " + k.length + " elements long.");
    }
}
/**
 * Analog of crypto_secretbox in crypto_secretbox/xsalsa20poly1305/ref/box.c
 * with an addition that given message should not be padded with zeros, and all
 * padding happen automagically without copying message array.
 * @param c is Uint8Array for resulting cipher, with length being 32 bytes longer
 * than message.
 * Resulting cipher of incoming message, packaged according to NaCl's
 * xsalsa20+poly1305 secret-box bytes layout, with 16 leading zeros.
 * @param m is Uint8Array of message bytes that need to be encrypted by secret key.
 * @param n is Uint8Array, 24 bytes long nonce.
 * @param k is Uint8Array, 32 bytes long secret key.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use.
 */
function xsalsa20poly1305_pad_and_pack(c, m, n, k, arrFactory) {
    if (c.length < 32 + m.length) {
        throw new Error("Given array c is too short for output.");
    }
    stream.xsalsa20_xor(c, m, 32, n, k, arrFactory);
    var dataPartOfC = c.subarray(32), polyOut = c.subarray(16, 32), polyKey = c.subarray(0, 32);
    auth.poly1305(polyOut, dataPartOfC, polyKey, arrFactory);
    for (var i = 0; i < 16; i += 1) {
        c[i] = 0;
    }
}
/**
 * @param m is Uint8Array of message bytes that need to be encrypted by secret key.
 * @param n is Uint8Array, 24 bytes long nonce.
 * @param k is Uint8Array, 32 bytes long secret key.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use. It may be undefined, in which case an internally created one is used.
 * @return Uint8Array with resulting cipher of incoming message, packaged according
 * to NaCl's xsalsa20+poly1305 secret-box bytes layout, trimmed of initial zeros,
 * by having a view on array, starting with non-zero part.
 */
function pack(m, n, k, arrFactory) {
    checkPackArgs(m, n, k);
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var c = new Uint8Array(m.length + 32);
    xsalsa20poly1305_pad_and_pack(c, m, n, k, arrFactory);
    c = c.subarray(16);
    arrFactory.wipeRecycled();
    return c;
}
exports.pack = pack;
/**
 * Analog of crypto_secretbox_open in crypto_secretbox/xsalsa20poly1305/ref/box.c
 * with an addition that given cipher should not be padded with zeros, and all
 * padding happen automagically without copying cipher array.
 * @param c is Uint8Array of cipher bytes that need to be opened by secret key.
 * @param n is Uint8Array, 24 bytes long nonce.
 * @param k is Uint8Array, 32 bytes long secret key.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use. It may be undefined, in which case an internally created one is used.
 * @return Uint8Array with opened message.
 * Array is a view of buffer, which has 32 zeros preceding message bytes.
 */
function open(c, n, k, arrFactory) {
    if (!(c instanceof Uint8Array)) {
        throw new TypeError("Cipher array c must be Uint8Array.");
    }
    if (c.length < 17) {
        throw new Error("Cipher array c should have at least 17 elements (bytes) in it, but is only " + c.length + " elements long.");
    }
    if (!(n instanceof Uint8Array)) {
        throw new TypeError("Nonce array n must be Uint8Array.");
    }
    if (n.length !== 24) {
        throw new Error("Nonce array n should have 24 elements (bytes) in it, but it is " + n.length + " elements long.");
    }
    if (!(k instanceof Uint8Array)) {
        throw new TypeError("Key array k must be Uint8Array.");
    }
    if (k.length !== 32) {
        throw new Error("Key array k should have 32 elements (bytes) in it, but it is " + k.length + " elements long.");
    }
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var m = new Uint8Array(c.length + 16);
    var subkey = arrFactory.getUint8Array(32);
    stream.xsalsa20(subkey, n, k, arrFactory);
    var polyPartOfC = c.subarray(0, 16);
    var msgPartOfC = c.subarray(16);
    if (!auth.poly1305_verify(polyPartOfC, msgPartOfC, subkey, arrFactory)) {
        var err = new Error("Cipher bytes fail verification.");
        err.failedCipherVerification = true;
        throw err;
    }
    stream.xsalsa20_xor(m, c, 16, n, k, arrFactory);
    for (var i = 0; i < 32; i++) {
        m[i] = 0;
    }
    arrFactory.recycle(subkey);
    arrFactory.wipeRecycled();
    m = m.subarray(32);
    return m;
}
exports.open = open;
/**
 * @param c is Uint8Array for packing nonce together with cipher.
 * Its length should be 40 bytes longer than that of a message.
 * @param m is Uint8Array of message bytes that need to be encrypted by secret key.
 * @param n is Uint8Array, 24 bytes long nonce.
 * @param k is Uint8Array, 32 bytes long secret key.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use. It may be undefined, in which case an internally created one is used.
 */
function packWithNonceInto(c, m, n, k, arrFactory) {
    checkPackArgs(m, n, k);
    if (c.length < 40 + m.length) {
        throw new Error("Array c, for packing nonce and cipher, is too short.");
    }
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    xsalsa20poly1305_pad_and_pack(c.subarray(8), m, n, k, arrFactory);
    c.set(n); // sets first 24 bytes (length of n) to nonce value
    arrFactory.wipeRecycled();
}
var regularOpen = open;
var formatWN;
(function (formatWN) {
    /**
     * @param m is Uint8Array of message bytes that need to be encrypted by secret key.
     * @param n is Uint8Array, 24 bytes long nonce.
     * @param k is Uint8Array, 32 bytes long secret key.
     * @param arrFactory is typed arrays factory, used to allocated/find an array
     * for use. It may be undefined, in which case an internally created one is used.
     * @returns Uint8Array, where nonce is packed together with cipher.
     * Length of the returned array is 40 bytes greater than that of a message.
     */
    function pack(m, n, k, arrFactory) {
        if (!arrFactory) {
            arrFactory = arrays.makeFactory();
        }
        var c = new Uint8Array(40 + m.length);
        packWithNonceInto(c, m, n, k, arrFactory);
        arrFactory.wipeRecycled();
        return c;
    }
    formatWN.pack = pack;
    /**
     * @param c is Uint8Array with nonce and cipher bytes that need to be opened by secret key.
     * @param k is Uint8Array, 32 bytes long secret key.
     * @param arrFactory is typed arrays factory, used to allocated/find an array for use.
     * It may be undefined, in which case an internally created one is used.
     * @return Uint8Array with opened message.
     * Array is a view of buffer, which has 32 zeros preceding message bytes.
     */
    function open(c, k, arrFactory) {
        if (c.length < 41) {
            throw new Error("Array c with nonce and cipher should " + "have at least 41 elements (bytes) in it, but is only " + c.length + " elements long.");
        }
        if (!arrFactory) {
            arrFactory = arrays.makeFactory();
        }
        var n = c.subarray(0, 24);
        c = c.subarray(24);
        var m = regularOpen(c, n, k, arrFactory);
        arrFactory.wipeRecycled();
        return m;
    }
    formatWN.open = open;
    /**
     * @param c is Uint8Array with nonce and cipher bytes
     * @returns Uint8Array, which is a copy of 24-byte nonce from a given array c
     */
    function copyNonceFrom(c) {
        if (c.length < 41) {
            throw new Error("Array c with nonce and cipher should have at " + "least 41 elements (bytes) in it, but is only " + c.length + " elements long.");
        }
        return new Uint8Array(c.subarray(0, 24));
    }
    formatWN.copyNonceFrom = copyNonceFrom;
    /**
     *
     * @param key for new encryptor.
     * Note that key will be copied, thus, if given array shall never be used anywhere, it should
     * be wiped after this call.
     * @param nextNonce is nonce, which should be used for the very first packing.
     * All further packing will be done with new nonce, as it is automatically evenly advanced.
     * Note that nextNonce will be copied.
     * @param delta is a number between 1 and 255 inclusive, used to advance nonce.
     * When missing, it defaults to one.
     * @param arrFactory is typed arrays factory, used to allocated/find an array for use.
     * It may be undefined, in which case an internally created one is used.
     * @return a frozen object with pack & open functions, and destroy
     * It is NaCl's secret box for a given key, with automatically evenly advancing nonce.
     */
    function makeEncryptor(key, nextNonce, delta, arrFactory) {
        if (!(nextNonce instanceof Uint8Array)) {
            throw new TypeError("Nonce array nextNonce must be Uint8Array.");
        }
        if (nextNonce.length !== 24) {
            throw new Error("Nonce array nextNonce should have 24 elements (bytes) in it, but it is " + nextNonce.length + " elements long.");
        }
        if (!(key instanceof Uint8Array)) {
            throw new TypeError("Key array key must be Uint8Array.");
        }
        if (key.length !== 32) {
            throw new Error("Key array key should have 32 elements (bytes) in it, but it is " + key.length + " elements long.");
        }
        if ('number' !== typeof delta) {
            delta = 1;
        }
        else if ((delta < 1) || (delta > 255)) {
            throw new Error("Given delta is out of bounds.");
        }
        // set variable in the closure
        if (!arrFactory) {
            arrFactory = arrays.makeFactory();
        }
        key = new Uint8Array(key);
        nextNonce = new Uint8Array(nextNonce);
        var counter = 0;
        // arrange and freeze resulting object
        var encryptor = {
            pack: function (m) {
                if (!key) {
                    throw new Error("This encryptor cannot be used, " + "as it had already been destroyed.");
                }
                if (counter > 0xfffffffffffff) {
                    throw new Error("This encryptor " + "has been used 2^52 (too many) times. Further use may " + "lead to duplication of nonces.");
                }
                var c = pack(m, nextNonce, key, arrFactory);
                nonceUtils.advance(nextNonce, delta);
                counter += 1;
                return c;
            },
            destroy: function () {
                if (!key) {
                    return;
                }
                arrFactory.wipe(key, nextNonce);
                key = null;
                nextNonce = null;
                arrFactory = null;
            },
            getDelta: function () {
                return delta;
            }
        };
        Object.freeze(encryptor);
        return encryptor;
    }
    formatWN.makeEncryptor = makeEncryptor;
    /**
     *
     * @param key for new decryptor.
     * @param arrFactory is typed arrays factory, used to allocated/find an array for use.
     * It may be undefined, in which case an internally created one is used.
     * Note that key will be copied, thus, if given array shall never be used anywhere,
     * it should be wiped after this call.
     * @return a frozen object with pack & open and destroy functions.
     */
    function makeDecryptor(key, arrFactory) {
        if (!(key instanceof Uint8Array)) {
            throw new TypeError("Key array key must be Uint8Array.");
        }
        if (key.length !== 32) {
            throw new Error("Key array key should have 32 elements (bytes) in it, but it is " + key.length + " elements long.");
        }
        // set variable in the closure
        if (!arrFactory) {
            arrFactory = arrays.makeFactory();
        }
        key = new Uint8Array(key);
        // arrange and freeze resulting object
        var decryptor = {
            open: function (c) {
                if (!key) {
                    throw new Error("This encryptor cannot be used, " + "as it had already been destroyed.");
                }
                return open(c, key, arrFactory);
            },
            destroy: function () {
                if (!key) {
                    return;
                }
                arrFactory.wipe(key);
                key = null;
                arrFactory = null;
            }
        };
        Object.freeze(decryptor);
        return decryptor;
    }
    formatWN.makeDecryptor = makeDecryptor;
})(formatWN = exports.formatWN || (exports.formatWN = {}));
Object.freeze(formatWN);
exports.NONCE_LENGTH = 24;
exports.KEY_LENGTH = 32;
exports.POLY_LENGTH = 16;
exports.JWK_ALG_NAME = 'NaCl-sbox-XSP';
Object.freeze(exports);

},{"../util/arrays":17,"../util/nonce":18,"./onetimeauth":3,"./stream":6}],6:[function(require,module,exports){
/* Copyright(c) 2013 - 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
var arrays = require('../util/arrays');
var core = require('./core');
/**
 * sigma array in crypto_stream/salsa20/ref/stream.c
 */
exports.SIGMA = new Uint8Array(16);
(function () {
    var str = "expand 32-byte k";
    for (var i = 0; i < 16; i += 1) {
        exports.SIGMA[i] = str.charCodeAt(i);
    }
})();
/**
 * Analog of crypto_stream in crypto_stream/salsa20/ref/stream.c
 * @param c is Uint8Array of some length, for outgoing bytes (cipher).
 * @param n is Uint8Array, 8 bytes long nonce.
 * @param k is Uint8Array, 32 bytes long key.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use. It may be undefined, in which case an internally created one is used.
 */
function stream_salsa20(c, n, k, arrFactory) {
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var inArr = arrFactory.getUint8Array(16), u = 0;
    if (c.length === 0) {
        return;
    }
    inArr.set(n);
    for (var i = 8; i < 16; i += 1) {
        inArr[i] = 0;
    }
    var cstart = 0, clen = c.length, outArr;
    while (clen >= 64) {
        outArr = new Uint8Array(c.buffer, cstart, 64);
        core.salsa20(outArr, inArr, k, exports.SIGMA);
        u = 1;
        for (var i = 8; i < 16; i += 1) {
            u += inArr[i];
            u &= 0xffffffff;
            inArr[i] = u;
            u >>>= 8;
        }
        clen -= 64;
        cstart += 64;
    }
    if (clen > 0) {
        var block = arrFactory.getUint8Array(64);
        core.salsa20(block, inArr, k, exports.SIGMA);
        for (i = 0; i < clen; ++i) {
            c[i] = block[i];
        }
        arrFactory.recycle(block);
    }
    arrFactory.recycle(inArr);
}
/**
 * Analog of crypto_stream_xor in crypto_stream/salsa20/ref/xor.c
 * with an addition of pad parameter for incoming array, which creates the pad on
 * the fly, without wasteful copying of potentially big xor-ed incoming array.
 * @param c is Uint8Array of outgoing bytes with resulting cipher, of the same
 * length as incoming array m, plus the pad.
 * @param m is Uint8Array of incoming bytes, that are xor-ed into cryptographic
 * stream.
 * @param mPadLen is number of zeros that should be in front of message array,
 * always between 0 and 63.
 * @param n is Uint8Array, 8 bytes long nonce.
 * @param k is Uint8Array, 32 bytes long key.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use. It may be undefined, in which case an internally created one is used.
 */
function stream_salsa20_xor(c, m, mPadLen, n, k, arrFactory) {
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var inArr = arrFactory.getUint8Array(16), block = arrFactory.getUint8Array(64), u = 0;
    if (m.length === 0) {
        return;
    }
    inArr.set(n);
    for (var i = 8; i < 16; i += 1) {
        inArr[i] = 0;
    }
    var mWithPadLen = m.length + mPadLen;
    if (mWithPadLen < 64) {
        core.salsa20(block, inArr, k, exports.SIGMA);
        for (var i = 0; i < mPadLen; i += 1) {
            c[i] = block[i];
        }
        for (var i = mPadLen; i < mWithPadLen; i += 1) {
            c[i] = m[i - mPadLen] ^ block[i];
        }
        return;
    }
    var cp = 0, mp = 0;
    {
        core.salsa20(block, inArr, k, exports.SIGMA);
        for (var i = 0; i < mPadLen; i += 1) {
            c[i] = block[i];
        }
        for (var i = mPadLen; i < 64; i += 1) {
            c[i] = m[i - mPadLen] ^ block[i];
        }
        u = 1;
        for (var i = 8; i < 16; i += 1) {
            u += inArr[i];
            u &= 0xffffffff;
            inArr[i] = u;
            u >>>= 8;
        }
        mWithPadLen -= 64;
        mp = 64 - mPadLen;
        cp = 64;
    }
    while (mWithPadLen >= 64) {
        core.salsa20(block, inArr, k, exports.SIGMA);
        for (var i = 0; i < 64; i += 1) {
            c[cp + i] = m[mp + i] ^ block[i];
        }
        u = 1;
        for (var i = 8; i < 16; i += 1) {
            u += inArr[i];
            u &= 0xffffffff;
            inArr[i] = u;
            u >>>= 8;
        }
        mWithPadLen -= 64;
        mp += 64;
        cp += 64;
    }
    if (mWithPadLen > 0) {
        core.salsa20(block, inArr, k, exports.SIGMA);
        for (var i = 0; i < mWithPadLen; i += 1) {
            c[cp + i] = m[mp + i] ^ block[i];
        }
    }
    arrFactory.recycle(inArr, block);
}
/**
 * Analog of crypto_stream in crypto_stream/xsalsa20/ref/stream.c
 * @param c is Uint8Array of some length, for outgoing bytes (cipher).
 * @param n is Uint8Array, 24 bytes long nonce.
 * @param k is Uint8Array, 32 bytes long key.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use.
 */
function xsalsa20(c, n, k, arrFactory) {
    var subkey = arrFactory.getUint8Array(32), n_16 = n.subarray(16, 24);
    core.hsalsa20(subkey, n, k, exports.SIGMA);
    stream_salsa20(c, n_16, subkey, arrFactory);
    arrFactory.recycle(subkey);
}
exports.xsalsa20 = xsalsa20;
/**
 * Analog of crypto_stream_xor in crypto_stream/xsalsa20/ref/xor.c
 * @param c is Uint8Array of outgoing bytes with resulting cipher, of the same
 * length as incoming array m.
 * @param m is Uint8Array of incoming bytes, of some plain text message.
 * @param mPadLen is number of zeros that should be in front of message array,
 * always between 0 and 63.
 * @param n is Uint8Array, 24 bytes long nonce.
 * @param k is Uint8Array, 32 bytes long key.
 * @param arrFactory is typed arrays factory, used to allocated/find an array
 * for use. It may be undefined, in which case an internally created one is used.
 */
function xsalsa20_xor(c, m, mPadLen, n, k, arrFactory) {
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var subkey = arrFactory.getUint8Array(32), n_16 = n.subarray(16, 24);
    core.hsalsa20(subkey, n, k, exports.SIGMA);
    stream_salsa20_xor(c, m, mPadLen, n_16, subkey, arrFactory);
    arrFactory.recycle(subkey);
}
exports.xsalsa20_xor = xsalsa20_xor;
Object.freeze(exports);

},{"../util/arrays":17,"./core":2}],7:[function(require,module,exports){
/* Copyright(c) 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var sbox = require('../boxes/secret_box');
var nonceMod = require('../util/nonce');
/**
 * @param x
 * @param i
 * @return unsigned 16-bit integer (2 bytes), stored littleendian way in x,
 * starting at index i.
 */
function loadUintFrom2Bytes(x, i) {
    return (x[i] << 8) | x[i + 1];
}
/**
 * @param x
 * @param i
 * @param u is an unsigned 16-bit integer (2 bytes) to be stored littleendian
 * way in x, starting at index i.
 */
function storeUintIn2Bytes(x, i, u) {
    x[i] = u >>> 8;
    x[i + 1] = u;
}
/**
 * @param x
 * @param i
 * @return unsigned 32-bit integer (4 bytes), stored littleendian way in x,
 * starting at index i.
 */
function loadUintFrom4Bytes(x, i) {
    return (x[i] << 24) | (x[i + 1] << 16) | (x[i + 2] << 8) | x[i + 3];
}
/**
 * @param x
 * @param i
 * @param u is an unsigned 32-bit integer (4 bytes) to be stored littleendian
 * way in x, starting at index i.
 */
function storeUintIn4Bytes(x, i, u) {
    x[i] = u >>> 24;
    x[i + 1] = u >>> 16;
    x[i + 2] = u >>> 8;
    x[i + 3] = u;
}
/**
 * @param x
 * @param i
 * @return unsigned 40-bit integer (5 bytes), stored littleendian way in x,
 * starting at index i.
 */
function loadUintFrom5Bytes(x, i) {
    var int = (x[i + 1] << 24) | (x[i + 2] << 16) | (x[i + 3] << 8) | x[i + 4];
    int += 0x100000000 * x[i];
    return int;
}
/**
 * @param x
 * @param i
 * @param u is an unsigned 40-bit integer (5 bytes) to be stored littleendian
 * way in x, starting at index i.
 */
function storeUintIn5Bytes(x, i, u) {
    x[i] = (u / 0x100000000) | 0;
    x[i + 1] = u >>> 24;
    x[i + 2] = u >>> 16;
    x[i + 3] = u >>> 8;
    x[i + 4] = u;
}
var SegInfoHolder = (function () {
    function SegInfoHolder() {
    }
    /**
     * Use this methods in inheriting classes.
     * @param header is a 65 bytes of a with-nonce pack, containing
     * 1) 1 byte, indicating segment size in 256byte chuncks, and
     * 2) 24 bytes of the first segment's nonce.
     * @param key is this file's key
     * @param arrFactory
     */
    SegInfoHolder.prototype.initForEndlessFile = function (header, key, arrFactory) {
        header = sbox.formatWN.open(header, key, arrFactory);
        this.totalSegsLen = null;
        this.totalContentLen = null;
        this.totalNumOfSegments = null;
        this.segSize = (header[0] << 8);
        this.segChains = [{
            numOfSegs: null,
            lastSegSize: null,
            nonce: new Uint8Array(header.subarray(1, 25))
        }];
        arrFactory.wipe(header);
    };
    /**
     * Use this methods in inheriting classes.
     * @param header is 46+n*30 bytes with-nonce pack, containing
     * 1) 5 bytes with total segments' length,
     * 2) 1 byte, indicating segment size in 256byte chuncks
     * 3) n 30-bytes chunks for each segments chain (n===0 for an empty file):
     * 3.1) 4 bytes with number of segments in this chain,
     * 3.2) 2 bytes with this chain's last segments size,
     * 3.3) 24 bytes with the first nonce in this chain.
     * @param key is this file's key
     * @param arrFactory
     */
    SegInfoHolder.prototype.initForFiniteFile = function (header, key, arrFactory) {
        header = sbox.formatWN.open(header, key, arrFactory);
        this.totalSegsLen = loadUintFrom5Bytes(header, 0);
        this.segSize = (header[5] << 8);
        if (this.segSize === 0) {
            throw new Error("Given header is malformed: default segment size is zero");
        }
        // empty file
        if (this.totalSegsLen === 0) {
            this.segChains = [];
            this.totalContentLen = 0;
            this.totalNumOfSegments = 0;
            return;
        }
        // non-empty file
        this.segChains = new Array((header.length - 6) / 30);
        var segChain;
        this.totalContentLen = 0;
        this.totalNumOfSegments = 0;
        var isHeaderOK = 1; // 1 for OK, and 0 for not-OK
        var offset = 6;
        for (var i = 0; i < this.segChains.length; i += 1) {
            offset += i * 30;
            segChain = {
                numOfSegs: loadUintFrom4Bytes(header, offset),
                lastSegSize: loadUintFrom2Bytes(header, offset + 4),
                nonce: new Uint8Array(header.subarray(offset + 6, offset + 30))
            };
            this.segChains[i] = segChain;
            // collect totals
            this.totalContentLen += segChain.lastSegSize + this.segSize * (segChain.numOfSegs - 1) - 16 * segChain.numOfSegs;
            this.totalNumOfSegments += segChain.numOfSegs;
            // check consistency of segments' length information
            isHeaderOK *= ((segChain.numOfSegs < 1) ? 0 : 1) * ((segChain.lastSegSize < 17) ? 0 : 1) * ((segChain.lastSegSize > this.segSize) ? 0 : 1);
        }
        arrFactory.wipe(header);
        // check consistency of totals
        isHeaderOK *= ((this.totalSegsLen === ((this.totalContentLen + 16 * this.totalNumOfSegments))) ? 1 : 0);
        if (isHeaderOK === 0) {
            throw new Error("Given header is malformed.");
        }
    };
    SegInfoHolder.prototype.isEndlessFile = function () {
        return (this.totalNumOfSegments === null);
    };
    SegInfoHolder.prototype.contentLength = function () {
        return this.totalContentLen;
    };
    SegInfoHolder.prototype.setContentLength = function (totalContentLen) {
        if (!this.isEndlessFile()) {
            throw new Error("Cannot set an end to an already finite file.");
        }
        if ((totalContentLen > 0xffffffffffff) || (totalContentLen < 0)) {
            throw new Error("File length is out of bounds for this implementation.");
        }
        if (totalContentLen === 0) {
            this.totalContentLen = 0;
            this.totalNumOfSegments = 0;
            this.totalSegsLen = 0;
            this.segChains = [];
        }
        else {
            this.totalContentLen = totalContentLen;
            var numOfEvenSegs = Math.floor(this.totalContentLen / (this.segSize - 16));
            this.totalNumOfSegments = numOfEvenSegs;
            if (numOfEvenSegs * (this.segSize - 16) !== this.totalContentLen) {
                this.totalNumOfSegments += 1;
            }
            this.totalSegsLen = this.totalContentLen + 16 * this.totalNumOfSegments;
            var segChain = this.segChains[0];
            segChain.numOfSegs = this.totalNumOfSegments;
            segChain.lastSegSize = this.totalSegsLen - (this.totalNumOfSegments - 1) * this.segSize;
        }
    };
    /**
     * @param pos is byte's position index in file content.
     * @return corresponding location in segment with segment's info.
     */
    SegInfoHolder.prototype.locationInSegments = function (pos) {
        if (pos < 0) {
            throw new Error("Given position is out of bounds.");
        }
        var contentSegSize = this.segSize - 16;
        var segInd;
        if (this.isEndlessFile()) {
            segInd = Math.floor(pos / contentSegSize);
            return {
                seg: {
                    ind: segInd,
                    start: (segInd * this.segSize),
                    len: this.segSize
                },
                pos: (pos - segInd * contentSegSize)
            };
        }
        if (pos >= this.totalContentLen) {
            throw new Error("Given position is out of bounds.");
        }
        segInd = 0;
        var segStart = 0;
        var contentOffset = 0;
        var segChain;
        var chainLen;
        for (var i = 0; i < this.segChains.length; i += 1) {
            segChain = this.segChains[i];
            chainLen = segChain.lastSegSize + (segChain.numOfSegs - 1) * this.segSize;
            contentOffset += chainLen - 16 * segChain.numOfSegs;
            if (contentOffset <= pos) {
                segInd += segChain.numOfSegs;
                segStart += chainLen;
                continue;
            }
            // @ this point contentOffset > pos
            contentOffset -= segChain.lastSegSize - 16;
            if (contentOffset <= pos) {
                return {
                    pos: (pos - contentOffset),
                    seg: {
                        ind: (segInd + segChain.numOfSegs - 1),
                        start: (chainLen - segChain.lastSegSize),
                        len: segChain.lastSegSize
                    }
                };
            }
            contentOffset -= (segChain.numOfSegs - 1) * (this.segSize - 16);
            var dSegInd = Math.floor((pos - contentOffset) / contentSegSize);
            contentOffset += dSegInd * (this.segSize - 16);
            return {
                pos: (pos - contentOffset),
                seg: {
                    ind: (segInd + dSegInd),
                    start: (segStart + dSegInd * this.segSize),
                    len: this.segSize
                }
            };
        }
        throw new Error("If we get here, there is an error in the loop above.");
    };
    SegInfoHolder.prototype.packInfoToBytes = function () {
        var head;
        if (this.isEndlessFile()) {
            head = new Uint8Array(24 + 1);
            // 1) pack segment common size in 256 chunks
            head[0] = this.segSize >>> 8;
            // 2) 24 bytes with the first segment's nonce
            head.set(this.segChains[0].nonce, 1);
        }
        else {
            head = new Uint8Array(6 + 30 * this.segChains.length);
            // 1) pack total segments length
            storeUintIn5Bytes(head, 0, this.totalSegsLen);
            // 2) pack segment common size in 256 chunks
            head[5] = this.segSize >>> 8;
            // 3) pack info about chained segments
            var segChain;
            var offset = 6;
            for (var i = 0; i < this.segChains.length; i += 1) {
                segChain = this.segChains[i];
                offset += i * 30;
                // 3.1) 4 bytes with number of segments in this chain
                storeUintIn4Bytes(head, offset, segChain.numOfSegs);
                // 3.2) 2 bytes with this chain's last segments size
                storeUintIn2Bytes(head, offset + 4, segChain.lastSegSize);
                // 3.3) 24 bytes with the first nonce in this chain
                head.set(segChain.nonce, offset + 6);
            }
        }
        return head;
    };
    /**
     * @param segInd
     * @return segment's nonce, recyclable after its use.
     */
    SegInfoHolder.prototype.getSegmentNonce = function (segInd, arrFactory) {
        if (this.isEndlessFile()) {
            if (segInd > 0xffffffff) {
                throw new Error("Given segment index is out of bounds.");
            }
            return nonceMod.calculateNonce(this.segChains[0].nonce, segInd, arrFactory);
        }
        if ((segInd >= this.totalNumOfSegments) || (segInd < 0)) {
            throw new Error("Given segment index is out of bounds.");
        }
        var segChain;
        var lastSegInd = 0;
        for (var i = 0; i < this.segChains.length; i += 1) {
            segChain = this.segChains[i];
            if ((lastSegInd + segChain.numOfSegs) <= segInd) {
                lastSegInd += segChain.numOfSegs;
                continue;
            }
            else {
                return nonceMod.calculateNonce(segChain.nonce, (segInd - lastSegInd), arrFactory);
            }
        }
        throw new Error("If we get here, there is an error in the loop above.");
    };
    SegInfoHolder.prototype.numberOfSegments = function () {
        return this.totalNumOfSegments;
    };
    SegInfoHolder.prototype.segmentSize = function (segInd) {
        if (this.isEndlessFile()) {
            if (segInd > 0xffffffff) {
                throw new Error("Given segment index is out of bounds.");
            }
            return this.segSize;
        }
        if ((segInd >= this.totalNumOfSegments) || (segInd < 0)) {
            throw new Error("Given segment index is out of bounds.");
        }
        var segChain;
        var lastSegInd = 0;
        for (var i = 0; i < this.segChains.length; i += 1) {
            segChain = this.segChains[i];
            if ((lastSegInd + segChain.numOfSegs) <= segInd) {
                lastSegInd += segChain.numOfSegs;
                continue;
            }
            return (((lastSegInd + segChain.numOfSegs - 1) === segInd) ? segChain.lastSegSize : this.segSize);
        }
        throw new Error("If we get here, there is an error in the loop above.");
    };
    SegInfoHolder.prototype.segmentsLength = function () {
        return this.totalSegsLen;
    };
    return SegInfoHolder;
})();
var SegReader = (function (_super) {
    __extends(SegReader, _super);
    function SegReader(key, header, arrFactory) {
        _super.call(this);
        this.arrFactory = arrFactory;
        if (key.length !== sbox.KEY_LENGTH) {
            throw new Error("Given key has wrong size.");
        }
        this.key = new Uint8Array(key);
        header = header.subarray(72);
        if (header.length === 65) {
            this.initForEndlessFile(header, this.key, this.arrFactory);
        }
        else {
            if ((((header.length - 46) % 30) !== 0) || (header.length < 46)) {
                throw new Error("Given header array has incorrect size.");
            }
            this.initForFiniteFile(header, this.key, this.arrFactory);
        }
        Object.seal(this);
    }
    SegReader.prototype.openSeg = function (seg, segInd) {
        var isLastSeg = ((segInd + 1) === this.totalNumOfSegments);
        var nonce = this.getSegmentNonce(segInd, this.arrFactory);
        var segLen = this.segmentSize(segInd);
        if (seg.length < segLen) {
            if (!this.isEndlessFile()) {
                throw new Error("Given byte array is smaller than segment's size.");
            }
        }
        else if (seg.length > segLen) {
            seg = seg.subarray(0, segLen);
        }
        var bytes = sbox.open(seg, nonce, this.key, this.arrFactory);
        this.arrFactory.recycle(nonce);
        this.arrFactory.wipeRecycled();
        return { data: bytes, segLen: segLen, last: isLastSeg };
    };
    SegReader.prototype.destroy = function () {
        this.arrFactory.wipe(this.key);
        this.key = null;
        for (var i = 0; i < this.segChains.length; i += 1) {
            this.arrFactory.wipe(this.segChains[i].nonce);
        }
        this.segChains = null;
        this.arrFactory = null;
    };
    SegReader.prototype.wrap = function () {
        var wrap = {
            locationInSegments: this.locationInSegments.bind(this),
            openSeg: this.openSeg.bind(this),
            destroy: this.destroy.bind(this),
            isEndlessFile: this.isEndlessFile.bind(this),
            contentLength: this.contentLength.bind(this),
            segmentSize: this.segmentSize.bind(this),
            segmentsLength: this.segmentsLength.bind(this),
            numberOfSegments: this.numberOfSegments.bind(this)
        };
        Object.freeze(wrap);
        return wrap;
    };
    return SegReader;
})(SegInfoHolder);
exports.SegReader = SegReader;
var SegWriter = (function (_super) {
    __extends(SegWriter, _super);
    /**
     * @param key
     * @param packedKey
     * @param header a file's header without (!) packed key's 72 bytes.
     * Array must contain only header's bytes, as its length is used to decide
     * how to process it. It should be null for a new writer, and not-null,
     * when writer is based an existing file's structure.
     * @param segSizein256bs should be present for a new writer,
     * otherwise, be null.
     * @param randomBytes
     * @param arrFactory
     */
    function SegWriter(key, packedKey, header, segSizein256bs, randomBytes, arrFactory) {
        _super.call(this);
        this.arrFactory = arrFactory;
        this.randomBytes = randomBytes;
        if (key.length !== sbox.KEY_LENGTH) {
            throw new Error("Given key has wrong size.");
        }
        this.key = new Uint8Array(key);
        if (packedKey.length !== 72) {
            throw new Error("Given file key pack has wrong size.");
        }
        this.packedKey = packedKey;
        if (header) {
            if (header.length === 65) {
                this.initForEndlessFile(header, this.key, this.arrFactory);
            }
            else {
                if ((((header.length - 46) % 30) !== 0) || (header.length < 46)) {
                    throw new Error("Given header array has incorrect size.");
                }
                this.initForFiniteFile(header, this.key, this.arrFactory);
            }
            this.headerModified = false;
        }
        else if ('number' === typeof segSizein256bs) {
            if ((segSizein256bs < 1) || (segSizein256bs > 255)) {
                throw new Error("Given segment size is illegal.");
            }
            this.initOfNewWriter(segSizein256bs << 8);
            this.headerModified = true;
        }
        else {
            throw new Error("Arguments are illegal, both header bytes and " + "segment size are missing");
        }
        Object.seal(this);
    }
    SegWriter.prototype.initOfNewWriter = function (segSize) {
        this.segSize = segSize;
        this.totalContentLen = null;
        this.totalNumOfSegments = null;
        this.totalSegsLen = null;
        this.segChains = [{
            numOfSegs: null,
            lastSegSize: null,
            nonce: this.randomBytes(24)
        }];
    };
    SegWriter.prototype.packSeg = function (content, segInd) {
        var nonce = this.getSegmentNonce(segInd, this.arrFactory);
        var expectedContentSize = this.segmentSize(segInd) - 16;
        if (content.length < expectedContentSize) {
            if (!this.isEndlessFile()) {
                throw new Error("Given content has length " + content.length + ", while content length of segment " + segInd + " should be " + expectedContentSize);
            }
        }
        else if (content.length > expectedContentSize) {
            content = content.subarray(0, expectedContentSize);
        }
        var seg = sbox.pack(content, nonce, this.key, this.arrFactory);
        this.arrFactory.recycle(nonce);
        this.arrFactory.wipeRecycled();
        return { seg: seg, dataLen: content.length };
    };
    SegWriter.prototype.destroy = function () {
        this.arrFactory.wipe(this.key);
        this.key = null;
        for (var i = 0; i < this.segChains.length; i += 1) {
            this.arrFactory.wipe(this.segChains[i].nonce);
        }
        this.segChains = null;
        this.arrFactory = null;
    };
    SegWriter.prototype.reset = function () {
        this.initOfNewWriter(this.segSize);
        this.headerModified = true;
    };
    SegWriter.prototype.packHeader = function () {
        // pack head
        var head = this.packInfoToBytes();
        // encrypt head with a file key
        head = sbox.formatWN.pack(head, this.randomBytes(24), this.key, this.arrFactory);
        // assemble and return complete header byte array
        var completeHeader = new Uint8Array(this.packedKey.length + head.length);
        completeHeader.set(this.packedKey, 0);
        completeHeader.set(head, 72);
        this.headerModified = false;
        return completeHeader;
    };
    SegWriter.prototype.setContentLength = function (totalSegsLen) {
        _super.prototype.setContentLength.call(this, totalSegsLen);
        this.headerModified = true;
    };
    SegWriter.prototype.isHeaderModified = function () {
        return this.headerModified;
    };
    SegWriter.prototype.splice = function (pos, rem, ins) {
        if (this.isEndlessFile()) {
            throw new Error("Cannot splice endless file");
        }
        if (((rem < 1) && (ins < 1)) || (rem < 0) || (ins < 0)) {
            throw new Error("Invalid modification parameters.");
        }
        if ((this.totalSegsLen - rem + ins) > 0xffffffffffff) {
            throw new Error("Given modification will make file too long.");
        }
        var startLoc = this.locationInSegments(pos);
        throw new Error("Code is incomplete");
        // - calculate locations of edge bytes.
        var remEnd;
        if (rem > 0) {
        }
        // return object with info for getting bytes, and a lambda() to effect
        // the change, which should be called after reading edge bytes.
        return {};
    };
    SegWriter.prototype.wrap = function () {
        var wrap = {
            locationInSegments: this.locationInSegments.bind(this),
            packSeg: this.packSeg.bind(this),
            packHeader: this.packHeader.bind(this),
            setContentLength: this.setContentLength.bind(this),
            splice: this.splice.bind(this),
            isHeaderModified: this.isHeaderModified.bind(this),
            destroy: this.destroy.bind(this),
            reset: this.reset.bind(this),
            isEndlessFile: this.isEndlessFile.bind(this),
            contentLength: this.contentLength.bind(this),
            segmentSize: this.segmentSize.bind(this),
            segmentsLength: this.segmentsLength.bind(this),
            numberOfSegments: this.numberOfSegments.bind(this)
        };
        Object.freeze(wrap);
        return wrap;
    };
    return SegWriter;
})(SegInfoHolder);
exports.SegWriter = SegWriter;
Object.freeze(exports);

},{"../boxes/secret_box":5,"../util/nonce":18}],8:[function(require,module,exports){
/* Copyright(c) 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
var arrays = require('../util/arrays');
var sbox = require('../boxes/secret_box');
var segments = require('./xsp-segments');
function asciiToUint8Array(str) {
    var arr = new Uint8Array(str.length);
    for (var i = 0; i < str.length; i += 1) {
        arr[i] = str.charCodeAt(i);
    }
    return arr;
}
/**
 * This is a starting sequence of xsp file, which contains both
 * encrypted segments and a header.
 */
exports.FILE_START = asciiToUint8Array('xsp');
/**
 * This is an offset to segments in xsp file with both segments and header.
 */
exports.SEGMENTS_OFFSET = exports.FILE_START.length + 8;
/**
 * This is a starting sequence of a file with a header only.
 */
exports.HEADER_FILE_START = asciiToUint8Array('hxsp');
/**
 * This is a starting sequence of a file with encrypted segments nly.
 */
exports.SEGMENTS_FILE_START = asciiToUint8Array('sxsp');
/**
 * @param x
 * @param i
 * @param u is an unsigned integer (up to 48-bit) to be stored littleendian
 * way in x, starting at index i.
 */
function storeUintIn8Bytes(x, i, u) {
    x[i] = 0;
    x[i + 1] = 0;
    var h = (u / 0x100000000) | 0;
    x[i + 2] = h >>> 8;
    x[i + 3] = h;
    x[i + 4] = u >>> 24;
    x[i + 5] = u >>> 16;
    x[i + 6] = u >>> 8;
    x[i + 7] = u;
}
/**
 * @param x
 * @param i
 * @return unsigned integer (up to 48 bits), stored littleendian way
 * in 8 bytes of x, starting at index i.
 */
function loadUintFrom8Bytes(x, i) {
    if ((x[i] !== 0) || (x[i + 1] !== 0)) {
        throw new Error("This implementation does not allow numbers greater than 2^48.");
    }
    var h = (x[i + 2] << 8) | x[i + 3];
    var l = (x[i + 4] << 24) | (x[i + 5] << 16) | (x[i + 6] << 8) | x[i + 7];
    return (h * 0x100000000) + l;
}
/**
 * @param segsLen is a total length of encrypted segments.
 * @return XSP file starting bytes, which are
 * (1) 3 bytes "xsp", (2) 8 bytes with an offset, at which header starts.
 */
function generateXSPFileStart(segsLen) {
    if (segsLen > 0xffffffffffff) {
        new Error("This implementation " + "cannot handle byte arrays longer than 2^48 (256 TB).");
    }
    var fileStartLen = exports.FILE_START.length;
    var arr = new Uint8Array(fileStartLen + 8);
    arr.set(exports.FILE_START);
    storeUintIn8Bytes(arr, fileStartLen, segsLen + arr.length);
    return arr;
}
exports.generateXSPFileStart = generateXSPFileStart;
function getXSPHeaderOffset(xspBytes) {
    var fileStartLen = exports.FILE_START.length;
    if (xspBytes.length < (fileStartLen + 8)) {
        throw new Error("Given byte array is too short.");
    }
    for (var i = 0; i < fileStartLen; i += 1) {
        if (xspBytes[i] !== exports.FILE_START[i]) {
            throw new Error("Incorrect start of xsp file.");
        }
    }
    return loadUintFrom8Bytes(xspBytes, fileStartLen);
}
exports.getXSPHeaderOffset = getXSPHeaderOffset;
var KEY_PACK_LENGTH = 72;
var KeyHolder = (function () {
    function KeyHolder(key, keyPack, arrFactory) {
        this.key = key;
        this.keyPack = keyPack;
        this.arrFactory = (arrFactory ? arrFactory : arrays.makeFactory());
    }
    KeyHolder.prototype.newSegWriter = function (segSizein256bs, randomBytes) {
        var writer = new segments.SegWriter(this.key, this.keyPack, null, segSizein256bs, randomBytes, this.arrFactory);
        return writer.wrap();
    };
    KeyHolder.prototype.segWriter = function (header, randomBytes) {
        var writer = new segments.SegWriter(this.key, new Uint8Array(header.subarray(0, KEY_PACK_LENGTH)), header.subarray(KEY_PACK_LENGTH), null, randomBytes, this.arrFactory);
        return writer.wrap();
    };
    KeyHolder.prototype.segReader = function (header) {
        var reader = new segments.SegReader(this.key, header, this.arrFactory);
        return reader.wrap();
    };
    KeyHolder.prototype.destroy = function () {
        if (this.key) {
            arrays.wipe(this.key);
            this.key = null;
        }
        this.keyPack = null;
        if (this.arrFactory) {
            this.arrFactory.wipeRecycled();
            this.arrFactory = null;
        }
    };
    KeyHolder.prototype.wrap = function () {
        var wrap = {
            destroy: this.destroy.bind(this),
            newSegWriter: this.newSegWriter.bind(this),
            segWriter: this.segWriter.bind(this),
            segReader: this.segReader.bind(this),
            clone: this.clone.bind(this)
        };
        Object.freeze(wrap);
        return wrap;
    };
    KeyHolder.prototype.clone = function (arrFactory) {
        var kh = new KeyHolder(this.key, this.keyPack, arrFactory);
        return kh.wrap();
    };
    return KeyHolder;
})();
/**
 * @param mkeyEncr master key encryptor, which is used to make file key pack.
 * @param randomBytes is a function that produces cryptographically strong
 * random numbers (bytes).
 * @param arrFactory (optional) array factory
 * @return file key holder with a newly generated key.
 */
function makeNewFileKeyHolder(mkeyEncr, randomBytes, arrFactory) {
    var fileKey = randomBytes(sbox.KEY_LENGTH);
    var fileKeyPack = mkeyEncr.pack(fileKey);
    var kh = new KeyHolder(fileKey, fileKeyPack, arrFactory);
    return kh.wrap();
}
exports.makeNewFileKeyHolder = makeNewFileKeyHolder;
/**
 * @param mkeyDecr master key decryptor, which is used to open file key.
 * @param header is an array with file's header. Array can be smaller than whole
 * header, but it must contain initial file key pack.
 * @param arrFactory (optional) array factory
 * @return file key holder with a key, extracted from a given header.
 */
function makeFileKeyHolder(mkeyDecr, header, arrFactory) {
    var fileKeyPack = new Uint8Array(header.subarray(0, KEY_PACK_LENGTH));
    var fileKey = mkeyDecr.open(fileKeyPack);
    var kh = new KeyHolder(fileKey, fileKeyPack, arrFactory);
    return kh.wrap();
}
exports.makeFileKeyHolder = makeFileKeyHolder;
Object.freeze(exports);

},{"../boxes/secret_box":5,"../util/arrays":17,"./xsp-segments":7}],9:[function(require,module,exports){
/* Copyright(c) 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
/*
 * This contains implementation of SHA512.
 * Implementation note 1:
 * All C macros shuffle variables with digits in their names.
 * This gives a possibilty to have functions that except indecies,
 * which are shuffled/set at call point.
 * In everything else we try to keep as close to original code as
 * possible.
 * Implementation note 2:
 * Since there are no unsigned 64-bit integers in JavaScript, we
 * use 32-bit integers.
 * Notice that in array we keep high int first, with lower int following.
 */
var arrays = require('../util/arrays');
/**
 * This adds 64 bit integer from x into s.
 */
function addInto(s, si, x, xi) {
    var h = s[si] + x[xi];
    var l = s[si + 1] + x[xi + 1];
    s[si] = h + ((l / 0x100000000) | 0);
    s[si + 1] = l;
}
function shr(t, x, xi, c) {
    var h = x[xi];
    var l = x[xi + 1];
    t[0] = h >>> c;
    t[1] = (h << (32 - c)) | (l >>> c);
}
/**
 * Analog of load_bigendian in crypto_hashblocks/sha512/inplace/blocks.c
 */
function load_bigendian(s, si, x, i) {
    s[si] = (x[i + 3] | x[i + 2] << 8) | (x[i + 1] << 16) | (x[i] << 24);
    s[si + 1] = (x[i + 7] | x[i + 6] << 8) | (x[i + 5] << 16) | (x[i + 4] << 24);
}
/**
 * Analog of store_bigendian in crypto_hashblocks/sha512/inplace/blocks.c
 */
function store_bigendian(x, i, u, ui) {
    var h = u[ui];
    var l = u[ui + 1];
    x[i + 7] = l;
    x[i + 6] = l >>> 8;
    x[i + 5] = l >>> 16;
    x[i + 4] = l >>> 24;
    x[i + 3] = h;
    x[i + 2] = h >>> 8;
    x[i + 1] = h >>> 16;
    x[i] = h >>> 24;
}
/**
 * Analog of macro ROTR in crypto_hashblocks/sha512/inplace/blocks.c
 */
function ROTRandXorInto(t, x, xi, c) {
    var h = x[xi];
    var l = x[xi + 1];
    if (c <= 32) {
        t[0] ^= (l << (32 - c)) | (h >>> c);
        t[1] ^= (h << (32 - c)) | (l >>> c);
    }
    else {
        t[0] ^= (h << (64 - c)) | (l >>> (c - 32));
        t[1] ^= (l << (64 - c)) | (h >>> (c - 32));
    }
}
/**
 * Analog of macro Ch in crypto_hashblocks/sha512/inplace/blocks.c
 */
function Ch(t, r, xi, yi, zi) {
    var xh = r[xi];
    var xl = r[xi + 1];
    t[0] = (xh & r[yi]) ^ (~xh & r[zi]);
    t[1] = (xl & r[yi + 1]) ^ (~xl & r[zi + 1]);
}
/**
 * Analog of macro Maj in crypto_hashblocks/sha512/inplace/blocks.c
 */
function Maj(t, r, xi, yi, zi) {
    var xh = r[xi];
    var xl = r[xi + 1];
    var yh = r[yi];
    var yl = r[yi + 1];
    var zh = r[zi];
    var zl = r[zi + 1];
    t[0] = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    t[1] = (xl & yl) ^ (xl & zl) ^ (yl & zl);
}
/**
 * Analog of macro Sigma0 in crypto_hashblocks/sha512/inplace/blocks.c
 */
function Sigma0(t, x, xi) {
    t[0] = 0;
    t[1] = 0;
    ROTRandXorInto(t, x, xi, 28);
    ROTRandXorInto(t, x, xi, 34);
    ROTRandXorInto(t, x, xi, 39);
}
/**
 * Analog of macro Sigma1 in crypto_hashblocks/sha512/inplace/blocks.c
 */
function Sigma1(t, x, xi) {
    t[0] = 0;
    t[1] = 0;
    ROTRandXorInto(t, x, xi, 14);
    ROTRandXorInto(t, x, xi, 18);
    ROTRandXorInto(t, x, xi, 41);
}
/**
 * Analog of macro sigma0 in crypto_hashblocks/sha512/inplace/blocks.c
 */
function sigma0(t, x, xi) {
    shr(t, x, xi, 7);
    ROTRandXorInto(t, x, xi, 1);
    ROTRandXorInto(t, x, xi, 8);
}
/**
 * Analog of macro sigma1 in crypto_hashblocks/sha512/inplace/blocks.c
 */
function sigma1(t, x, xi) {
    shr(t, x, xi, 6);
    ROTRandXorInto(t, x, xi, 19);
    ROTRandXorInto(t, x, xi, 61);
}
/**
 * Analog of macro M in crypto_hashblocks/sha512/inplace/blocks.c
 */
function M(w, i0, i14, i9, i1, t) {
    sigma1(t, w, i14);
    addInto(w, i0, t, 0);
    addInto(w, i0, w, i9);
    sigma0(t, w, i1);
    addInto(w, i0, t, 0);
}
/**
 * Analog of macro EXPAND in crypto_hashblocks/sha512/inplace/blocks.c
 */
function EXPAND(w, t) {
    M(w, 0, 28, 18, 2, t);
    M(w, 2, 30, 20, 4, t);
    M(w, 4, 0, 22, 6, t);
    M(w, 6, 2, 24, 8, t);
    M(w, 8, 4, 26, 10, t);
    M(w, 10, 6, 28, 12, t);
    M(w, 12, 8, 30, 14, t);
    M(w, 14, 10, 0, 16, t);
    M(w, 16, 12, 2, 18, t);
    M(w, 18, 14, 4, 20, t);
    M(w, 20, 16, 6, 22, t);
    M(w, 22, 18, 8, 24, t);
    M(w, 24, 20, 10, 26, t);
    M(w, 26, 22, 12, 28, t);
    M(w, 28, 24, 14, 30, t);
    M(w, 30, 26, 16, 0, t);
}
/**
 * Analog of macro F in crypto_hashblocks/sha512/inplace/blocks.c
 */
function F(r, i0, i1, i2, i3, i4, i5, i6, i7, w, wi, k, ki, t) {
    Sigma1(t, r, i4);
    addInto(r, i7, t, 0);
    Ch(t, r, i4, i5, i6);
    addInto(r, i7, t, 0);
    addInto(r, i7, k, ki);
    addInto(r, i7, w, wi);
    addInto(r, i3, r, i7);
    Sigma0(t, r, i0);
    addInto(r, i7, t, 0);
    Maj(t, r, i0, i1, i2);
    addInto(r, i7, t, 0);
}
/**
 * Analog of round in crypto_hashblocks/sha512/inplace/blocks.c
 */
var round = new Uint32Array([
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
]);
/**
 * Analog of macro G in crypto_hashblocks/sha512/inplace/blocks.c
 */
function G(r, w, i, t) {
    F(r, 0, 2, 4, 6, 8, 10, 12, 14, w, 0, round, (i) * 2, t);
    F(r, 14, 0, 2, 4, 6, 8, 10, 12, w, 2, round, (i + 1) * 2, t);
    F(r, 12, 14, 0, 2, 4, 6, 8, 10, w, 4, round, (i + 2) * 2, t);
    F(r, 10, 12, 14, 0, 2, 4, 6, 8, w, 6, round, (i + 3) * 2, t);
    F(r, 8, 10, 12, 14, 0, 2, 4, 6, w, 8, round, (i + 4) * 2, t);
    F(r, 6, 8, 10, 12, 14, 0, 2, 4, w, 10, round, (i + 5) * 2, t);
    F(r, 4, 6, 8, 10, 12, 14, 0, 2, w, 12, round, (i + 6) * 2, t);
    F(r, 2, 4, 6, 8, 10, 12, 14, 0, w, 14, round, (i + 7) * 2, t);
    F(r, 0, 2, 4, 6, 8, 10, 12, 14, w, 16, round, (i + 8) * 2, t);
    F(r, 14, 0, 2, 4, 6, 8, 10, 12, w, 18, round, (i + 9) * 2, t);
    F(r, 12, 14, 0, 2, 4, 6, 8, 10, w, 20, round, (i + 10) * 2, t);
    F(r, 10, 12, 14, 0, 2, 4, 6, 8, w, 22, round, (i + 11) * 2, t);
    F(r, 8, 10, 12, 14, 0, 2, 4, 6, w, 24, round, (i + 12) * 2, t);
    F(r, 6, 8, 10, 12, 14, 0, 2, 4, w, 26, round, (i + 13) * 2, t);
    F(r, 4, 6, 8, 10, 12, 14, 0, 2, w, 28, round, (i + 14) * 2, t);
    F(r, 2, 4, 6, 8, 10, 12, 14, 0, w, 30, round, (i + 15) * 2, t);
}
/**
 * Analog of crypto_hashblocks in crypto_hashblocks/sha512/inplace/blocks.c
 */
function crypto_hashblocks(statebytes, inArr, arrFactory) {
    var state = arrFactory.getUint32Array(16);
    var r = arrFactory.getUint32Array(16);
    var w = arrFactory.getUint32Array(32);
    var t = arrFactory.getUint32Array(2);
    var inlen = inArr.length;
    var inInd = 0;
    for (var i = 0; i < 8; i += 1) {
        load_bigendian(r, i * 2, statebytes, i * 8);
    }
    state.set(r);
    while (inlen >= 128) {
        for (var i = 0; i < 16; i += 1) {
            load_bigendian(w, i * 2, inArr, inInd + i * 8);
        }
        G(r, w, 0, t);
        EXPAND(w, t);
        G(r, w, 16, t);
        EXPAND(w, t);
        G(r, w, 32, t);
        EXPAND(w, t);
        G(r, w, 48, t);
        EXPAND(w, t);
        G(r, w, 64, t);
        for (var i = 0; i < 8; i += 1) {
            addInto(r, i * 2, state, i * 2);
        }
        state.set(r);
        inInd += 128;
        inlen -= 128;
    }
    for (var i = 0; i < 8; i += 1) {
        store_bigendian(statebytes, i * 8, state, i * 2);
    }
    arrFactory.recycle(r, w, t);
    return inlen;
}
/**
 * Analog of iv in crypto_hash/sha512/ref/hash.c
 * Length === 64.
 */
var iv = new Uint8Array([0x6a, 0x09, 0xe6, 0x67, 0xf3, 0xbc, 0xc9, 0x08, 0xbb, 0x67, 0xae, 0x85, 0x84, 0xca, 0xa7, 0x3b, 0x3c, 0x6e, 0xf3, 0x72, 0xfe, 0x94, 0xf8, 0x2b, 0xa5, 0x4f, 0xf5, 0x3a, 0x5f, 0x1d, 0x36, 0xf1, 0x51, 0x0e, 0x52, 0x7f, 0xad, 0xe6, 0x82, 0xd1, 0x9b, 0x05, 0x68, 0x8c, 0x2b, 0x3e, 0x6c, 0x1f, 0x1f, 0x83, 0xd9, 0xab, 0xfb, 0x41, 0xbd, 0x6b, 0x5b, 0xe0, 0xcd, 0x19, 0x13, 0x7e, 0x21, 0x79]);
function hash_padded_block(h, oddBytes, totalLen, arrFactory) {
    var padded = arrFactory.getUint8Array(256);
    var oddLen = oddBytes.length;
    var bytes = arrFactory.getUint32Array(2);
    bytes[0] = (totalLen / 0x20000000) | 0;
    bytes[1] = totalLen << 3;
    for (var i = 0; i < oddLen; i += 1) {
        padded[i] = oddBytes[i];
    }
    padded[oddLen] = 0x80;
    if (oddLen < 112) {
        for (var i = oddLen + 1; i < 120; i += 1) {
            padded[i] = 0;
        }
        store_bigendian(padded, 120, bytes, 0);
        crypto_hashblocks(h, padded.subarray(0, 128), arrFactory);
    }
    else {
        for (var i = oddLen + 1; i < 248; i += 1) {
            padded[i] = 0;
        }
        store_bigendian(padded, 248, bytes, 0);
        crypto_hashblocks(h, padded, arrFactory);
    }
    arrFactory.recycle(padded, bytes);
}
/**
 * Analog of crypto_hash in crypto_hash/sha512/ref/hash.c
 * with ending part of make hash of padded arranged into its
 * own function.
 */
function hash(inArr, arrFactory) {
    if (inArr.length > 0xffffffffffff) {
        new Error("This implementation " + "cannot handle byte arrays longer than 2^48 (256 TB).");
    }
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var h = arrFactory.getUint8Array(64);
    var totalLen = inArr.length;
    h.set(iv);
    var oddLen = crypto_hashblocks(h, inArr, arrFactory);
    inArr = inArr.subarray(totalLen - oddLen);
    hash_padded_block(h, inArr, totalLen, arrFactory);
    arrFactory.wipeRecycled();
    return h;
}
exports.hash = hash;
function makeHasher(isSingleUse, arrFactory) {
    if (isSingleUse === void 0) { isSingleUse = true; }
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var cache = arrFactory.getUint8Array(128);
    var cachedBytes = 0;
    var totalLen = 0;
    var h = null;
    return {
        update: function (m) {
            if (!cache) {
                throw new Error("Cannot use destroyed hasher.");
            }
            if (m.length === 0) {
                return;
            }
            totalLen += m.length;
            if (!h) {
                h = arrFactory.getUint8Array(64);
                h.set(iv);
            }
            if (cachedBytes > 0) {
                var delta = Math.min(m.length, 128 - cachedBytes);
                for (var i = 0; i < delta; i += 1) {
                    cache[cachedBytes + i] = m[i];
                }
                if ((cachedBytes + delta) < 128) {
                    cachedBytes += delta;
                    return;
                }
                else {
                    crypto_hashblocks(h, cache, arrFactory);
                    cachedBytes = 0;
                    m = m.subarray(delta);
                    if (m.length === 0) {
                        arrFactory.wipe(cache);
                        return;
                    }
                }
            }
            cachedBytes = crypto_hashblocks(h, m, arrFactory);
            m = m.subarray(m.length - cachedBytes);
            for (var i = 0; i < cachedBytes; i += 1) {
                cache[i] = m[i];
            }
            for (var i = cachedBytes; i < cache.length; i += 1) {
                cache[i] = 0;
            }
        },
        digest: function () {
            if (!cache) {
                throw new Error("Cannot use destroyed hasher.");
            }
            if (!h) {
                throw new Error("No bytes were hashed so far.");
            }
            hash_padded_block(h, cache.subarray(0, cachedBytes), totalLen, arrFactory);
            var hashResult = h;
            h = null;
            arrFactory.wipe(cache);
            totalLen = 0;
            cachedBytes = 0;
            arrFactory.wipeRecycled();
            if (isSingleUse) {
                this.destroy();
            }
            return hashResult;
        },
        destroy: function () {
            if (!cache) {
                return;
            }
            arrFactory.recycle(cache);
            if (!h) {
                arrFactory.recycle(h);
                h = null;
            }
            arrFactory.wipeRecycled();
            cache = null;
            arrFactory = null;
        }
    };
}
exports.makeHasher = makeHasher;
Object.freeze(exports);

},{"../util/arrays":17}],10:[function(require,module,exports){
/* Copyright(c) 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
/**
 * This is a TypeScrypt rewrite of scrypt-1.1.6.
 * In particular this file contains scrypt algorithm's main part.
 */
var arrays = require('../util/arrays');
var sha256 = require('./sha256');
/**
 * Analog of blkcpy in lib/crypto/crypto_scrypt-ref.c
 */
function blkcpy(dest, di, src, si, len) {
    for (var i = 0; i < len; i += 1) {
        dest[di + i] = src[si + i];
    }
}
/**
 * Analog of blkxor in lib/crypto/crypto_scrypt-ref.c
 */
function blkxor(dest, di, src, si, len) {
    for (var i = 0; i < len; i += 1) {
        dest[di + i] ^= src[si + i];
    }
}
/**
 * Analog of salsa20_8 in lib/crypto/crypto_scrypt-ref.c
 * salsa20_8(B):
 * Apply the salsa20/8 core to the provided block.
 */
function salsa20_8(B) {
    // inlined load_littleendian()'s
    var x0 = B[0] | (B[1] << 8) | (B[2] << 16) | (B[3] << 24);
    var j0 = x0;
    var x1 = B[4] | (B[5] << 8) | (B[6] << 16) | (B[7] << 24);
    var j1 = x1;
    var x2 = B[8] | (B[9] << 8) | (B[10] << 16) | (B[11] << 24);
    var j2 = x2;
    var x3 = B[12] | (B[13] << 8) | (B[14] << 16) | (B[15] << 24);
    var j3 = x3;
    var x4 = B[16] | (B[17] << 8) | (B[18] << 16) | (B[19] << 24);
    var j4 = x4;
    var x5 = B[20] | (B[21] << 8) | (B[22] << 16) | (B[23] << 24);
    var j5 = x5;
    var x6 = B[24] | (B[25] << 8) | (B[26] << 16) | (B[27] << 24);
    var j6 = x6;
    var x7 = B[28] | (B[29] << 8) | (B[30] << 16) | (B[31] << 24);
    var j7 = x7;
    var x8 = B[32] | (B[33] << 8) | (B[34] << 16) | (B[35] << 24);
    var j8 = x8;
    var x9 = B[36] | (B[37] << 8) | (B[38] << 16) | (B[39] << 24);
    var j9 = x9;
    var x10 = B[40] | (B[41] << 8) | (B[42] << 16) | (B[43] << 24);
    var j10 = x10;
    var x11 = B[44] | (B[45] << 8) | (B[46] << 16) | (B[47] << 24);
    var j11 = x11;
    var x12 = B[48] | (B[49] << 8) | (B[50] << 16) | (B[51] << 24);
    var j12 = x12;
    var x13 = B[52] | (B[53] << 8) | (B[54] << 16) | (B[55] << 24);
    var j13 = x13;
    var x14 = B[56] | (B[57] << 8) | (B[58] << 16) | (B[59] << 24);
    var j14 = x14;
    var x15 = B[60] | (B[61] << 8) | (B[62] << 16) | (B[63] << 24);
    var j15 = x15;
    var t = 0;
    for (var i = 0; i < 8; i += 2) {
        // inlined rotate()'s
        t = (x0 + x12);
        x4 ^= (t << 7) | (t >>> 25);
        t = (x4 + x0);
        x8 ^= (t << 9) | (t >>> 23);
        t = (x8 + x4);
        x12 ^= (t << 13) | (t >>> 19);
        t = (x12 + x8);
        x0 ^= (t << 18) | (t >>> 14);
        t = (x5 + x1);
        x9 ^= (t << 7) | (t >>> 25);
        t = (x9 + x5);
        x13 ^= (t << 9) | (t >>> 23);
        t = (x13 + x9);
        x1 ^= (t << 13) | (t >>> 19);
        t = (x1 + x13);
        x5 ^= (t << 18) | (t >>> 14);
        t = (x10 + x6);
        x14 ^= (t << 7) | (t >>> 25);
        t = (x14 + x10);
        x2 ^= (t << 9) | (t >>> 23);
        t = (x2 + x14);
        x6 ^= (t << 13) | (t >>> 19);
        t = (x6 + x2);
        x10 ^= (t << 18) | (t >>> 14);
        t = (x15 + x11);
        x3 ^= (t << 7) | (t >>> 25);
        t = (x3 + x15);
        x7 ^= (t << 9) | (t >>> 23);
        t = (x7 + x3);
        x11 ^= (t << 13) | (t >>> 19);
        t = (x11 + x7);
        x15 ^= (t << 18) | (t >>> 14);
        t = (x0 + x3);
        x1 ^= (t << 7) | (t >>> 25);
        t = (x1 + x0);
        x2 ^= (t << 9) | (t >>> 23);
        t = (x2 + x1);
        x3 ^= (t << 13) | (t >>> 19);
        t = (x3 + x2);
        x0 ^= (t << 18) | (t >>> 14);
        t = (x5 + x4);
        x6 ^= (t << 7) | (t >>> 25);
        t = (x6 + x5);
        x7 ^= (t << 9) | (t >>> 23);
        t = (x7 + x6);
        x4 ^= (t << 13) | (t >>> 19);
        t = (x4 + x7);
        x5 ^= (t << 18) | (t >>> 14);
        t = (x10 + x9);
        x11 ^= (t << 7) | (t >>> 25);
        t = (x11 + x10);
        x8 ^= (t << 9) | (t >>> 23);
        t = (x8 + x11);
        x9 ^= (t << 13) | (t >>> 19);
        t = (x9 + x8);
        x10 ^= (t << 18) | (t >>> 14);
        t = (x15 + x14);
        x12 ^= (t << 7) | (t >>> 25);
        t = (x12 + x15);
        x13 ^= (t << 9) | (t >>> 23);
        t = (x13 + x12);
        x14 ^= (t << 13) | (t >>> 19);
        t = (x14 + x13);
        x15 ^= (t << 18) | (t >>> 14);
    }
    x0 = (x0 + j0);
    x1 = (x1 + j1);
    x2 = (x2 + j2);
    x3 = (x3 + j3);
    x4 = (x4 + j4);
    x5 = (x5 + j5);
    x6 = (x6 + j6);
    x7 = (x7 + j7);
    x8 = (x8 + j8);
    x9 = (x9 + j9);
    x10 = (x10 + j10);
    x11 = (x11 + j11);
    x12 = (x12 + j12);
    x13 = (x13 + j13);
    x14 = (x14 + j14);
    x15 = (x15 + j15);
    // inlined store_littleendian()'s
    B[0] = x0;
    B[1] = x0 >>> 8;
    B[2] = x0 >>> 16;
    B[3] = x0 >>> 24;
    B[4] = x1;
    B[5] = x1 >>> 8;
    B[6] = x1 >>> 16;
    B[7] = x1 >>> 24;
    B[8] = x2;
    B[9] = x2 >>> 8;
    B[10] = x2 >>> 16;
    B[11] = x2 >>> 24;
    B[12] = x3;
    B[13] = x3 >>> 8;
    B[14] = x3 >>> 16;
    B[15] = x3 >>> 24;
    B[16] = x4;
    B[17] = x4 >>> 8;
    B[18] = x4 >>> 16;
    B[19] = x4 >>> 24;
    B[20] = x5;
    B[21] = x5 >>> 8;
    B[22] = x5 >>> 16;
    B[23] = x5 >>> 24;
    B[24] = x6;
    B[25] = x6 >>> 8;
    B[26] = x6 >>> 16;
    B[27] = x6 >>> 24;
    B[28] = x7;
    B[29] = x7 >>> 8;
    B[30] = x7 >>> 16;
    B[31] = x7 >>> 24;
    B[32] = x8;
    B[33] = x8 >>> 8;
    B[34] = x8 >>> 16;
    B[35] = x8 >>> 24;
    B[36] = x9;
    B[37] = x9 >>> 8;
    B[38] = x9 >>> 16;
    B[39] = x9 >>> 24;
    B[40] = x10;
    B[41] = x10 >>> 8;
    B[42] = x10 >>> 16;
    B[43] = x10 >>> 24;
    B[44] = x11;
    B[45] = x11 >>> 8;
    B[46] = x11 >>> 16;
    B[47] = x11 >>> 24;
    B[48] = x12;
    B[49] = x12 >>> 8;
    B[50] = x12 >>> 16;
    B[51] = x12 >>> 24;
    B[52] = x13;
    B[53] = x13 >>> 8;
    B[54] = x13 >>> 16;
    B[55] = x13 >>> 24;
    B[56] = x14;
    B[57] = x14 >>> 8;
    B[58] = x14 >>> 16;
    B[59] = x14 >>> 24;
    B[60] = x15;
    B[61] = x15 >>> 8;
    B[62] = x15 >>> 16;
    B[63] = x15 >>> 24;
}
/**
 * Analog of blockmix_salsa8 in lib/crypto/crypto_scrypt-ref.c
 * blockmix_salsa8(B, Y, r):
 * Compute B = BlockMix_{salsa20/8, r}(B).  The input B must be 128r bytes in
 * length; the temporary space Y must also be the same size.
 */
function blockmix_salsa8(B, Y, r, arrFactory) {
    var X = arrFactory.getUint8Array(64);
    /* 1: X <-- B_{2r - 1} */
    blkcpy(X, 0, B, (2 * r - 1) * 64, 64);
    for (var i = 0; i < 2 * r; i += 1) {
        /* 3: X <-- H(X \xor B_i) */
        blkxor(X, 0, B, i * 64, 64);
        salsa20_8(X);
        /* 4: Y_i <-- X */
        blkcpy(Y, i * 64, X, 0, 64);
    }
    for (var i = 0; i < r; i += 1) {
        blkcpy(B, i * 64, Y, (i * 2) * 64, 64);
    }
    for (var i = 0; i < r; i += 1) {
        blkcpy(B, (i + r) * 64, Y, (i * 2 + 1) * 64, 64);
    }
    arrFactory.recycle(X);
}
/**
 * Analog of integerify in lib/crypto/crypto_scrypt-ref.c
 * plus another operation.
 * Return the result of parsing B_{2r-1} as a little-endian integer,
 * mod (N-1), where it is assumed that logN < 32.
 * As a result of a limit on N, only 32-bit integer should be read,
 * instead of an original 64-bit.
 */
function integerifyAndMod(B, r, N) {
    var i = (2 * r - 1) * 64;
    return (B[i] + (B[i + 1] << 8) + (B[i + 2] << 16) + (B[i + 3] << 24)) & (N - 1);
}
/**
 * Analog of smix in lib/crypto/crypto_scrypt-ref.c
 * smix(B, r, N, V, XY):
 * Compute B = SMix_r(B, N).  The input B must be 128r bytes in length; the
 * temporary storage V must be 128rN bytes in length; the temporary storage
 * XY must be 256r bytes in length.  The value N must be a power of 2, and
 * logN < 32.
 */
function smix(B, r, N, V, XY, progress, arrFactory) {
    var X = XY.subarray(0, 128 * r);
    var Y = XY.subarray(128 * r);
    var nextProgInd = progress.deltaN;
    /* 1: X <-- B */
    blkcpy(X, 0, B, 0, 128 * r);
    for (var i = 0; i < N; i += 1) {
        /* 3: V_i <-- X */
        blkcpy(V, i * (128 * r), X, 0, 128 * r);
        /* 4: X <-- H(X) */
        blockmix_salsa8(X, Y, r, arrFactory);
        if (i === nextProgInd) {
            progress.addDelta();
            nextProgInd += progress.deltaN;
        }
    }
    nextProgInd = progress.deltaN;
    /* 6: for i = 0 to N - 1 do */
    var j;
    for (i = 0; i < N; i += 1) {
        /* 7: j <-- Integerify(X) mod N */
        j = integerifyAndMod(X, r, N);
        /* 8: X <-- H(X \xor V_j) */
        blkxor(X, 0, V, j * (128 * r), 128 * r);
        blockmix_salsa8(X, Y, r, arrFactory);
        if (i === nextProgInd) {
            progress.addDelta();
            nextProgInd += progress.deltaN;
        }
    }
    /* 10: B' <-- X */
    blkcpy(B, 0, X, 0, 128 * r);
}
/**
 * Analog of crypto_scrypt in lib/crypto/crypto_scrypt-ref.c
 * crypto_scrypt(passwd, passwdlen, salt, saltlen, N, r, p, buf, buflen):
 * Compute scrypt(passwd[0 .. passwdlen - 1], salt[0 .. saltlen - 1], N, r,
 * p, buflen) and write the result into buf.  The parameters r, p, and buflen
 * must satisfy r * p < 2^30 and buflen <= (2^32 - 1) * 32.  The parameter N
 * must be a power of 2.
 *
 * Return Uint8Array with result; or throw an error.
 */
function scrypt(passwd, salt, logN, r, p, dkLen, progressCB, arrFactory) {
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    if ((logN >= 32) || (logN < 1)) {
        throw new Error('Parameter logN is out of bounds.');
    }
    if ((r < 1) || (p < 1) || (r * p >= (1 << 30))) {
        throw new Error('Parameters p and r are out of bounds.');
    }
    var N = (1 << logN);
    var V;
    var B;
    var XY;
    try {
        V = arrFactory.getUint8Array(128 * r * N);
        B = arrFactory.getUint8Array(128 * r * p);
        XY = arrFactory.getUint8Array(256 * r);
    }
    catch (e) {
        e.message = "Cannot allocate memory for given parameters: " + e.message;
        throw e;
    }
    /* 1: (B_0 ... B_{p-1}) <-- PBKDF2(P, S, 1, p * MFLen) */
    sha256.PBKDF2_SHA256(passwd, salt, 1, B, arrFactory);
    progressCB(3); // set 3% progress after the first PBKDF run
    var progShow = {
        completed: 3,
        deltaWork: 1,
        deltaN: Math.floor(2 * N * p / 93),
        addDelta: function () {
            this.completed += this.deltaWork;
            progressCB(this.completed);
        }
    };
    for (var i = 0; i < p; i += 1) {
        /* 3: B_i <-- MF(B_i, N) */
        smix(B.subarray(i * 128 * r), r, N, V, XY, progShow, arrFactory);
    }
    /* 5: DK <-- PBKDF2(P, B, 1, dkLen) */
    var buf = arrFactory.getUint8Array(dkLen);
    sha256.PBKDF2_SHA256(passwd, B, 1, buf, arrFactory);
    progressCB(99); // set 99% progress after the last PBKDF run
    arrFactory.wipe(V, B, XY);
    arrFactory.wipeRecycled();
    progressCB(100); // set 100% progress after the cleanup
    return buf;
}
exports.scrypt = scrypt;

},{"../util/arrays":17,"./sha256":11}],11:[function(require,module,exports){
/* Copyright(c) 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
/**
 * Analog of round in crypto_hashblocks/sha256/inplace/blocks.c
 * Length === 64.
 */
var round = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);
/**
 * Analog of SHA256_Transform in lib/crypto/sha256.h
 * with all C macros expanded.
 */
function crypto_hashblocks(state, inArr, arrFactory) {
    var W = arrFactory.getUint32Array(64);
    var inlen = inArr.length;
    var inInd = 0;
    var a;
    var b;
    var c;
    var d;
    var e;
    var f;
    var g;
    var h;
    var t0;
    var t1;
    var t;
    while (inlen >= 64) {
        for (var i = 0; i < 16; i += 1) {
            t = inInd + i * 4;
            W[i] = (inArr[t] << 24) + (inArr[t + 1] << 16) + (inArr[t + 2] << 8) + inArr[t + 3];
        }
        for (var i = 16; i < 64; i += 1) {
            t = W[i - 2];
            // t0 = sigma1(t); expanded below
            t0 = ((t >>> 17) | (t << 15)) ^ ((t >>> 19) | (t << 13)) ^ (t >>> 10);
            t = W[i - 15];
            // t1 = sigma0(t); expanded below
            t1 = ((t >>> 7) | (t << 25)) ^ ((t >>> 18) | (t << 14)) ^ (t >>> 3);
            W[i] = t0 + W[i - 7] + t1 + W[i - 16];
        }
        /* Mix.
           All RNDr's are put into one loop for 0<=i<64.
           All index calculations inside RNDr are equivalent to having
           8 local variables (a...h) instead of array S, with values
           rotation on every loop, with last rotation returning values
           to initial mapping.
           All macros are inlined, instead of having them as function
           calls (less calls and a use of local variables instead of
           arrays, make faster this heavily used part of code). */
        a = state[0];
        b = state[1];
        c = state[2];
        d = state[3];
        e = state[4];
        f = state[5];
        g = state[6];
        h = state[7];
        for (var i = 0; i < 64; i += 1) {
            t0 = h + W[i] + round[i];
            // t0 += Sigma1(e);
            t0 += ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
            // t0 += Ch(e, f, g);
            t0 += (e & (f ^ g)) ^ g;
            // t1 = Sigma0(a);
            t1 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
            // t1 += Maj(a, b, c);
            t1 += (a & (b | c)) | (b & c);
            d += t0;
            h = t0 + t1;
            // do values flipping
            t0 = h;
            h = g;
            g = f;
            f = e;
            e = d;
            d = c;
            c = b;
            b = a;
            a = t0;
        }
        state[0] += a;
        state[1] += b;
        state[2] += c;
        state[3] += d;
        state[4] += e;
        state[5] += f;
        state[6] += g;
        state[7] += h;
        inInd += 64;
        inlen -= 64;
    }
    arrFactory.recycle(W);
    return inlen;
}
function hashFromU32toU8(statebytes, state) {
    var u;
    for (var i = 0; i < 8; i += 1) {
        u = state[i];
        statebytes[i * 4 + 3] = u;
        statebytes[i * 4 + 2] = u >>> 8;
        statebytes[i * 4 + 1] = u >>> 16;
        statebytes[i * 4] = u >>> 24;
    }
}
/**
 * Analog of iv in crypto_hash/sha256/inplace/ref.c
 * Length === 8.
 */
var iv = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);
function hash_padded_block(h, oddBytes, totalLen, arrFactory) {
    var padded = arrFactory.getUint8Array(128);
    var oddLen = oddBytes.length;
    var bits = arrFactory.getUint32Array(2);
    bits[0] = (totalLen / 0x20000000) | 0;
    bits[1] = totalLen << 3;
    for (var i = 0; i < oddLen; i += 1) {
        padded[i] = oddBytes[i];
    }
    padded[oddLen] = 0x80;
    if (oddLen < 56) {
        for (var i = oddLen + 1; i < 56; i += 1) {
            padded[i] = 0;
        }
        padded[56] = bits[0] >>> 56;
        padded[57] = bits[0] >>> 48;
        padded[58] = bits[0] >>> 40;
        padded[59] = bits[0] >>> 32;
        padded[60] = bits[1] >>> 24;
        padded[61] = bits[1] >>> 16;
        padded[62] = bits[1] >>> 8;
        padded[63] = bits[1];
        crypto_hashblocks(h, padded.subarray(0, 64), arrFactory);
    }
    else {
        for (var i = oddLen + 1; i < 120; i += 1) {
            padded[i] = 0;
        }
        padded[120] = bits[0] >>> 56;
        padded[121] = bits[0] >>> 48;
        padded[122] = bits[0] >>> 40;
        padded[123] = bits[0] >>> 32;
        padded[124] = bits[1] >>> 24;
        padded[125] = bits[1] >>> 16;
        padded[126] = bits[1] >>> 8;
        padded[127] = bits[1];
        crypto_hashblocks(h, padded, arrFactory);
    }
    arrFactory.recycle(padded, bits);
}
function makeSha256Ctx(arrFactory) {
    return {
        buf: arrFactory.getUint8Array(64),
        bufBytes: 0,
        state: arrFactory.getUint32Array(8),
        count: 0,
        arrFactory: arrFactory
    };
}
exports.makeSha256Ctx = makeSha256Ctx;
function recycleSha256Ctxs() {
    var ctxs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        ctxs[_i - 0] = arguments[_i];
    }
    var ctx;
    for (var i = 0; i < ctxs.length; i += 1) {
        ctx = ctxs[i];
        ctx.arrFactory.recycle(ctx.state, ctx.buf);
        ctx.state = null;
        ctx.buf = null;
        ctx.arrFactory = null;
    }
}
exports.recycleSha256Ctxs = recycleSha256Ctxs;
function SHA256_Init(ctx) {
    ctx.state.set(iv);
    ctx.bufBytes = 0;
    ctx.count = 0;
}
exports.SHA256_Init = SHA256_Init;
function SHA256_Update(ctx, m, mi, mlen) {
    if (mlen === 0) {
        return;
    }
    ctx.count += mlen;
    if (ctx.bufBytes > 0) {
        var delta = Math.min(mlen, 64 - ctx.bufBytes);
        for (var i = 0; i < delta; i += 1) {
            ctx.buf[ctx.bufBytes + i] = m[mi + i];
        }
        ctx.bufBytes += delta;
        if (ctx.bufBytes < 64) {
            return;
        }
        else {
            crypto_hashblocks(ctx.state, ctx.buf, ctx.arrFactory);
            ctx.bufBytes = 0;
            mi += delta;
            mlen -= delta;
            if (mlen === 0) {
                return;
            }
        }
    }
    ctx.bufBytes = crypto_hashblocks(ctx.state, m.subarray(mi, mi + mlen), ctx.arrFactory);
    mi += mlen - ctx.bufBytes;
    for (var i = 0; i < ctx.bufBytes; i += 1) {
        ctx.buf[i] = m[mi + i];
    }
}
exports.SHA256_Update = SHA256_Update;
function SHA256_Final(h, ctx) {
    hash_padded_block(ctx.state, ctx.buf.subarray(0, ctx.bufBytes), ctx.count, ctx.arrFactory);
    ctx.count = 0;
    ctx.bufBytes = 0;
    hashFromU32toU8(h, ctx.state);
}
exports.SHA256_Final = SHA256_Final;
function makeHmacSHA256Context(arrFactory) {
    return {
        ictx: makeSha256Ctx(arrFactory),
        octx: makeSha256Ctx(arrFactory),
        arrFactory: arrFactory
    };
}
function recycleHmacSHA256Context() {
    var ctxs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        ctxs[_i - 0] = arguments[_i];
    }
    var ctx;
    for (var i = 0; i < ctxs.length; i += 1) {
        ctx = ctxs[i];
        recycleSha256Ctxs(ctx.ictx, ctx.octx);
    }
}
function copyHmacSHA256Context(dst, src) {
    dst.ictx.state.set(src.ictx.state);
    dst.ictx.count = src.ictx.count;
    dst.ictx.buf.set(src.ictx.buf);
    dst.ictx.bufBytes = src.ictx.bufBytes;
    dst.octx.state.set(src.octx.state);
    dst.octx.count = src.octx.count;
    dst.octx.buf.set(src.octx.buf);
    dst.octx.bufBytes = src.octx.bufBytes;
}
function copyBytes(dst, di, src, si, len) {
    for (var i = 0; i < len; i += 1) {
        dst[di + i] = src[si + i];
    }
}
/**
 * Analog of HMAC_SHA256_Init in lib/crypto/sha256.c
 * Initialize an HMAC-SHA256 operation with the given key.
 */
function HMAC_SHA256_Init(ctx, K, KInd, Klen) {
    var pad = ctx.arrFactory.getUint8Array(64);
    var khash = ctx.arrFactory.getUint8Array(32);
    /* If Klen > 64, the key is really SHA256(K). */
    if (Klen > 64) {
        SHA256_Init(ctx.ictx);
        SHA256_Update(ctx.ictx, K, KInd, Klen);
        SHA256_Final(khash, ctx.ictx);
        K = khash;
        KInd = 0;
        Klen = 32;
    }
    /* Inner SHA256 operation is SHA256(K xor [block of 0x36] || data). */
    SHA256_Init(ctx.ictx);
    for (var i = 0; i < Klen; i += 1) {
        pad[i] = K[i] ^ 0x36;
    }
    for (var i = Klen; i < 64; i += 1) {
        pad[i] = 0x36;
    }
    SHA256_Update(ctx.ictx, pad, 0, 64);
    /* Outer SHA256 operation is SHA256(K xor [block of 0x5c] || hash). */
    SHA256_Init(ctx.octx);
    for (var i = 0; i < Klen; i += 1) {
        pad[i] = K[i] ^ 0x5c;
    }
    for (var i = Klen; i < 64; i += 1) {
        pad[i] = 0x5c;
    }
    SHA256_Update(ctx.octx, pad, 0, 64);
    ctx.arrFactory.recycle(khash, pad);
}
/**
 * Analog of HMAC_SHA256_Update in lib/crypto/sha256.c
 * Add bytes to the HMAC-SHA256 operation.
 */
function HMAC_SHA256_Update(ctx, inArr, inInd, len) {
    /* Feed data to the inner SHA256 operation. */
    SHA256_Update(ctx.ictx, inArr, inInd, len);
}
/**
 * Analog of HMAC_SHA256_Update in lib/crypto/sha256.c
 * Finish an HMAC-SHA256 operation.
 */
function HMAC_SHA256_Final(digest, ctx) {
    var ihash = ctx.arrFactory.getUint8Array(32);
    /* Finish the inner SHA256 operation. */
    SHA256_Final(ihash, ctx.ictx);
    /* Feed the inner hash to the outer SHA256 operation. */
    SHA256_Update(ctx.octx, ihash, 0, 32);
    /* Finish the outer SHA256 operation. */
    SHA256_Final(digest, ctx.octx);
    ctx.arrFactory.recycle(ihash);
}
/**
 * Analog of be32enc in lib/util/sysendian.h
 */
function be32enc(p, pi, x) {
    p[pi + 3] = x;
    p[pi + 2] = (x >>> 8);
    p[pi + 1] = (x >>> 16);
    p[pi] = (x >>> 24);
}
exports.be32enc = be32enc;
/**
 * Analog of PBKDF2_SHA256 in lib/crypto/sha256.c
 * PBKDF2_SHA256(passwd, passwdlen, salt, saltlen, c, buf, dkLen):
 * Compute PBKDF2(passwd, salt, c, dkLen) using HMAC-SHA256 as the PRF, and
 * write the output to buf, length dkLen, which must be at most 32 * (2^32 - 1).
 */
function PBKDF2_SHA256(passwd, salt, c, buf, arrFactory) {
    var dkLen = buf.length;
    var PShctx = makeHmacSHA256Context(arrFactory);
    var hctx = makeHmacSHA256Context(arrFactory);
    var ivec = arrFactory.getUint8Array(4);
    var U = arrFactory.getUint8Array(32);
    var T = arrFactory.getUint8Array(32);
    /* Compute HMAC state after processing P and S. */
    HMAC_SHA256_Init(PShctx, passwd, 0, passwd.length);
    HMAC_SHA256_Update(PShctx, salt, 0, salt.length);
    for (var i = 0; (i * 32) < dkLen; i += 1) {
        /* Generate INT(i + 1). */
        be32enc(ivec, 0, i + 1);
        /* Compute U_1 = PRF(P, S || INT(i)). */
        copyHmacSHA256Context(hctx, PShctx);
        HMAC_SHA256_Update(hctx, ivec, 0, 4);
        HMAC_SHA256_Final(U, hctx);
        /* T_i = U_1 ... */
        copyBytes(T, 0, U, 0, 32);
        for (var j = 2; j <= c; j += 1) {
            /* Compute U_j. */
            HMAC_SHA256_Init(hctx, passwd, 0, passwd.length);
            HMAC_SHA256_Update(hctx, U, 0, 32);
            HMAC_SHA256_Final(U, hctx);
            for (var k = 0; k < 32; k += 1) {
                T[k] ^= U[k];
            }
        }
        /* Copy as many bytes as necessary into buf. */
        var clen = dkLen - i * 32;
        if (clen > 32) {
            clen = 32;
        }
        copyBytes(buf, (i * 32), T, 0, clen);
    }
    recycleHmacSHA256Context(PShctx, hctx);
    arrFactory.recycle(ivec, U, T);
}
exports.PBKDF2_SHA256 = PBKDF2_SHA256;
Object.freeze(exports);

},{}],12:[function(require,module,exports){
/* Copyright(c) 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
function make_fe25519(arrFactory) {
    return arrFactory.getUint32Array(32);
}
exports.make_fe25519 = make_fe25519;
function make_copy_fe25519(x, arrFactory) {
    var c = arrFactory.getUint32Array(32);
    c.set(x);
    return c;
}
// The following defs are not used in crypto_sign/ed25519/ref/fe25519.c
//#define WINDOWSIZE 1 /* Should be 1,2, or 4 */
//#define WINDOWMASK ((1<<WINDOWSIZE)-1)
/**
 * Analog of equal in crypto_sign/ed25519/ref/fe25519.c
 * All inputs are 16-bit.
 */
function equal(a, b) {
    return (a === b) ? 1 : 0;
    //	return (((a ^ b) - 1) >>> 31); /* (a equals b) ? 1: yes; 0: no */
}
/**
 * Analog of ge in crypto_sign/ed25519/ref/fe25519.c
 * All inputs are 16-bit.
 */
function ge(a, b) {
    return (a >= b) ? 1 : 0;
    //	return (((a - b) >>> 31) ^ 1); /* (a greater or equals b) ? 1: yes; 0: no */
}
/**
 * Analog of times19 in crypto_sign/ed25519/ref/fe25519.c
 */
function times19(a) {
    return (a << 4) + (a << 1) + a;
}
/**
 * Analog of times38 in crypto_sign/ed25519/ref/fe25519.c
 */
function times38(a) {
    return (a << 5) + (a << 2) + (a << 1);
}
/**
 * Analog of reduce_add_sub in crypto_sign/ed25519/ref/fe25519.c
 */
function reduce_add_sub(r) {
    var t;
    for (var rep = 0; rep < 4; rep += 1) {
        t = r[31] >>> 7;
        r[31] &= 127;
        t = times19(t);
        r[0] += t;
        for (var i = 0; i < 31; i += 1) {
            t = r[i] >>> 8;
            r[i + 1] += t;
            r[i] &= 255;
        }
    }
}
/**
 * Analog of reduce_mul in crypto_sign/ed25519/ref/fe25519.c
 */
function reduce_mul(r) {
    var t;
    for (var rep = 0; rep < 2; rep += 1) {
        t = r[31] >>> 7;
        r[31] &= 127;
        t = times19(t);
        r[0] += t;
        for (var i = 0; i < 31; i += 1) {
            t = r[i] >>> 8;
            r[i + 1] += t;
            r[i] &= 255;
        }
    }
}
/**
 * Analog of fe25519_freeze in crypto_sign/ed25519/ref/fe25519.c
 * reduction modulo 2^255-19
 */
function fe25519_freeze(r) {
    var m = equal(r[31], 127);
    for (var i = 30; i > 0; i -= 1) {
        m &= equal(r[i], 255);
    }
    m &= ge(r[0], 237);
    m = -m;
    r[31] -= m & 127;
    for (var i = 30; i > 0; i -= 1) {
        r[i] -= m & 255;
    }
    r[0] -= m & 237;
}
/**
 * Analog of fe25519_unpack in crypto_sign/ed25519/ref/fe25519.c
 */
function unpack(r, x) {
    for (var i = 0; i < 32; i += 1) {
        r[i] = x[i];
    }
    r[31] &= 127;
}
exports.unpack = unpack;
/**
 * Analog of fe25519_unpack in crypto_sign/ed25519/ref/fe25519.c
 * Assumes input x being reduced below 2^255
 */
function pack(r, x, arrFactory) {
    var y = make_copy_fe25519(x, arrFactory);
    fe25519_freeze(y);
    for (var i = 0; i < 32; i += 1) {
        r[i] = y[i];
    }
    arrFactory.recycle(y);
}
exports.pack = pack;
/**
 * Analog of fe25519_iseq_vartime in crypto_sign/ed25519/ref/fe25519.c
 */
function iseq_vartime(x, y, arrFactory) {
    var t1 = make_copy_fe25519(x, arrFactory);
    var t2 = make_copy_fe25519(y, arrFactory);
    fe25519_freeze(t1);
    fe25519_freeze(t2);
    for (var i = 0; i < 32; i += 1) {
        if (t1[i] !== t2[i]) {
            return false;
        }
    }
    arrFactory.recycle(t1, t2);
    return true;
}
exports.iseq_vartime = iseq_vartime;
/**
 * Analog of fe25519_cmov in crypto_sign/ed25519/ref/fe25519.c
 */
function cmov(r, x, b) {
    for (var i = 0; i < 32; i += 1) {
        r[i] ^= (-b) & (x[i] ^ r[i]);
    }
}
exports.cmov = cmov;
/**
 * Analog of fe25519_getparity in crypto_sign/ed25519/ref/fe25519.c
 */
function getparity(x, arrFactory) {
    var t = make_copy_fe25519(x, arrFactory);
    fe25519_freeze(t);
    var res = t[0] & 1;
    arrFactory.recycle(t);
    return res;
}
exports.getparity = getparity;
/**
 * Analog of fe25519_setone in crypto_sign/ed25519/ref/fe25519.c
 */
function setone(r) {
    r[0] = 1;
    for (var i = 1; i < 32; i += 1) {
        r[i] = 0;
    }
}
exports.setone = setone;
/**
 * Analog of fe25519_setzero in crypto_sign/ed25519/ref/fe25519.c
 */
function setzero(r) {
    for (var i = 0; i < 32; i += 1) {
        r[i] = 0;
    }
}
exports.setzero = setzero;
/**
 * Analog of fe25519_neg in crypto_sign/ed25519/ref/fe25519.c
 */
function neg(r, x, arrFactory) {
    var t = make_copy_fe25519(x, arrFactory);
    setzero(r);
    sub(r, r, t, arrFactory);
    arrFactory.recycle(t);
}
exports.neg = neg;
/**
 * Analog of fe25519_add in crypto_sign/ed25519/ref/fe25519.c
 */
function add(r, x, y) {
    for (var i = 0; i < 32; i += 1) {
        r[i] = x[i] + y[i];
    }
    reduce_add_sub(r);
}
exports.add = add;
/**
 * Analog of fe25519_sub in crypto_sign/ed25519/ref/fe25519.c
 */
function sub(r, x, y, arrFactory) {
    var t = make_fe25519(arrFactory);
    t[0] = x[0] + 0x1da;
    for (var i = 1; i < 31; i += 1) {
        t[i] = x[i] + 0x1fe;
    }
    t[31] = x[31] + 0xfe;
    for (var i = 0; i < 32; i += 1) {
        r[i] = t[i] - y[i];
    }
    reduce_add_sub(r);
    arrFactory.recycle(t);
}
exports.sub = sub;
/**
 * Analog of fe25519_mul in crypto_sign/ed25519/ref/fe25519.c
 */
function mul(r, x, y, arrFactory) {
    var t = arrFactory.getUint32Array(63);
    for (var i = 0; i < 63; i += 1) {
        t[i] = 0;
    }
    for (var i = 0; i < 32; i += 1) {
        for (var j = 0; j < 32; j += 1) {
            t[i + j] += x[i] * y[j];
        }
    }
    for (var i = 32; i < 63; i += 1) {
        r[i - 32] = t[i - 32] + times38(t[i]);
    }
    r[31] = t[31]; /* result now in r[0]...r[31] */
    reduce_mul(r);
    arrFactory.recycle(t);
}
exports.mul = mul;
/**
 * Analog of fe25519_square in crypto_sign/ed25519/ref/fe25519.c
 */
function square(r, x, arrFactory) {
    mul(r, x, x, arrFactory);
}
exports.square = square;
/**
 * Analog of fe25519_invert in crypto_sign/ed25519/ref/fe25519.c
 */
function invert(r, x, arrFactory) {
    var z2 = make_fe25519(arrFactory);
    var z9 = make_fe25519(arrFactory);
    var z11 = make_fe25519(arrFactory);
    var z2_5_0 = make_fe25519(arrFactory);
    var z2_10_0 = make_fe25519(arrFactory);
    var z2_20_0 = make_fe25519(arrFactory);
    var z2_50_0 = make_fe25519(arrFactory);
    var z2_100_0 = make_fe25519(arrFactory);
    var t0 = make_fe25519(arrFactory);
    var t1 = make_fe25519(arrFactory);
    /* 2 */ square(z2, x, arrFactory);
    /* 4 */ square(t1, z2, arrFactory);
    /* 8 */ square(t0, t1, arrFactory);
    /* 9 */ mul(z9, t0, x, arrFactory);
    /* 11 */ mul(z11, z9, z2, arrFactory);
    /* 22 */ square(t0, z11, arrFactory);
    /* 2^5 - 2^0 = 31 */ mul(z2_5_0, t0, z9, arrFactory);
    /* 2^6 - 2^1 */ square(t0, z2_5_0, arrFactory);
    /* 2^7 - 2^2 */ square(t1, t0, arrFactory);
    /* 2^8 - 2^3 */ square(t0, t1, arrFactory);
    /* 2^9 - 2^4 */ square(t1, t0, arrFactory);
    /* 2^10 - 2^5 */ square(t0, t1, arrFactory);
    /* 2^10 - 2^0 */ mul(z2_10_0, t0, z2_5_0, arrFactory);
    /* 2^11 - 2^1 */ square(t0, z2_10_0, arrFactory);
    /* 2^12 - 2^2 */ square(t1, t0, arrFactory);
    for (var i = 2; i < 10; i += 2) {
        square(t0, t1, arrFactory);
        square(t1, t0, arrFactory);
    }
    /* 2^20 - 2^0 */ mul(z2_20_0, t1, z2_10_0, arrFactory);
    /* 2^21 - 2^1 */ square(t0, z2_20_0, arrFactory);
    /* 2^22 - 2^2 */ square(t1, t0, arrFactory);
    for (var i = 2; i < 20; i += 2) {
        square(t0, t1, arrFactory);
        square(t1, t0, arrFactory);
    }
    /* 2^40 - 2^0 */ mul(t0, t1, z2_20_0, arrFactory);
    /* 2^41 - 2^1 */ square(t1, t0, arrFactory);
    /* 2^42 - 2^2 */ square(t0, t1, arrFactory);
    for (var i = 2; i < 10; i += 2) {
        square(t1, t0, arrFactory);
        square(t0, t1, arrFactory);
    }
    /* 2^50 - 2^0 */ mul(z2_50_0, t0, z2_10_0, arrFactory);
    /* 2^51 - 2^1 */ square(t0, z2_50_0, arrFactory);
    /* 2^52 - 2^2 */ square(t1, t0, arrFactory);
    for (var i = 2; i < 50; i += 2) {
        square(t0, t1, arrFactory);
        square(t1, t0, arrFactory);
    }
    /* 2^100 - 2^0 */ mul(z2_100_0, t1, z2_50_0, arrFactory);
    /* 2^101 - 2^1 */ square(t1, z2_100_0, arrFactory);
    /* 2^102 - 2^2 */ square(t0, t1, arrFactory);
    for (var i = 2; i < 100; i += 2) {
        square(t1, t0, arrFactory);
        square(t0, t1, arrFactory);
    }
    /* 2^200 - 2^0 */ mul(t1, t0, z2_100_0, arrFactory);
    /* 2^201 - 2^1 */ square(t0, t1, arrFactory);
    /* 2^202 - 2^2 */ square(t1, t0, arrFactory);
    for (var i = 2; i < 50; i += 2) {
        square(t0, t1, arrFactory);
        square(t1, t0, arrFactory);
    }
    /* 2^250 - 2^0 */ mul(t0, t1, z2_50_0, arrFactory);
    /* 2^251 - 2^1 */ square(t1, t0, arrFactory);
    /* 2^252 - 2^2 */ square(t0, t1, arrFactory);
    /* 2^253 - 2^3 */ square(t1, t0, arrFactory);
    /* 2^254 - 2^4 */ square(t0, t1, arrFactory);
    /* 2^255 - 2^5 */ square(t1, t0, arrFactory);
    /* 2^255 - 21 */ mul(r, t1, z11, arrFactory);
    arrFactory.recycle(z2, z9, z11, z2_5_0, z2_10_0, z2_20_0, z2_50_0, z2_100_0, t0, t1);
}
exports.invert = invert;
/**
 * Analog of fe25519_pow2523 in crypto_sign/ed25519/ref/fe25519.c
 */
function pow2523(r, x, arrFactory) {
    var z2 = make_fe25519(arrFactory);
    var z9 = make_fe25519(arrFactory);
    var z11 = make_fe25519(arrFactory);
    var z2_5_0 = make_fe25519(arrFactory);
    var z2_10_0 = make_fe25519(arrFactory);
    var z2_20_0 = make_fe25519(arrFactory);
    var z2_50_0 = make_fe25519(arrFactory);
    var z2_100_0 = make_fe25519(arrFactory);
    var t = make_fe25519(arrFactory);
    /* 2 */ square(z2, x, arrFactory);
    /* 4 */ square(t, z2, arrFactory);
    /* 8 */ square(t, t, arrFactory);
    /* 9 */ mul(z9, t, x, arrFactory);
    /* 11 */ mul(z11, z9, z2, arrFactory);
    /* 22 */ square(t, z11, arrFactory);
    /* 2^5 - 2^0 = 31 */ mul(z2_5_0, t, z9, arrFactory);
    /* 2^6 - 2^1 */ square(t, z2_5_0, arrFactory);
    for (var i = 1; i < 5; i += 1) {
        square(t, t, arrFactory);
    }
    /* 2^10 - 2^0 */ mul(z2_10_0, t, z2_5_0, arrFactory);
    /* 2^11 - 2^1 */ square(t, z2_10_0, arrFactory);
    for (var i = 1; i < 10; i += 1) {
        square(t, t, arrFactory);
    }
    /* 2^20 - 2^0 */ mul(z2_20_0, t, z2_10_0, arrFactory);
    /* 2^21 - 2^1 */ square(t, z2_20_0, arrFactory);
    for (var i = 1; i < 20; i += 1) {
        square(t, t, arrFactory);
    }
    /* 2^40 - 2^0 */ mul(t, t, z2_20_0, arrFactory);
    /* 2^41 - 2^1 */ square(t, t, arrFactory);
    for (var i = 1; i < 10; i += 1) {
        square(t, t, arrFactory);
    }
    /* 2^50 - 2^0 */ mul(z2_50_0, t, z2_10_0, arrFactory);
    /* 2^51 - 2^1 */ square(t, z2_50_0, arrFactory);
    for (var i = 1; i < 50; i += 1) {
        square(t, t, arrFactory);
    }
    /* 2^100 - 2^0 */ mul(z2_100_0, t, z2_50_0, arrFactory);
    /* 2^101 - 2^1 */ square(t, z2_100_0, arrFactory);
    for (var i = 1; i < 100; i += 1) {
        square(t, t, arrFactory);
    }
    /* 2^200 - 2^0 */ mul(t, t, z2_100_0, arrFactory);
    /* 2^201 - 2^1 */ square(t, t, arrFactory);
    for (var i = 1; i < 50; i += 1) {
        square(t, t, arrFactory);
    }
    /* 2^250 - 2^0 */ mul(t, t, z2_50_0, arrFactory);
    /* 2^251 - 2^1 */ square(t, t, arrFactory);
    /* 2^252 - 2^2 */ square(t, t, arrFactory);
    /* 2^252 - 3 */ mul(r, t, x, arrFactory);
    arrFactory.recycle(z2, z9, z11, z2_5_0, z2_10_0, z2_20_0, z2_50_0, z2_100_0, t);
}
exports.pow2523 = pow2523;
Object.freeze(exports);

},{}],13:[function(require,module,exports){
/* Copyright(c) 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
var fe = require('./fe25519');
var sc = require('./sc25519');
var ge_base = require('./ge25519_base.data');
var arrays = require('../util/arrays');
function make_ge25519(arrFactory) {
    return {
        x: fe.make_fe25519(arrFactory),
        y: fe.make_fe25519(arrFactory),
        z: fe.make_fe25519(arrFactory),
        t: fe.make_fe25519(arrFactory),
    };
}
exports.make_ge25519 = make_ge25519;
function make_ge25519_p1p1(arrFactory) {
    return make_ge25519(arrFactory);
}
function make_ge25519_p2(arrFactory) {
    return {
        x: fe.make_fe25519(arrFactory),
        y: fe.make_fe25519(arrFactory),
        z: fe.make_fe25519(arrFactory),
    };
}
function make_ge25519_p3(arrFactory) {
    return make_ge25519(arrFactory);
}
function copy_ge25519_p3(c, x) {
    c.x.set(x.x);
    c.y.set(x.y);
    c.z.set(x.z);
    c.t.set(x.t);
}
function copy_ge25519_aff(c, x) {
    c.x.set(x.x);
    c.y.set(x.y);
}
function recycle_ge25519_aff(arrFactory) {
    var ges = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        ges[_i - 1] = arguments[_i];
    }
    var x;
    for (var i = 0; i < ges.length; i += 1) {
        x = ges[i];
        arrFactory.recycle(x.x, x.y);
    }
}
function recycle_ge25519(arrFactory) {
    var ges = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        ges[_i - 1] = arguments[_i];
    }
    var x;
    for (var i = 0; i < ges.length; i += 1) {
        x = ges[i];
        arrFactory.recycle(x.x, x.y, x.z);
        if (x.t) {
            arrFactory.recycle(x.t);
        }
    }
}
exports.recycle_ge25519 = recycle_ge25519;
/**
 * Analog of constant ge25519_ecd in crypto_sign/ed25519/ref/ge25519.c
 *  d
 */
var ge25519_ecd = new Uint32Array([0xA3, 0x78, 0x59, 0x13, 0xCA, 0x4D, 0xEB, 0x75, 0xAB, 0xD8, 0x41, 0x41, 0x4D, 0x0A, 0x70, 0x00, 0x98, 0xE8, 0x79, 0x77, 0x79, 0x40, 0xC7, 0x8C, 0x73, 0xFE, 0x6F, 0x2B, 0xEE, 0x6C, 0x03, 0x52]);
/**
 * Analog of constant ge25519_ec2d in crypto_sign/ed25519/ref/ge25519.c
 *  2*d
 */
var ge25519_ec2d = new Uint32Array([0x59, 0xF1, 0xB2, 0x26, 0x94, 0x9B, 0xD6, 0xEB, 0x56, 0xB1, 0x83, 0x82, 0x9A, 0x14, 0xE0, 0x00, 0x30, 0xD1, 0xF3, 0xEE, 0xF2, 0x80, 0x8E, 0x19, 0xE7, 0xFC, 0xDF, 0x56, 0xDC, 0xD9, 0x06, 0x24]);
/**
 * Analog of constant ge25519_sqrtm1 in crypto_sign/ed25519/ref/ge25519.c
 *  sqrt(-1)
 */
var ge25519_sqrtm1 = new Uint32Array([0xB0, 0xA0, 0x0E, 0x4A, 0x27, 0x1B, 0xEE, 0xC4, 0x78, 0xE4, 0x2F, 0xAD, 0x06, 0x18, 0x43, 0x2F, 0xA7, 0xD7, 0xFB, 0x3D, 0x99, 0x00, 0x4D, 0x2B, 0x0B, 0xDF, 0xC1, 0x4F, 0x80, 0x24, 0x83, 0x2B]);
/**
 * Analog of constant ge25519_base in crypto_sign/ed25519/ref/ge25519.c
 * Packed coordinates of the base point
 */
exports.base = make_ge25519(arrays.makeFactory());
exports.base.x.set([0x1A, 0xD5, 0x25, 0x8F, 0x60, 0x2D, 0x56, 0xC9, 0xB2, 0xA7, 0x25, 0x95, 0x60, 0xC7, 0x2C, 0x69, 0x5C, 0xDC, 0xD6, 0xFD, 0x31, 0xE2, 0xA4, 0xC0, 0xFE, 0x53, 0x6E, 0xCD, 0xD3, 0x36, 0x69, 0x21]);
exports.base.y.set([0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66]);
exports.base.z.set([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
exports.base.t.set([0xA3, 0xDD, 0xB7, 0xA5, 0xB3, 0x8A, 0xDE, 0x6D, 0xF5, 0x52, 0x51, 0x77, 0x80, 0x9F, 0xF0, 0x20, 0x7D, 0xE3, 0xAB, 0x64, 0x8E, 0x4E, 0xEA, 0x66, 0x65, 0x76, 0x8B, 0xD7, 0x0F, 0x5F, 0x87, 0x67]);
/**
 * Analog of constant ge25519_base_multiples_affine in
 * crypto_sign/ed25519/ref/ge25519.c
 * Multiples of the base point in affine representation
 */
var ge25519_base_multiples_affine = ge_base.base_multiples_affine;
/**
 * Analog of p1p1_to_p2 in crypto_sign/ed25519/ref/ge25519.c
 */
function p1p1_to_p2(r, p, arrFactory) {
    fe.mul(r.x, p.x, p.t, arrFactory);
    fe.mul(r.y, p.y, p.z, arrFactory);
    fe.mul(r.z, p.z, p.t, arrFactory);
}
/**
 * Analog of p1p1_to_p3 in crypto_sign/ed25519/ref/ge25519.c
 */
function p1p1_to_p3(r, p, arrFactory) {
    p1p1_to_p2(r, p, arrFactory);
    fe.mul(r.t, p.x, p.y, arrFactory);
}
/**
 * Analog of ge25519_mixadd2 in crypto_sign/ed25519/ref/ge25519.c
 */
function ge25519_mixadd2(r, q, arrFactory) {
    var a = fe.make_fe25519(arrFactory);
    var b = fe.make_fe25519(arrFactory);
    var t1 = fe.make_fe25519(arrFactory);
    var t2 = fe.make_fe25519(arrFactory);
    var c = fe.make_fe25519(arrFactory);
    var d = fe.make_fe25519(arrFactory);
    var e = fe.make_fe25519(arrFactory);
    var f = fe.make_fe25519(arrFactory);
    var g = fe.make_fe25519(arrFactory);
    var h = fe.make_fe25519(arrFactory);
    var qt = fe.make_fe25519(arrFactory);
    fe.mul(qt, q.x, q.y, arrFactory);
    fe.sub(a, r.y, r.x, arrFactory); /* A = (Y1-X1)*(Y2-X2) */
    fe.add(b, r.y, r.x); /* B = (Y1+X1)*(Y2+X2) */
    fe.sub(t1, q.y, q.x, arrFactory);
    fe.add(t2, q.y, q.x);
    fe.mul(a, a, t1, arrFactory);
    fe.mul(b, b, t2, arrFactory);
    fe.sub(e, b, a, arrFactory); /* E = B-A */
    fe.add(h, b, a); /* H = B+A */
    fe.mul(c, r.t, qt, arrFactory); /* C = T1*k*T2 */
    fe.mul(c, c, ge25519_ec2d, arrFactory);
    fe.add(d, r.z, r.z); /*a, b, c, d, t D = Z1*2 */
    fe.sub(f, d, c, arrFactory); /* F = D-C */
    fe.add(g, d, c); /* G = D+C */
    fe.mul(r.x, e, f, arrFactory);
    fe.mul(r.y, h, g, arrFactory);
    fe.mul(r.z, g, f, arrFactory);
    fe.mul(r.t, e, h, arrFactory);
    arrFactory.recycle(a, b, t1, t2, c, d, e, f, g, h, qt);
}
/**
 * Analog of add_p1p1 in crypto_sign/ed25519/ref/ge25519.c
 */
function add_p1p1(r, p, q, arrFactory) {
    var a = fe.make_fe25519(arrFactory);
    var b = fe.make_fe25519(arrFactory);
    var c = fe.make_fe25519(arrFactory);
    var d = fe.make_fe25519(arrFactory);
    var t = fe.make_fe25519(arrFactory);
    fe.sub(a, p.y, p.x, arrFactory); /* A = (Y1-X1)*(Y2-X2) */
    fe.sub(t, q.y, q.x, arrFactory);
    fe.mul(a, a, t, arrFactory);
    fe.add(b, p.x, p.y); /* B = (Y1+X1)*(Y2+X2) */
    fe.add(t, q.x, q.y);
    fe.mul(b, b, t, arrFactory);
    fe.mul(c, p.t, q.t, arrFactory); /* C = T1*k*T2 */
    fe.mul(c, c, ge25519_ec2d, arrFactory);
    fe.mul(d, p.z, q.z, arrFactory); /* D = Z1*2*Z2 */
    fe.add(d, d, d);
    fe.sub(r.x, b, a, arrFactory); /* E = B-A */
    fe.sub(r.t, d, c, arrFactory); /* F = D-C */
    fe.add(r.z, d, c); /* G = D+C */
    fe.add(r.y, b, a); /* H = B+A */
    arrFactory.recycle(a, b, c, d, t);
}
/**
 * Analog of dbl_p1p1 in crypto_sign/ed25519/ref/ge25519.c
 * See http://www.hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#doubling-dbl-2008-hwcd
 */
function dbl_p1p1(r, p, arrFactory) {
    var a = fe.make_fe25519(arrFactory);
    var b = fe.make_fe25519(arrFactory);
    var c = fe.make_fe25519(arrFactory);
    var d = fe.make_fe25519(arrFactory);
    fe.square(a, p.x, arrFactory);
    fe.square(b, p.y, arrFactory);
    fe.square(c, p.z, arrFactory);
    fe.add(c, c, c);
    fe.neg(d, a, arrFactory);
    fe.add(r.x, p.x, p.y);
    fe.square(r.x, r.x, arrFactory);
    fe.sub(r.x, r.x, a, arrFactory);
    fe.sub(r.x, r.x, b, arrFactory);
    fe.add(r.z, d, b);
    fe.sub(r.t, r.z, c, arrFactory);
    fe.sub(r.y, d, b, arrFactory);
    arrFactory.recycle(a, b, c, d);
}
/**
 * Analog of add_p1p1 in crypto_sign/ed25519/ref/ge25519.c
 * Constant-time version of: if(b) r = p
 */
function cmov_aff(r, p, b) {
    fe.cmov(r.x, p.x, b);
    fe.cmov(r.y, p.y, b);
}
/**
 * Analog of equal in crypto_sign/ed25519/ref/ge25519.c
 */
function equal(b, c) {
    return (b === c) ? 1 : 0;
    //	return ((b ^ c) - 1) >>> 31; /* 1: yes; 0: no */
}
/**
 * Analog of negative in crypto_sign/ed25519/ref/ge25519.c
 */
function negative(b) {
    return (b < 0) ? 1 : 0;
    //	return (b >>> 31); /* 1: yes; 0: no */
}
/**
 * Analog of choose_t in crypto_sign/ed25519/ref/ge25519.c
 */
function choose_t(t, pos, b, arrFactory) {
    /* constant time */
    var v = fe.make_fe25519(arrFactory);
    copy_ge25519_aff(t, ge25519_base_multiples_affine[5 * pos + 0]);
    cmov_aff(t, ge25519_base_multiples_affine[5 * pos + 1], equal(b, 1) | equal(b, -1));
    cmov_aff(t, ge25519_base_multiples_affine[5 * pos + 2], equal(b, 2) | equal(b, -2));
    cmov_aff(t, ge25519_base_multiples_affine[5 * pos + 3], equal(b, 3) | equal(b, -3));
    cmov_aff(t, ge25519_base_multiples_affine[5 * pos + 4], equal(b, -4));
    fe.neg(v, t.x, arrFactory);
    fe.cmov(t.x, v, negative(b));
    arrFactory.recycle(v);
}
/**
 * Analog of setneutral in crypto_sign/ed25519/ref/ge25519.c
 */
function setneutral(r) {
    fe.setzero(r.x);
    fe.setone(r.y);
    fe.setone(r.z);
    fe.setzero(r.t);
}
function unpackneg_vartime(r, p, arrFactory) {
    var t = fe.make_fe25519(arrFactory);
    var chk = fe.make_fe25519(arrFactory);
    var num = fe.make_fe25519(arrFactory);
    var den = fe.make_fe25519(arrFactory);
    var den2 = fe.make_fe25519(arrFactory);
    var den4 = fe.make_fe25519(arrFactory);
    var den6 = fe.make_fe25519(arrFactory);
    fe.setone(r.z);
    var par = p[31] >>> 7;
    fe.unpack(r.y, p);
    fe.square(num, r.y, arrFactory); /* x = y^2 */
    fe.mul(den, num, ge25519_ecd, arrFactory); /* den = dy^2 */
    fe.sub(num, num, r.z, arrFactory); /* x = y^2-1 */
    fe.add(den, r.z, den); /* den = dy^2+1 */
    /* Computation of sqrt(num/den) */
    /* 1.: computation of num^((p-5)/8)*den^((7p-35)/8) = (num*den^7)^((p-5)/8) */
    fe.square(den2, den, arrFactory);
    fe.square(den4, den2, arrFactory);
    fe.mul(den6, den4, den2, arrFactory);
    fe.mul(t, den6, num, arrFactory);
    fe.mul(t, t, den, arrFactory);
    fe.pow2523(t, t, arrFactory);
    /* 2. computation of r->x = t * num * den^3 */
    fe.mul(t, t, num, arrFactory);
    fe.mul(t, t, den, arrFactory);
    fe.mul(t, t, den, arrFactory);
    fe.mul(r.x, t, den, arrFactory);
    /* 3. Check whether sqrt computation gave correct result, multiply by sqrt(-1) if not: */
    fe.square(chk, r.x, arrFactory);
    fe.mul(chk, chk, den, arrFactory);
    if (!fe.iseq_vartime(chk, num, arrFactory)) {
        fe.mul(r.x, r.x, ge25519_sqrtm1, arrFactory);
    }
    /* 4. Now we have one of the two square roots, except if input was not a square */
    fe.square(chk, r.x, arrFactory);
    fe.mul(chk, chk, den, arrFactory);
    if (!fe.iseq_vartime(chk, num, arrFactory)) {
        return false;
    }
    /* 5. Choose the desired square root according to parity: */
    if (fe.getparity(r.x, arrFactory) !== (1 - par)) {
        fe.neg(r.x, r.x, arrFactory);
    }
    fe.mul(r.t, r.x, r.y, arrFactory);
    arrFactory.recycle(t, chk, num, den, den2, den4, den6);
    return true;
}
exports.unpackneg_vartime = unpackneg_vartime;
function pack(r, p, arrFactory) {
    var tx = fe.make_fe25519(arrFactory);
    var ty = fe.make_fe25519(arrFactory);
    var zi = fe.make_fe25519(arrFactory);
    fe.invert(zi, p.z, arrFactory);
    fe.mul(tx, p.x, zi, arrFactory);
    fe.mul(ty, p.y, zi, arrFactory);
    fe.pack(r, ty, arrFactory);
    r[31] ^= fe.getparity(tx, arrFactory) << 7;
    arrFactory.recycle(tx, ty, zi);
}
exports.pack = pack;
function double_scalarmult_vartime(r, p1, s1, p2, s2, arF) {
    var tp1p1 = make_ge25519_p1p1(arF);
    var pre = new Array(16);
    for (var i = 0; i < 16; i += 1) {
        if ((i !== 1) || (i !== 4)) {
            pre[i] = make_ge25519_p3(arF);
        }
    }
    var b = arF.getUint8Array(127);
    /* precomputation                                                        s2 s1 */
    setneutral(pre[0]); /* 00 00 */
    pre[1] = p1; /* 00 01 */
    dbl_p1p1(tp1p1, p1, arF);
    p1p1_to_p3(pre[2], tp1p1, arF); /* 00 10 */
    add_p1p1(tp1p1, pre[1], pre[2], arF);
    p1p1_to_p3(pre[3], tp1p1, arF); /* 00 11 */
    pre[4] = p2; /* 01 00 */
    add_p1p1(tp1p1, pre[1], pre[4], arF);
    p1p1_to_p3(pre[5], tp1p1, arF); /* 01 01 */
    add_p1p1(tp1p1, pre[2], pre[4], arF);
    p1p1_to_p3(pre[6], tp1p1, arF); /* 01 10 */
    add_p1p1(tp1p1, pre[3], pre[4], arF);
    p1p1_to_p3(pre[7], tp1p1, arF); /* 01 11 */
    dbl_p1p1(tp1p1, p2, arF);
    p1p1_to_p3(pre[8], tp1p1, arF); /* 10 00 */
    add_p1p1(tp1p1, pre[1], pre[8], arF);
    p1p1_to_p3(pre[9], tp1p1, arF); /* 10 01 */
    dbl_p1p1(tp1p1, pre[5], arF);
    p1p1_to_p3(pre[10], tp1p1, arF); /* 10 10 */
    add_p1p1(tp1p1, pre[3], pre[8], arF);
    p1p1_to_p3(pre[11], tp1p1, arF); /* 10 11 */
    add_p1p1(tp1p1, pre[4], pre[8], arF);
    p1p1_to_p3(pre[12], tp1p1, arF); /* 11 00 */
    add_p1p1(tp1p1, pre[1], pre[12], arF);
    p1p1_to_p3(pre[13], tp1p1, arF); /* 11 01 */
    add_p1p1(tp1p1, pre[2], pre[12], arF);
    p1p1_to_p3(pre[14], tp1p1, arF); /* 11 10 */
    add_p1p1(tp1p1, pre[3], pre[12], arF);
    p1p1_to_p3(pre[15], tp1p1, arF); /* 11 11 */
    sc.interleave2(b, s1, s2);
    /* scalar multiplication */
    copy_ge25519_p3(r, pre[b[126]]);
    for (var i = 125; i >= 0; i -= 1) {
        dbl_p1p1(tp1p1, r, arF);
        p1p1_to_p2(r, tp1p1, arF);
        dbl_p1p1(tp1p1, r, arF);
        if (b[i] !== 0) {
            p1p1_to_p3(r, tp1p1, arF);
            add_p1p1(tp1p1, r, pre[b[i]], arF);
        }
        if (i !== 0) {
            p1p1_to_p2(r, tp1p1, arF);
        }
        else {
            p1p1_to_p3(r, tp1p1, arF);
        }
    }
    recycle_ge25519(arF, tp1p1);
    for (var i = 0; i < 16; i += 1) {
        if ((i !== 1) && (i !== 4)) {
            recycle_ge25519(arF, pre[i]);
        }
    }
    arF.recycle(b);
}
exports.double_scalarmult_vartime = double_scalarmult_vartime;
function scalarmult_base(r, s, arrFactory) {
    var b = new Int8Array(85);
    var t = ge_base.make_ge25519_aff(arrFactory);
    sc.window3(b, s);
    choose_t(r, 0, b[0], arrFactory);
    fe.setone(r.z);
    fe.mul(r.t, r.x, r.y, arrFactory);
    for (var i = 1; i < 85; i += 1) {
        choose_t(t, i, b[i], arrFactory);
        ge25519_mixadd2(r, t, arrFactory);
    }
    recycle_ge25519_aff(arrFactory, t);
}
exports.scalarmult_base = scalarmult_base;
Object.freeze(exports);

},{"../util/arrays":17,"./fe25519":12,"./ge25519_base.data":14,"./sc25519":15}],14:[function(require,module,exports){
/* Copyright(c) 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
/**
 * This whole file is an analogy of crypto_sign/ed25519/ref/ge25519_base.data
 * producing one big array with points.
 */
var fe = require('./fe25519');
var arrays = require('../util/arrays');
function make_ge25519_aff(arrFactory) {
    return {
        x: fe.make_fe25519(arrFactory),
        y: fe.make_fe25519(arrFactory)
    };
}
exports.make_ge25519_aff = make_ge25519_aff;
exports.base_multiples_affine = new Array(425);
(function () {
    var init_data = [
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x1a, 0xd5, 0x25, 0x8f, 0x60, 0x2d, 0x56, 0xc9, 0xb2, 0xa7, 0x25, 0x95, 0x60, 0xc7, 0x2c, 0x69, 0x5c, 0xdc, 0xd6, 0xfd, 0x31, 0xe2, 0xa4, 0xc0, 0xfe, 0x53, 0x6e, 0xcd, 0xd3, 0x36, 0x69, 0x21], [0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66]],
        [[0x0e, 0xce, 0x43, 0x28, 0x4e, 0xa1, 0xc5, 0x83, 0x5f, 0xa4, 0xd7, 0x15, 0x45, 0x8e, 0x0d, 0x08, 0xac, 0xe7, 0x33, 0x18, 0x7d, 0x3b, 0x04, 0x3d, 0x6c, 0x04, 0x5a, 0x9f, 0x4c, 0x38, 0xab, 0x36], [0xc9, 0xa3, 0xf8, 0x6a, 0xae, 0x46, 0x5f, 0x0e, 0x56, 0x51, 0x38, 0x64, 0x51, 0x0f, 0x39, 0x97, 0x56, 0x1f, 0xa2, 0xc9, 0xe8, 0x5e, 0xa2, 0x1d, 0xc2, 0x29, 0x23, 0x09, 0xf3, 0xcd, 0x60, 0x22]],
        [[0x5c, 0xe2, 0xf8, 0xd3, 0x5f, 0x48, 0x62, 0xac, 0x86, 0x48, 0x62, 0x81, 0x19, 0x98, 0x43, 0x63, 0x3a, 0xc8, 0xda, 0x3e, 0x74, 0xae, 0xf4, 0x1f, 0x49, 0x8f, 0x92, 0x22, 0x4a, 0x9c, 0xae, 0x67], [0xd4, 0xb4, 0xf5, 0x78, 0x48, 0x68, 0xc3, 0x02, 0x04, 0x03, 0x24, 0x67, 0x17, 0xec, 0x16, 0x9f, 0xf7, 0x9e, 0x26, 0x60, 0x8e, 0xa1, 0x26, 0xa1, 0xab, 0x69, 0xee, 0x77, 0xd1, 0xb1, 0x67, 0x12]],
        [[0x70, 0xf8, 0xc9, 0xc4, 0x57, 0xa6, 0x3a, 0x49, 0x47, 0x15, 0xce, 0x93, 0xc1, 0x9e, 0x73, 0x1a, 0xf9, 0x20, 0x35, 0x7a, 0xb8, 0xd4, 0x25, 0x83, 0x46, 0xf1, 0xcf, 0x56, 0xdb, 0xa8, 0x3d, 0x20], [0x2f, 0x11, 0x32, 0xca, 0x61, 0xab, 0x38, 0xdf, 0xf0, 0x0f, 0x2f, 0xea, 0x32, 0x28, 0xf2, 0x4c, 0x6c, 0x71, 0xd5, 0x80, 0x85, 0xb8, 0x0e, 0x47, 0xe1, 0x95, 0x15, 0xcb, 0x27, 0xe8, 0xd0, 0x47]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xc8, 0x84, 0xa5, 0x08, 0xbc, 0xfd, 0x87, 0x3b, 0x99, 0x8b, 0x69, 0x80, 0x7b, 0xc6, 0x3a, 0xeb, 0x93, 0xcf, 0x4e, 0xf8, 0x5c, 0x2d, 0x86, 0x42, 0xb6, 0x71, 0xd7, 0x97, 0x5f, 0xe1, 0x42, 0x67], [0xb4, 0xb9, 0x37, 0xfc, 0xa9, 0x5b, 0x2f, 0x1e, 0x93, 0xe4, 0x1e, 0x62, 0xfc, 0x3c, 0x78, 0x81, 0x8f, 0xf3, 0x8a, 0x66, 0x09, 0x6f, 0xad, 0x6e, 0x79, 0x73, 0xe5, 0xc9, 0x00, 0x06, 0xd3, 0x21]],
        [[0xf8, 0xf9, 0x28, 0x6c, 0x6d, 0x59, 0xb2, 0x59, 0x74, 0x23, 0xbf, 0xe7, 0x33, 0x8d, 0x57, 0x09, 0x91, 0x9c, 0x24, 0x08, 0x15, 0x2b, 0xe2, 0xb8, 0xee, 0x3a, 0xe5, 0x27, 0x06, 0x86, 0xa4, 0x23], [0xeb, 0x27, 0x67, 0xc1, 0x37, 0xab, 0x7a, 0xd8, 0x27, 0x9c, 0x07, 0x8e, 0xff, 0x11, 0x6a, 0xb0, 0x78, 0x6e, 0xad, 0x3a, 0x2e, 0x0f, 0x98, 0x9f, 0x72, 0xc3, 0x7f, 0x82, 0xf2, 0x96, 0x96, 0x70]],
        [[0x81, 0x6b, 0x88, 0xe8, 0x1e, 0xc7, 0x77, 0x96, 0x0e, 0xa1, 0xa9, 0x52, 0xe0, 0xd8, 0x0e, 0x61, 0x9e, 0x79, 0x2d, 0x95, 0x9c, 0x8d, 0x96, 0xe0, 0x06, 0x40, 0x5d, 0x87, 0x28, 0x5f, 0x98, 0x70], [0xf1, 0x79, 0x7b, 0xed, 0x4f, 0x44, 0xb2, 0xe7, 0x08, 0x0d, 0xc2, 0x08, 0x12, 0xd2, 0x9f, 0xdf, 0xcd, 0x93, 0x20, 0x8a, 0xcf, 0x33, 0xca, 0x6d, 0x89, 0xb9, 0x77, 0xc8, 0x93, 0x1b, 0x4e, 0x60]],
        [[0x26, 0x4f, 0x7e, 0x97, 0xf6, 0x40, 0xdd, 0x4f, 0xfc, 0x52, 0x78, 0xf9, 0x90, 0x31, 0x03, 0xe6, 0x7d, 0x56, 0x39, 0x0b, 0x1d, 0x56, 0x82, 0x85, 0xf9, 0x1a, 0x42, 0x17, 0x69, 0x6c, 0xcf, 0x39], [0x69, 0xd2, 0x06, 0x3a, 0x4f, 0x39, 0x2d, 0xf9, 0x38, 0x40, 0x8c, 0x4c, 0xe7, 0x05, 0x12, 0xb4, 0x78, 0x8b, 0xf8, 0xc0, 0xec, 0x93, 0xde, 0x7a, 0x6b, 0xce, 0x2c, 0xe1, 0x0e, 0xa9, 0x34, 0x44]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x0b, 0xa4, 0x3c, 0xb0, 0x0f, 0x7a, 0x51, 0xf1, 0x78, 0xd6, 0xd9, 0x6a, 0xfd, 0x46, 0xe8, 0xb8, 0xa8, 0x79, 0x1d, 0x87, 0xf9, 0x90, 0xf2, 0x9c, 0x13, 0x29, 0xf8, 0x0b, 0x20, 0x64, 0xfa, 0x05], [0x26, 0x09, 0xda, 0x17, 0xaf, 0x95, 0xd6, 0xfb, 0x6a, 0x19, 0x0d, 0x6e, 0x5e, 0x12, 0xf1, 0x99, 0x4c, 0xaa, 0xa8, 0x6f, 0x79, 0x86, 0xf4, 0x72, 0x28, 0x00, 0x26, 0xf9, 0xea, 0x9e, 0x19, 0x3d]],
        [[0x87, 0xdd, 0xcf, 0xf0, 0x5b, 0x49, 0xa2, 0x5d, 0x40, 0x7a, 0x23, 0x26, 0xa4, 0x7a, 0x83, 0x8a, 0xb7, 0x8b, 0xd2, 0x1a, 0xbf, 0xea, 0x02, 0x24, 0x08, 0x5f, 0x7b, 0xa9, 0xb1, 0xbe, 0x9d, 0x37], [0xfc, 0x86, 0x4b, 0x08, 0xee, 0xe7, 0xa0, 0xfd, 0x21, 0x45, 0x09, 0x34, 0xc1, 0x61, 0x32, 0x23, 0xfc, 0x9b, 0x55, 0x48, 0x53, 0x99, 0xf7, 0x63, 0xd0, 0x99, 0xce, 0x01, 0xe0, 0x9f, 0xeb, 0x28]],
        [[0x47, 0xfc, 0xab, 0x5a, 0x17, 0xf0, 0x85, 0x56, 0x3a, 0x30, 0x86, 0x20, 0x28, 0x4b, 0x8e, 0x44, 0x74, 0x3a, 0x6e, 0x02, 0xf1, 0x32, 0x8f, 0x9f, 0x3f, 0x08, 0x35, 0xe9, 0xca, 0x16, 0x5f, 0x6e], [0x1c, 0x59, 0x1c, 0x65, 0x5d, 0x34, 0xa4, 0x09, 0xcd, 0x13, 0x9c, 0x70, 0x7d, 0xb1, 0x2a, 0xc5, 0x88, 0xaf, 0x0b, 0x60, 0xc7, 0x9f, 0x34, 0x8d, 0xd6, 0xb7, 0x7f, 0xea, 0x78, 0x65, 0x8d, 0x77]],
        [[0x56, 0xa5, 0xc2, 0x0c, 0xdd, 0xbc, 0xb8, 0x20, 0x6d, 0x57, 0x61, 0xb5, 0xfb, 0x78, 0xb5, 0xd4, 0x49, 0x54, 0x90, 0x26, 0xc1, 0xcb, 0xe9, 0xe6, 0xbf, 0xec, 0x1d, 0x4e, 0xed, 0x07, 0x7e, 0x5e], [0xc7, 0xf6, 0x6c, 0x56, 0x31, 0x20, 0x14, 0x0e, 0xa8, 0xd9, 0x27, 0xc1, 0x9a, 0x3d, 0x1b, 0x7d, 0x0e, 0x26, 0xd3, 0x81, 0xaa, 0xeb, 0xf5, 0x6b, 0x79, 0x02, 0xf1, 0x51, 0x5c, 0x75, 0x55, 0x0f]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x0a, 0x34, 0xcd, 0x82, 0x3c, 0x33, 0x09, 0x54, 0xd2, 0x61, 0x39, 0x30, 0x9b, 0xfd, 0xef, 0x21, 0x26, 0xd4, 0x70, 0xfa, 0xee, 0xf9, 0x31, 0x33, 0x73, 0x84, 0xd0, 0xb3, 0x81, 0xbf, 0xec, 0x2e], [0xe8, 0x93, 0x8b, 0x00, 0x64, 0xf7, 0x9c, 0xb8, 0x74, 0xe0, 0xe6, 0x49, 0x48, 0x4d, 0x4d, 0x48, 0xb6, 0x19, 0xa1, 0x40, 0xb7, 0xd9, 0x32, 0x41, 0x7c, 0x82, 0x37, 0xa1, 0x2d, 0xdc, 0xd2, 0x54]],
        [[0x68, 0x2b, 0x4a, 0x5b, 0xd5, 0xc7, 0x51, 0x91, 0x1d, 0xe1, 0x2a, 0x4b, 0xc4, 0x47, 0xf1, 0xbc, 0x7a, 0xb3, 0xcb, 0xc8, 0xb6, 0x7c, 0xac, 0x90, 0x05, 0xfd, 0xf3, 0xf9, 0x52, 0x3a, 0x11, 0x6b], [0x3d, 0xc1, 0x27, 0xf3, 0x59, 0x43, 0x95, 0x90, 0xc5, 0x96, 0x79, 0xf5, 0xf4, 0x95, 0x65, 0x29, 0x06, 0x9c, 0x51, 0x05, 0x18, 0xda, 0xb8, 0x2e, 0x79, 0x7e, 0x69, 0x59, 0x71, 0x01, 0xeb, 0x1a]],
        [[0x15, 0x06, 0x49, 0xb6, 0x8a, 0x3c, 0xea, 0x2f, 0x34, 0x20, 0x14, 0xc3, 0xaa, 0xd6, 0xaf, 0x2c, 0x3e, 0xbd, 0x65, 0x20, 0xe2, 0x4d, 0x4b, 0x3b, 0xeb, 0x9f, 0x4a, 0xc3, 0xad, 0xa4, 0x3b, 0x60], [0xbc, 0x58, 0xe6, 0xc0, 0x95, 0x2a, 0x2a, 0x81, 0x9a, 0x7a, 0xf3, 0xd2, 0x06, 0xbe, 0x48, 0xbc, 0x0c, 0xc5, 0x46, 0xe0, 0x6a, 0xd4, 0xac, 0x0f, 0xd9, 0xcc, 0x82, 0x34, 0x2c, 0xaf, 0xdb, 0x1f]],
        [[0xf7, 0x17, 0x13, 0xbd, 0xfb, 0xbc, 0xd2, 0xec, 0x45, 0xb3, 0x15, 0x31, 0xe9, 0xaf, 0x82, 0x84, 0x3d, 0x28, 0xc6, 0xfc, 0x11, 0xf5, 0x41, 0xb5, 0x8b, 0xd3, 0x12, 0x76, 0x52, 0xe7, 0x1a, 0x3c], [0x4e, 0x36, 0x11, 0x07, 0xa2, 0x15, 0x20, 0x51, 0xc4, 0x2a, 0xc3, 0x62, 0x8b, 0x5e, 0x7f, 0xa6, 0x0f, 0xf9, 0x45, 0x85, 0x6c, 0x11, 0x86, 0xb7, 0x7e, 0xe5, 0xd7, 0xf9, 0xc3, 0x91, 0x1c, 0x05]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xea, 0xd6, 0xde, 0x29, 0x3a, 0x00, 0xb9, 0x02, 0x59, 0xcb, 0x26, 0xc4, 0xba, 0x99, 0xb1, 0x97, 0x2f, 0x8e, 0x00, 0x92, 0x26, 0x4f, 0x52, 0xeb, 0x47, 0x1b, 0x89, 0x8b, 0x24, 0xc0, 0x13, 0x7d], [0xd5, 0x20, 0x5b, 0x80, 0xa6, 0x80, 0x20, 0x95, 0xc3, 0xe9, 0x9f, 0x8e, 0x87, 0x9e, 0x1e, 0x9e, 0x7a, 0xc7, 0xcc, 0x75, 0x6c, 0xa5, 0xf1, 0x91, 0x1a, 0xa8, 0x01, 0x2c, 0xab, 0x76, 0xa9, 0x59]],
        [[0xde, 0xc9, 0xb1, 0x31, 0x10, 0x16, 0xaa, 0x35, 0x14, 0x6a, 0xd4, 0xb5, 0x34, 0x82, 0x71, 0xd2, 0x4a, 0x5d, 0x9a, 0x1f, 0x53, 0x26, 0x3c, 0xe5, 0x8e, 0x8d, 0x33, 0x7f, 0xff, 0xa9, 0xd5, 0x17], [0x89, 0xaf, 0xf6, 0xa4, 0x64, 0xd5, 0x10, 0xe0, 0x1d, 0xad, 0xef, 0x44, 0xbd, 0xda, 0x83, 0xac, 0x7a, 0xa8, 0xf0, 0x1c, 0x07, 0xf9, 0xc3, 0x43, 0x6c, 0x3f, 0xb7, 0xd3, 0x87, 0x22, 0x02, 0x73]],
        [[0x64, 0x1d, 0x49, 0x13, 0x2f, 0x71, 0xec, 0x69, 0x87, 0xd0, 0x42, 0xee, 0x13, 0xec, 0xe3, 0xed, 0x56, 0x7b, 0xbf, 0xbd, 0x8c, 0x2f, 0x7d, 0x7b, 0x9d, 0x28, 0xec, 0x8e, 0x76, 0x2f, 0x6f, 0x08], [0x22, 0xf5, 0x5f, 0x4d, 0x15, 0xef, 0xfc, 0x4e, 0x57, 0x03, 0x36, 0x89, 0xf0, 0xeb, 0x5b, 0x91, 0xd6, 0xe2, 0xca, 0x01, 0xa5, 0xee, 0x52, 0xec, 0xa0, 0x3c, 0x8f, 0x33, 0x90, 0x5a, 0x94, 0x72]],
        [[0x8a, 0x4b, 0xe7, 0x38, 0xbc, 0xda, 0xc2, 0xb0, 0x85, 0xe1, 0x4a, 0xfe, 0x2d, 0x44, 0x84, 0xcb, 0x20, 0x6b, 0x2d, 0xbf, 0x11, 0x9c, 0xd7, 0xbe, 0xd3, 0x3e, 0x5f, 0xbf, 0x68, 0xbc, 0xa8, 0x07], [0x01, 0x89, 0x28, 0x22, 0x6a, 0x78, 0xaa, 0x29, 0x03, 0xc8, 0x74, 0x95, 0x03, 0x3e, 0xdc, 0xbd, 0x07, 0x13, 0xa8, 0xa2, 0x20, 0x2d, 0xb3, 0x18, 0x70, 0x42, 0xfd, 0x7a, 0xc4, 0xd7, 0x49, 0x72]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x02, 0xff, 0x32, 0x2b, 0x5c, 0x93, 0x54, 0x32, 0xe8, 0x57, 0x54, 0x1a, 0x8b, 0x33, 0x60, 0x65, 0xd3, 0x67, 0xa4, 0xc1, 0x26, 0xc4, 0xa4, 0x34, 0x1f, 0x9b, 0xa7, 0xa9, 0xf4, 0xd9, 0x4f, 0x5b], [0x46, 0x8d, 0xb0, 0x33, 0x54, 0x26, 0x5b, 0x68, 0xdf, 0xbb, 0xc5, 0xec, 0xc2, 0xf9, 0x3c, 0x5a, 0x37, 0xc1, 0x8e, 0x27, 0x47, 0xaa, 0x49, 0x5a, 0xf8, 0xfb, 0x68, 0x04, 0x23, 0xd1, 0xeb, 0x40]],
        [[0x65, 0xa5, 0x11, 0x84, 0x8a, 0x67, 0x9d, 0x9e, 0xd1, 0x44, 0x68, 0x7a, 0x34, 0xe1, 0x9f, 0xa3, 0x54, 0xcd, 0x07, 0xca, 0x79, 0x1f, 0x54, 0x2f, 0x13, 0x70, 0x4e, 0xee, 0xa2, 0xfa, 0xe7, 0x5d], [0x36, 0xec, 0x54, 0xf8, 0xce, 0xe4, 0x85, 0xdf, 0xf6, 0x6f, 0x1d, 0x90, 0x08, 0xbc, 0xe8, 0xc0, 0x92, 0x2d, 0x43, 0x6b, 0x92, 0xa9, 0x8e, 0xab, 0x0a, 0x2e, 0x1c, 0x1e, 0x64, 0x23, 0x9f, 0x2c]],
        [[0xa7, 0xd6, 0x2e, 0xd5, 0xcc, 0xd4, 0xcb, 0x5a, 0x3b, 0xa7, 0xf9, 0x46, 0x03, 0x1d, 0xad, 0x2b, 0x34, 0x31, 0x90, 0x00, 0x46, 0x08, 0x82, 0x14, 0xc4, 0xe0, 0x9c, 0xf0, 0xe3, 0x55, 0x43, 0x31], [0x60, 0xd6, 0xdd, 0x78, 0xe6, 0xd4, 0x22, 0x42, 0x1f, 0x00, 0xf9, 0xb1, 0x6a, 0x63, 0xe2, 0x92, 0x59, 0xd1, 0x1a, 0xb7, 0x00, 0x54, 0x29, 0xc9, 0xc1, 0xf6, 0x6f, 0x7a, 0xc5, 0x3c, 0x5f, 0x65]],
        [[0x27, 0x4f, 0xd0, 0x72, 0xb1, 0x11, 0x14, 0x27, 0x15, 0x94, 0x48, 0x81, 0x7e, 0x74, 0xd8, 0x32, 0xd5, 0xd1, 0x11, 0x28, 0x60, 0x63, 0x36, 0x32, 0x37, 0xb5, 0x13, 0x1c, 0xa0, 0x37, 0xe3, 0x74], [0xf1, 0x25, 0x4e, 0x11, 0x96, 0x67, 0xe6, 0x1c, 0xc2, 0xb2, 0x53, 0xe2, 0xda, 0x85, 0xee, 0xb2, 0x9f, 0x59, 0xf3, 0xba, 0xbd, 0xfa, 0xcf, 0x6e, 0xf9, 0xda, 0xa4, 0xb3, 0x02, 0x8f, 0x64, 0x08]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x34, 0x94, 0xf2, 0x64, 0x54, 0x47, 0x37, 0x07, 0x40, 0x8a, 0x20, 0xba, 0x4a, 0x55, 0xd7, 0x3f, 0x47, 0xba, 0x25, 0x23, 0x14, 0xb0, 0x2c, 0xe8, 0x55, 0xa8, 0xa6, 0xef, 0x51, 0xbd, 0x6f, 0x6a], [0x71, 0xd6, 0x16, 0x76, 0xb2, 0x06, 0xea, 0x79, 0xf5, 0xc4, 0xc3, 0x52, 0x7e, 0x61, 0xd1, 0xe1, 0xad, 0x70, 0x78, 0x1d, 0x16, 0x11, 0xf8, 0x7c, 0x2b, 0xfc, 0x55, 0x9f, 0x52, 0xf8, 0xf5, 0x16]],
        [[0x34, 0x96, 0x9a, 0xf6, 0xc5, 0xe0, 0x14, 0x03, 0x24, 0x0e, 0x4c, 0xad, 0x9e, 0x9a, 0x70, 0x23, 0x96, 0xb2, 0xf1, 0x2e, 0x9d, 0xc3, 0x32, 0x9b, 0x54, 0xa5, 0x73, 0xde, 0x88, 0xb1, 0x3e, 0x24], [0xf6, 0xe2, 0x4c, 0x1f, 0x5b, 0xb2, 0xaf, 0x82, 0xa5, 0xcf, 0x81, 0x10, 0x04, 0xef, 0xdb, 0xa2, 0xcc, 0x24, 0xb2, 0x7e, 0x0b, 0x7a, 0xeb, 0x01, 0xd8, 0x52, 0xf4, 0x51, 0x89, 0x29, 0x79, 0x37]],
        [[0x74, 0xde, 0x12, 0xf3, 0x68, 0xb7, 0x66, 0xc3, 0xee, 0x68, 0xdc, 0x81, 0xb5, 0x55, 0x99, 0xab, 0xd9, 0x28, 0x63, 0x6d, 0x8b, 0x40, 0x69, 0x75, 0x6c, 0xcd, 0x5c, 0x2a, 0x7e, 0x32, 0x7b, 0x29], [0x02, 0xcc, 0x22, 0x74, 0x4d, 0x19, 0x07, 0xc0, 0xda, 0xb5, 0x76, 0x51, 0x2a, 0xaa, 0xa6, 0x0a, 0x5f, 0x26, 0xd4, 0xbc, 0xaf, 0x48, 0x88, 0x7f, 0x02, 0xbc, 0xf2, 0xe1, 0xcf, 0xe9, 0xdd, 0x15]],
        [[0xed, 0xb5, 0x9a, 0x8c, 0x9a, 0xdd, 0x27, 0xf4, 0x7f, 0x47, 0xd9, 0x52, 0xa7, 0xcd, 0x65, 0xa5, 0x31, 0x22, 0xed, 0xa6, 0x63, 0x5b, 0x80, 0x4a, 0xad, 0x4d, 0xed, 0xbf, 0xee, 0x49, 0xb3, 0x06], [0xf8, 0x64, 0x8b, 0x60, 0x90, 0xe9, 0xde, 0x44, 0x77, 0xb9, 0x07, 0x36, 0x32, 0xc2, 0x50, 0xf5, 0x65, 0xdf, 0x48, 0x4c, 0x37, 0xaa, 0x68, 0xab, 0x9a, 0x1f, 0x3e, 0xff, 0x89, 0x92, 0xa0, 0x07]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x7d, 0x4f, 0x9c, 0x19, 0xc0, 0x4a, 0x31, 0xec, 0xf9, 0xaa, 0xeb, 0xb2, 0x16, 0x9c, 0xa3, 0x66, 0x5f, 0xd1, 0xd4, 0xed, 0xb8, 0x92, 0x1c, 0xab, 0xda, 0xea, 0xd9, 0x57, 0xdf, 0x4c, 0x2a, 0x48], [0x4b, 0xb0, 0x4e, 0x6e, 0x11, 0x3b, 0x51, 0xbd, 0x6a, 0xfd, 0xe4, 0x25, 0xa5, 0x5f, 0x11, 0x3f, 0x98, 0x92, 0x51, 0x14, 0xc6, 0x5f, 0x3c, 0x0b, 0xa8, 0xf7, 0xc2, 0x81, 0x43, 0xde, 0x91, 0x73]],
        [[0x3c, 0x8f, 0x9f, 0x33, 0x2a, 0x1f, 0x43, 0x33, 0x8f, 0x68, 0xff, 0x1f, 0x3d, 0x73, 0x6b, 0xbf, 0x68, 0xcc, 0x7d, 0x13, 0x6c, 0x24, 0x4b, 0xcc, 0x4d, 0x24, 0x0d, 0xfe, 0xde, 0x86, 0xad, 0x3b], [0x79, 0x51, 0x81, 0x01, 0xdc, 0x73, 0x53, 0xe0, 0x6e, 0x9b, 0xea, 0x68, 0x3f, 0x5c, 0x14, 0x84, 0x53, 0x8d, 0x4b, 0xc0, 0x9f, 0x9f, 0x89, 0x2b, 0x8c, 0xba, 0x86, 0xfa, 0xf2, 0xcd, 0xe3, 0x2d]],
        [[0x06, 0xf9, 0x29, 0x5a, 0xdb, 0x3d, 0x84, 0x52, 0xab, 0xcc, 0x6b, 0x60, 0x9d, 0xb7, 0x4a, 0x0e, 0x36, 0x63, 0x91, 0xad, 0xa0, 0x95, 0xb0, 0x97, 0x89, 0x4e, 0xcf, 0x7d, 0x3c, 0xe5, 0x7c, 0x28], [0x2e, 0x69, 0x98, 0xfd, 0xc6, 0xbd, 0xcc, 0xca, 0xdf, 0x9a, 0x44, 0x7e, 0x9d, 0xca, 0x89, 0x6d, 0xbf, 0x27, 0xc2, 0xf8, 0xcd, 0x46, 0x00, 0x2b, 0xb5, 0x58, 0x4e, 0xb7, 0x89, 0x09, 0xe9, 0x2d]],
        [[0x54, 0xbe, 0x75, 0xcb, 0x05, 0xb0, 0x54, 0xb7, 0xe7, 0x26, 0x86, 0x4a, 0xfc, 0x19, 0xcf, 0x27, 0x46, 0xd4, 0x22, 0x96, 0x5a, 0x11, 0xe8, 0xd5, 0x1b, 0xed, 0x71, 0xc5, 0x5d, 0xc8, 0xaf, 0x45], [0x40, 0x7b, 0x77, 0x57, 0x49, 0x9e, 0x80, 0x39, 0x23, 0xee, 0x81, 0x0b, 0x22, 0xcf, 0xdb, 0x7a, 0x2f, 0x14, 0xb8, 0x57, 0x8f, 0xa1, 0x39, 0x1e, 0x77, 0xfc, 0x0b, 0xa6, 0xbf, 0x8a, 0x0c, 0x6c]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x77, 0x3a, 0xd4, 0xd8, 0x27, 0xcf, 0xe8, 0xa1, 0x72, 0x9d, 0xca, 0xdd, 0x0d, 0x96, 0xda, 0x79, 0xed, 0x56, 0x42, 0x15, 0x60, 0xc7, 0x1c, 0x6b, 0x26, 0x30, 0xf6, 0x6a, 0x95, 0x67, 0xf3, 0x0a], [0xc5, 0x08, 0xa4, 0x2b, 0x2f, 0xbd, 0x31, 0x81, 0x2a, 0xa6, 0xb6, 0xe4, 0x00, 0x91, 0xda, 0x3d, 0xb2, 0xb0, 0x96, 0xce, 0x8a, 0xd2, 0x8d, 0x70, 0xb3, 0xd3, 0x34, 0x01, 0x90, 0x8d, 0x10, 0x21]],
        [[0x33, 0x0d, 0xe7, 0xba, 0x4f, 0x07, 0xdf, 0x8d, 0xea, 0x7d, 0xa0, 0xc5, 0xd6, 0xb1, 0xb0, 0xe5, 0x57, 0x1b, 0x5b, 0xf5, 0x45, 0x13, 0x14, 0x64, 0x5a, 0xeb, 0x5c, 0xfc, 0x54, 0x01, 0x76, 0x2b], [0x02, 0x0c, 0xc2, 0xaf, 0x96, 0x36, 0xfe, 0x4a, 0xe2, 0x54, 0x20, 0x6a, 0xeb, 0xb2, 0x9f, 0x62, 0xd7, 0xce, 0xa2, 0x3f, 0x20, 0x11, 0x34, 0x37, 0xe0, 0x42, 0xed, 0x6f, 0xf9, 0x1a, 0xc8, 0x7d]],
        [[0xd8, 0xb9, 0x11, 0xe8, 0x36, 0x3f, 0x42, 0xc1, 0xca, 0xdc, 0xd3, 0xf1, 0xc8, 0x23, 0x3d, 0x4f, 0x51, 0x7b, 0x9d, 0x8d, 0xd8, 0xe4, 0xa0, 0xaa, 0xf3, 0x04, 0xd6, 0x11, 0x93, 0xc8, 0x35, 0x45], [0x61, 0x36, 0xd6, 0x08, 0x90, 0xbf, 0xa7, 0x7a, 0x97, 0x6c, 0x0f, 0x84, 0xd5, 0x33, 0x2d, 0x37, 0xc9, 0x6a, 0x80, 0x90, 0x3d, 0x0a, 0xa2, 0xaa, 0xe1, 0xb8, 0x84, 0xba, 0x61, 0x36, 0xdd, 0x69]],
        [[0x6b, 0xdb, 0x5b, 0x9c, 0xc6, 0x92, 0xbc, 0x23, 0xaf, 0xc5, 0xb8, 0x75, 0xf8, 0x42, 0xfa, 0xd6, 0xb6, 0x84, 0x94, 0x63, 0x98, 0x93, 0x48, 0x78, 0x38, 0xcd, 0xbb, 0x18, 0x34, 0xc3, 0xdb, 0x67], [0x96, 0xf3, 0x3a, 0x09, 0x56, 0xb0, 0x6f, 0x7c, 0x51, 0x1e, 0x1b, 0x39, 0x48, 0xea, 0xc9, 0x0c, 0x25, 0xa2, 0x7a, 0xca, 0xe7, 0x92, 0xfc, 0x59, 0x30, 0xa3, 0x89, 0x85, 0xdf, 0x6f, 0x43, 0x38]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x79, 0x84, 0x44, 0x19, 0xbd, 0xe9, 0x54, 0xc4, 0xc0, 0x6e, 0x2a, 0xa8, 0xa8, 0x9b, 0x43, 0xd5, 0x71, 0x22, 0x5f, 0xdc, 0x01, 0xfa, 0xdf, 0xb3, 0xb8, 0x47, 0x4b, 0x0a, 0xa5, 0x44, 0xea, 0x29], [0x05, 0x90, 0x50, 0xaf, 0x63, 0x5f, 0x9d, 0x9e, 0xe1, 0x9d, 0x38, 0x97, 0x1f, 0x6c, 0xac, 0x30, 0x46, 0xb2, 0x6a, 0x19, 0xd1, 0x4b, 0xdb, 0xbb, 0x8c, 0xda, 0x2e, 0xab, 0xc8, 0x5a, 0x77, 0x6c]],
        [[0x2b, 0xbe, 0xaf, 0xa1, 0x6d, 0x2f, 0x0b, 0xb1, 0x8f, 0xe3, 0xe0, 0x38, 0xcd, 0x0b, 0x41, 0x1b, 0x4a, 0x15, 0x07, 0xf3, 0x6f, 0xdc, 0xb8, 0xe9, 0xde, 0xb2, 0xa3, 0x40, 0x01, 0xa6, 0x45, 0x1e], [0x76, 0x0a, 0xda, 0x8d, 0x2c, 0x07, 0x3f, 0x89, 0x7d, 0x04, 0xad, 0x43, 0x50, 0x6e, 0xd2, 0x47, 0xcb, 0x8a, 0xe6, 0x85, 0x1a, 0x24, 0xf3, 0xd2, 0x60, 0xfd, 0xdf, 0x73, 0xa4, 0x0d, 0x73, 0x0e]],
        [[0xfd, 0x67, 0x6b, 0x71, 0x9b, 0x81, 0x53, 0x39, 0x39, 0xf4, 0xb8, 0xd5, 0xc3, 0x30, 0x9b, 0x3b, 0x7c, 0xa3, 0xf0, 0xd0, 0x84, 0x21, 0xd6, 0xbf, 0xb7, 0x4c, 0x87, 0x13, 0x45, 0x2d, 0xa7, 0x55], [0x5d, 0x04, 0xb3, 0x40, 0x28, 0x95, 0x2d, 0x30, 0x83, 0xec, 0x5e, 0xe4, 0xff, 0x75, 0xfe, 0x79, 0x26, 0x9d, 0x1d, 0x36, 0xcd, 0x0a, 0x15, 0xd2, 0x24, 0x14, 0x77, 0x71, 0xd7, 0x8a, 0x1b, 0x04]],
        [[0x5d, 0x93, 0xc9, 0xbe, 0xaa, 0x90, 0xcd, 0x9b, 0xfb, 0x73, 0x7e, 0xb0, 0x64, 0x98, 0x57, 0x44, 0x42, 0x41, 0xb1, 0xaf, 0xea, 0xc1, 0xc3, 0x22, 0xff, 0x60, 0x46, 0xcb, 0x61, 0x81, 0x70, 0x61], [0x0d, 0x82, 0xb9, 0xfe, 0x21, 0xcd, 0xc4, 0xf5, 0x98, 0x0c, 0x4e, 0x72, 0xee, 0x87, 0x49, 0xf8, 0xa1, 0x95, 0xdf, 0x8f, 0x2d, 0xbd, 0x21, 0x06, 0x7c, 0x15, 0xe8, 0x12, 0x6d, 0x93, 0xd6, 0x38]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x91, 0xf7, 0x51, 0xd9, 0xef, 0x7d, 0x42, 0x01, 0x13, 0xe9, 0xb8, 0x7f, 0xa6, 0x49, 0x17, 0x64, 0x21, 0x80, 0x83, 0x2c, 0x63, 0x4c, 0x60, 0x09, 0x59, 0x91, 0x92, 0x77, 0x39, 0x51, 0xf4, 0x48], [0x60, 0xd5, 0x22, 0x83, 0x08, 0x2f, 0xff, 0x99, 0x3e, 0x69, 0x6d, 0x88, 0xda, 0xe7, 0x5b, 0x52, 0x26, 0x31, 0x2a, 0xe5, 0x89, 0xde, 0x68, 0x90, 0xb6, 0x22, 0x5a, 0xbd, 0xd3, 0x85, 0x53, 0x31]],
        [[0xd8, 0xce, 0xdc, 0xf9, 0x3c, 0x4b, 0xa2, 0x1d, 0x2c, 0x2f, 0x36, 0xbe, 0x7a, 0xfc, 0xcd, 0xbc, 0xdc, 0xf9, 0x30, 0xbd, 0xff, 0x05, 0xc7, 0xe4, 0x8e, 0x17, 0x62, 0xf8, 0x4d, 0xa0, 0x56, 0x79], [0x82, 0xe7, 0xf6, 0xba, 0x53, 0x84, 0x0a, 0xa3, 0x34, 0xff, 0x3c, 0xa3, 0x6a, 0xa1, 0x37, 0xea, 0xdd, 0xb6, 0x95, 0xb3, 0x78, 0x19, 0x76, 0x1e, 0x55, 0x2f, 0x77, 0x2e, 0x7f, 0xc1, 0xea, 0x5e]],
        [[0x83, 0xe1, 0x6e, 0xa9, 0x07, 0x33, 0x3e, 0x83, 0xff, 0xcb, 0x1c, 0x9f, 0xb1, 0xa3, 0xb4, 0xc9, 0xe1, 0x07, 0x97, 0xff, 0xf8, 0x23, 0x8f, 0xce, 0x40, 0xfd, 0x2e, 0x5e, 0xdb, 0x16, 0x43, 0x2d], [0xba, 0x38, 0x02, 0xf7, 0x81, 0x43, 0x83, 0xa3, 0x20, 0x4f, 0x01, 0x3b, 0x8a, 0x04, 0x38, 0x31, 0xc6, 0x0f, 0xc8, 0xdf, 0xd7, 0xfa, 0x2f, 0x88, 0x3f, 0xfc, 0x0c, 0x76, 0xc4, 0xa6, 0x45, 0x72]],
        [[0xbb, 0x0c, 0xbc, 0x6a, 0xa4, 0x97, 0x17, 0x93, 0x2d, 0x6f, 0xde, 0x72, 0x10, 0x1c, 0x08, 0x2c, 0x0f, 0x80, 0x32, 0x68, 0x27, 0xd4, 0xab, 0xdd, 0xc5, 0x58, 0x61, 0x13, 0x6d, 0x11, 0x1e, 0x4d], [0x1a, 0xb9, 0xc9, 0x10, 0xfb, 0x1e, 0x4e, 0xf4, 0x84, 0x4b, 0x8a, 0x5e, 0x7b, 0x4b, 0xe8, 0x43, 0x8c, 0x8f, 0x00, 0xb5, 0x54, 0x13, 0xc5, 0x5c, 0xb6, 0x35, 0x4e, 0x9d, 0xe4, 0x5b, 0x41, 0x6d]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x15, 0x7d, 0x12, 0x48, 0x82, 0x14, 0x42, 0xcd, 0x32, 0xd4, 0x4b, 0xc1, 0x72, 0x61, 0x2a, 0x8c, 0xec, 0xe2, 0xf8, 0x24, 0x45, 0x94, 0xe3, 0xbe, 0xdd, 0x67, 0xa8, 0x77, 0x5a, 0xae, 0x5b, 0x4b], [0xcb, 0x77, 0x9a, 0x20, 0xde, 0xb8, 0x23, 0xd9, 0xa0, 0x0f, 0x8c, 0x7b, 0xa5, 0xcb, 0xae, 0xb6, 0xec, 0x42, 0x67, 0x0e, 0x58, 0xa4, 0x75, 0x98, 0x21, 0x71, 0x84, 0xb3, 0xe0, 0x76, 0x94, 0x73]],
        [[0xdf, 0xfc, 0x69, 0x28, 0x23, 0x3f, 0x5b, 0xf8, 0x3b, 0x24, 0x37, 0xf3, 0x1d, 0xd5, 0x22, 0x6b, 0xd0, 0x98, 0xa8, 0x6c, 0xcf, 0xff, 0x06, 0xe1, 0x13, 0xdf, 0xb9, 0xc1, 0x0c, 0xa9, 0xbf, 0x33], [0xd9, 0x81, 0xda, 0xb2, 0x4f, 0x82, 0x9d, 0x43, 0x81, 0x09, 0xf1, 0xd2, 0x01, 0xef, 0xac, 0xf4, 0x2d, 0x7d, 0x01, 0x09, 0xf1, 0xff, 0xa5, 0x9f, 0xe5, 0xca, 0x27, 0x63, 0xdb, 0x20, 0xb1, 0x53]],
        [[0x67, 0x02, 0xe8, 0xad, 0xa9, 0x34, 0xd4, 0xf0, 0x15, 0x81, 0xaa, 0xc7, 0x4d, 0x87, 0x94, 0xea, 0x75, 0xe7, 0x4c, 0x94, 0x04, 0x0e, 0x69, 0x87, 0xe7, 0x51, 0x91, 0x10, 0x03, 0xc7, 0xbe, 0x56], [0x32, 0xfb, 0x86, 0xec, 0x33, 0x6b, 0x2e, 0x51, 0x2b, 0xc8, 0xfa, 0x6c, 0x70, 0x47, 0x7e, 0xce, 0x05, 0x0c, 0x71, 0xf3, 0xb4, 0x56, 0xa6, 0xdc, 0xcc, 0x78, 0x07, 0x75, 0xd0, 0xdd, 0xb2, 0x6a]],
        [[0xc6, 0xef, 0xb9, 0xc0, 0x2b, 0x22, 0x08, 0x1e, 0x71, 0x70, 0xb3, 0x35, 0x9c, 0x7a, 0x01, 0x92, 0x44, 0x9a, 0xf6, 0xb0, 0x58, 0x95, 0xc1, 0x9b, 0x02, 0xed, 0x2d, 0x7c, 0x34, 0x29, 0x49, 0x44], [0x45, 0x62, 0x1d, 0x2e, 0xff, 0x2a, 0x1c, 0x21, 0xa4, 0x25, 0x7b, 0x0d, 0x8c, 0x15, 0x39, 0xfc, 0x8f, 0x7c, 0xa5, 0x7d, 0x1e, 0x25, 0xa3, 0x45, 0xd6, 0xab, 0xbd, 0xcb, 0xc5, 0x5e, 0x78, 0x77]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xd0, 0xd3, 0x42, 0xed, 0x1d, 0x00, 0x3c, 0x15, 0x2c, 0x9c, 0x77, 0x81, 0xd2, 0x73, 0xd1, 0x06, 0xd5, 0xc4, 0x7f, 0x94, 0xbb, 0x92, 0x2d, 0x2c, 0x4b, 0x45, 0x4b, 0xe9, 0x2a, 0x89, 0x6b, 0x2b], [0xd2, 0x0c, 0x88, 0xc5, 0x48, 0x4d, 0xea, 0x0d, 0x4a, 0xc9, 0x52, 0x6a, 0x61, 0x79, 0xe9, 0x76, 0xf3, 0x85, 0x52, 0x5c, 0x1b, 0x2c, 0xe1, 0xd6, 0xc4, 0x0f, 0x18, 0x0e, 0x4e, 0xf6, 0x1c, 0x7f]],
        [[0xb4, 0x04, 0x2e, 0x42, 0xcb, 0x1f, 0x2b, 0x11, 0x51, 0x7b, 0x08, 0xac, 0xaa, 0x3e, 0x9e, 0x52, 0x60, 0xb7, 0xc2, 0x61, 0x57, 0x8c, 0x84, 0xd5, 0x18, 0xa6, 0x19, 0xfc, 0xb7, 0x75, 0x91, 0x1b], [0xe8, 0x68, 0xca, 0x44, 0xc8, 0x38, 0x38, 0xcc, 0x53, 0x0a, 0x32, 0x35, 0xcc, 0x52, 0xcb, 0x0e, 0xf7, 0xc5, 0xe7, 0xec, 0x3d, 0x85, 0xcc, 0x58, 0xe2, 0x17, 0x47, 0xff, 0x9f, 0xa5, 0x30, 0x17]],
        [[0xe3, 0xae, 0xc8, 0xc1, 0x71, 0x75, 0x31, 0x00, 0x37, 0x41, 0x5c, 0x0e, 0x39, 0xda, 0x73, 0xa0, 0xc7, 0x97, 0x36, 0x6c, 0x5b, 0xf2, 0xee, 0x64, 0x0a, 0x3d, 0x89, 0x1e, 0x1d, 0x49, 0x8c, 0x37], [0x4c, 0xe6, 0xb0, 0xc1, 0xa5, 0x2a, 0x82, 0x09, 0x08, 0xad, 0x79, 0x9c, 0x56, 0xf6, 0xf9, 0xc1, 0xd7, 0x7c, 0x39, 0x7f, 0x93, 0xca, 0x11, 0x55, 0xbf, 0x07, 0x1b, 0x82, 0x29, 0x69, 0x95, 0x5c]],
        [[0x87, 0xee, 0xa6, 0x56, 0x9e, 0xc2, 0x9a, 0x56, 0x24, 0x42, 0x85, 0x4d, 0x98, 0x31, 0x1e, 0x60, 0x4d, 0x87, 0x85, 0x04, 0xae, 0x46, 0x12, 0xf9, 0x8e, 0x7f, 0xe4, 0x7f, 0xf6, 0x1c, 0x37, 0x01], [0x73, 0x4c, 0xb6, 0xc5, 0xc4, 0xe9, 0x6c, 0x85, 0x48, 0x4a, 0x5a, 0xac, 0xd9, 0x1f, 0x43, 0xf8, 0x62, 0x5b, 0xee, 0x98, 0x2a, 0x33, 0x8e, 0x79, 0xce, 0x61, 0x06, 0x35, 0xd8, 0xd7, 0xca, 0x71]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x72, 0xd3, 0xae, 0xa6, 0xca, 0x8f, 0xcd, 0xcc, 0x78, 0x8e, 0x19, 0x4d, 0xa7, 0xd2, 0x27, 0xe9, 0xa4, 0x3c, 0x16, 0x5b, 0x84, 0x80, 0xf9, 0xd0, 0xcc, 0x6a, 0x1e, 0xca, 0x1e, 0x67, 0xbd, 0x63], [0x7b, 0x6e, 0x2a, 0xd2, 0x87, 0x48, 0xff, 0xa1, 0xca, 0xe9, 0x15, 0x85, 0xdc, 0xdb, 0x2c, 0x39, 0x12, 0x91, 0xa9, 0x20, 0xaa, 0x4f, 0x29, 0xf4, 0x15, 0x7a, 0xd2, 0xf5, 0x32, 0xcc, 0x60, 0x04]],
        [[0xe5, 0x10, 0x47, 0x3b, 0xfa, 0x90, 0xfc, 0x30, 0xb5, 0xea, 0x6f, 0x56, 0x8f, 0xfb, 0x0e, 0xa7, 0x3b, 0xc8, 0xb2, 0xff, 0x02, 0x7a, 0x33, 0x94, 0x93, 0x2a, 0x03, 0xe0, 0x96, 0x3a, 0x6c, 0x0f], [0x5a, 0x63, 0x67, 0xe1, 0x9b, 0x47, 0x78, 0x9f, 0x38, 0x79, 0xac, 0x97, 0x66, 0x1d, 0x5e, 0x51, 0xee, 0x24, 0x42, 0xe8, 0x58, 0x4b, 0x8a, 0x03, 0x75, 0x86, 0x37, 0x86, 0xe2, 0x97, 0x4e, 0x3d]],
        [[0x3f, 0x75, 0x8e, 0xb4, 0xff, 0xd8, 0xdd, 0xd6, 0x37, 0x57, 0x9d, 0x6d, 0x3b, 0xbd, 0xd5, 0x60, 0x88, 0x65, 0x9a, 0xb9, 0x4a, 0x68, 0x84, 0xa2, 0x67, 0xdd, 0x17, 0x25, 0x97, 0x04, 0x8b, 0x5e], [0xbb, 0x40, 0x5e, 0xbc, 0x16, 0x92, 0x05, 0xc4, 0xc0, 0x4e, 0x72, 0x90, 0x0e, 0xab, 0xcf, 0x8a, 0xed, 0xef, 0xb9, 0x2d, 0x3b, 0xf8, 0x43, 0x5b, 0xba, 0x2d, 0xeb, 0x2f, 0x52, 0xd2, 0xd1, 0x5a]],
        [[0x40, 0xb4, 0xab, 0xe6, 0xad, 0x9f, 0x46, 0x69, 0x4a, 0xb3, 0x8e, 0xaa, 0xea, 0x9c, 0x8a, 0x20, 0x16, 0x5d, 0x8c, 0x13, 0xbd, 0xf6, 0x1d, 0xc5, 0x24, 0xbd, 0x90, 0x2a, 0x1c, 0xc7, 0x13, 0x3b], [0x54, 0xdc, 0x16, 0x0d, 0x18, 0xbe, 0x35, 0x64, 0x61, 0x52, 0x02, 0x80, 0xaf, 0x05, 0xf7, 0xa6, 0x42, 0xd3, 0x8f, 0x2e, 0x79, 0x26, 0xa8, 0xbb, 0xb2, 0x17, 0x48, 0xb2, 0x7a, 0x0a, 0x89, 0x14]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x20, 0xa8, 0x88, 0xe3, 0x91, 0xc0, 0x6e, 0xbb, 0x8a, 0x27, 0x82, 0x51, 0x83, 0xb2, 0x28, 0xa9, 0x83, 0xeb, 0xa6, 0xa9, 0x4d, 0x17, 0x59, 0x22, 0x54, 0x00, 0x50, 0x45, 0xcb, 0x48, 0x4b, 0x18], [0x33, 0x7c, 0xe7, 0x26, 0xba, 0x4d, 0x32, 0xfe, 0x53, 0xf4, 0xfa, 0x83, 0xe3, 0xa5, 0x79, 0x66, 0x73, 0xef, 0x80, 0x23, 0x68, 0xc2, 0x60, 0xdd, 0xa9, 0x33, 0xdc, 0x03, 0x7a, 0xe0, 0xe0, 0x3e]],
        [[0x34, 0x5c, 0x13, 0xfb, 0xc0, 0xe3, 0x78, 0x2b, 0x54, 0x58, 0x22, 0x9b, 0x76, 0x81, 0x7f, 0x93, 0x9c, 0x25, 0x3c, 0xd2, 0xe9, 0x96, 0x21, 0x26, 0x08, 0xf5, 0xed, 0x95, 0x11, 0xae, 0x04, 0x5a], [0xb9, 0xe8, 0xc5, 0x12, 0x97, 0x1f, 0x83, 0xfe, 0x3e, 0x94, 0x99, 0xd4, 0x2d, 0xf9, 0x52, 0x59, 0x5c, 0x82, 0xa6, 0xf0, 0x75, 0x7e, 0xe8, 0xec, 0xcc, 0xac, 0x18, 0x21, 0x09, 0x67, 0x66, 0x67]],
        [[0xb3, 0x40, 0x29, 0xd1, 0xcb, 0x1b, 0x08, 0x9e, 0x9c, 0xb7, 0x53, 0xb9, 0x3b, 0x71, 0x08, 0x95, 0x12, 0x1a, 0x58, 0xaf, 0x7e, 0x82, 0x52, 0x43, 0x4f, 0x11, 0x39, 0xf4, 0x93, 0x1a, 0x26, 0x05], [0x6e, 0x44, 0xa3, 0xf9, 0x64, 0xaf, 0xe7, 0x6d, 0x7d, 0xdf, 0x1e, 0xac, 0x04, 0xea, 0x3b, 0x5f, 0x9b, 0xe8, 0x24, 0x9d, 0x0e, 0xe5, 0x2e, 0x3e, 0xdf, 0xa9, 0xf7, 0xd4, 0x50, 0x71, 0xf0, 0x78]],
        [[0x3e, 0xa8, 0x38, 0xc2, 0x57, 0x56, 0x42, 0x9a, 0xb1, 0xe2, 0xf8, 0x45, 0xaa, 0x11, 0x48, 0x5f, 0x17, 0xc4, 0x54, 0x27, 0xdc, 0x5d, 0xaa, 0xdd, 0x41, 0xbc, 0xdf, 0x81, 0xb9, 0x53, 0xee, 0x52], [0xc3, 0xf1, 0xa7, 0x6d, 0xb3, 0x5f, 0x92, 0x6f, 0xcc, 0x91, 0xb8, 0x95, 0x05, 0xdf, 0x3c, 0x64, 0x57, 0x39, 0x61, 0x51, 0xad, 0x8c, 0x38, 0x7b, 0xc8, 0xde, 0x00, 0x34, 0xbe, 0xa1, 0xb0, 0x7e]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x25, 0x24, 0x1d, 0x8a, 0x67, 0x20, 0xee, 0x42, 0xeb, 0x38, 0xed, 0x0b, 0x8b, 0xcd, 0x46, 0x9d, 0x5e, 0x6b, 0x1e, 0x24, 0x9d, 0x12, 0x05, 0x1a, 0xcc, 0x05, 0x4e, 0x92, 0x38, 0xe1, 0x1f, 0x50], [0x4e, 0xee, 0x1c, 0x91, 0xe6, 0x11, 0xbd, 0x8e, 0x55, 0x1a, 0x18, 0x75, 0x66, 0xaf, 0x4d, 0x7b, 0x0f, 0xae, 0x6d, 0x85, 0xca, 0x82, 0x58, 0x21, 0x9c, 0x18, 0xe0, 0xed, 0xec, 0x22, 0x80, 0x2f]],
        [[0x68, 0x3b, 0x0a, 0x39, 0x1d, 0x6a, 0x15, 0x57, 0xfc, 0xf0, 0x63, 0x54, 0xdb, 0x39, 0xdb, 0xe8, 0x5c, 0x64, 0xff, 0xa0, 0x09, 0x4f, 0x3b, 0xb7, 0x32, 0x60, 0x99, 0x94, 0xfd, 0x94, 0x82, 0x2d], [0x24, 0xf6, 0x5a, 0x44, 0xf1, 0x55, 0x2c, 0xdb, 0xea, 0x7c, 0x84, 0x7c, 0x01, 0xac, 0xe3, 0xfd, 0xc9, 0x27, 0xc1, 0x5a, 0xb9, 0xde, 0x4f, 0x5a, 0x90, 0xdd, 0xc6, 0x67, 0xaa, 0x6f, 0x8a, 0x3a]],
        [[0x78, 0x52, 0x87, 0xc9, 0x97, 0x63, 0xb1, 0xdd, 0x54, 0x5f, 0xc1, 0xf8, 0xf1, 0x06, 0xa6, 0xa8, 0xa3, 0x88, 0x82, 0xd4, 0xcb, 0xa6, 0x19, 0xdd, 0xd1, 0x11, 0x87, 0x08, 0x17, 0x4c, 0x37, 0x2a], [0xa1, 0x0c, 0xf3, 0x08, 0x43, 0xd9, 0x24, 0x1e, 0x83, 0xa7, 0xdf, 0x91, 0xca, 0xbd, 0x69, 0x47, 0x8d, 0x1b, 0xe2, 0xb9, 0x4e, 0xb5, 0xe1, 0x76, 0xb3, 0x1c, 0x93, 0x03, 0xce, 0x5f, 0xb3, 0x5a]],
        [[0x1d, 0xda, 0xe4, 0x61, 0x03, 0x50, 0xa9, 0x8b, 0x68, 0x18, 0xef, 0xb2, 0x1c, 0x84, 0x3b, 0xa2, 0x44, 0x95, 0xa3, 0x04, 0x3b, 0xd6, 0x99, 0x00, 0xaf, 0x76, 0x42, 0x67, 0x02, 0x7d, 0x85, 0x56], [0xce, 0x72, 0x0e, 0x29, 0x84, 0xb2, 0x7d, 0xd2, 0x45, 0xbe, 0x57, 0x06, 0xed, 0x7f, 0xcf, 0xed, 0xcd, 0xef, 0x19, 0xd6, 0xbc, 0x15, 0x79, 0x64, 0xd2, 0x18, 0xe3, 0x20, 0x67, 0x3a, 0x54, 0x0b]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x52, 0xfd, 0x04, 0xc5, 0xfb, 0x99, 0xe7, 0xe8, 0xfb, 0x8c, 0xe1, 0x42, 0x03, 0xef, 0x9d, 0xd9, 0x9e, 0x4d, 0xf7, 0x80, 0xcf, 0x2e, 0xcc, 0x9b, 0x45, 0xc9, 0x7b, 0x7a, 0xbc, 0x37, 0xa8, 0x52], [0x96, 0x11, 0x41, 0x8a, 0x47, 0x91, 0xfe, 0xb6, 0xda, 0x7a, 0x54, 0x63, 0xd1, 0x14, 0x35, 0x05, 0x86, 0x8c, 0xa9, 0x36, 0x3f, 0xf2, 0x85, 0x54, 0x4e, 0x92, 0xd8, 0x85, 0x01, 0x46, 0xd6, 0x50]],
        [[0x53, 0xcd, 0xf3, 0x86, 0x40, 0xe6, 0x39, 0x42, 0x95, 0xd6, 0xcb, 0x45, 0x1a, 0x20, 0xc8, 0x45, 0x4b, 0x32, 0x69, 0x04, 0xb1, 0xaf, 0x20, 0x46, 0xc7, 0x6b, 0x23, 0x5b, 0x69, 0xee, 0x30, 0x3f], [0x70, 0x83, 0x47, 0xc0, 0xdb, 0x55, 0x08, 0xa8, 0x7b, 0x18, 0x6d, 0xf5, 0x04, 0x5a, 0x20, 0x0c, 0x4a, 0x8c, 0x60, 0xae, 0xae, 0x0f, 0x64, 0x55, 0x55, 0x2e, 0xd5, 0x1d, 0x53, 0x31, 0x42, 0x41]],
        [[0xca, 0xfc, 0x88, 0x6b, 0x96, 0x78, 0x0a, 0x8b, 0x83, 0xdc, 0xbc, 0xaf, 0x40, 0xb6, 0x8d, 0x7f, 0xef, 0xb4, 0xd1, 0x3f, 0xcc, 0xa2, 0x74, 0xc9, 0xc2, 0x92, 0x55, 0x00, 0xab, 0xdb, 0xbf, 0x4f], [0x93, 0x1c, 0x06, 0x2d, 0x66, 0x65, 0x02, 0xa4, 0x97, 0x18, 0xfd, 0x00, 0xe7, 0xab, 0x03, 0xec, 0xce, 0xc1, 0xbf, 0x37, 0xf8, 0x13, 0x53, 0xa5, 0xe5, 0x0c, 0x3a, 0xa8, 0x55, 0xb9, 0xff, 0x68]],
        [[0xe4, 0xe6, 0x6d, 0x30, 0x7d, 0x30, 0x35, 0xc2, 0x78, 0x87, 0xf9, 0xfc, 0x6b, 0x5a, 0xc3, 0xb7, 0x65, 0xd8, 0x2e, 0xc7, 0xa5, 0x0c, 0xc6, 0xdc, 0x12, 0xaa, 0xd6, 0x4f, 0xc5, 0x38, 0xbc, 0x0e], [0xe2, 0x3c, 0x76, 0x86, 0x38, 0xf2, 0x7b, 0x2c, 0x16, 0x78, 0x8d, 0xf5, 0xa4, 0x15, 0xda, 0xdb, 0x26, 0x85, 0xa0, 0x56, 0xdd, 0x1d, 0xe3, 0xb3, 0xfd, 0x40, 0xef, 0xf2, 0xd9, 0xa1, 0xb3, 0x04]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xdb, 0x49, 0x0e, 0xe6, 0x58, 0x10, 0x7a, 0x52, 0xda, 0xb5, 0x7d, 0x37, 0x6a, 0x3e, 0xa1, 0x78, 0xce, 0xc7, 0x1c, 0x24, 0x23, 0xdb, 0x7d, 0xfb, 0x8c, 0x8d, 0xdc, 0x30, 0x67, 0x69, 0x75, 0x3b], [0xa9, 0xea, 0x6d, 0x16, 0x16, 0x60, 0xf4, 0x60, 0x87, 0x19, 0x44, 0x8c, 0x4a, 0x8b, 0x3e, 0xfb, 0x16, 0x00, 0x00, 0x54, 0xa6, 0x9e, 0x9f, 0xef, 0xcf, 0xd9, 0xd2, 0x4c, 0x74, 0x31, 0xd0, 0x34]],
        [[0xa4, 0xeb, 0x04, 0xa4, 0x8c, 0x8f, 0x71, 0x27, 0x95, 0x85, 0x5d, 0x55, 0x4b, 0xb1, 0x26, 0x26, 0xc8, 0xae, 0x6a, 0x7d, 0xa2, 0x21, 0xca, 0xce, 0x38, 0xab, 0x0f, 0xd0, 0xd5, 0x2b, 0x6b, 0x00], [0xe5, 0x67, 0x0c, 0xf1, 0x3a, 0x9a, 0xea, 0x09, 0x39, 0xef, 0xd1, 0x30, 0xbc, 0x33, 0xba, 0xb1, 0x6a, 0xc5, 0x27, 0x08, 0x7f, 0x54, 0x80, 0x3d, 0xab, 0xf6, 0x15, 0x7a, 0xc2, 0x40, 0x73, 0x72]],
        [[0x84, 0x56, 0x82, 0xb6, 0x12, 0x70, 0x7f, 0xf7, 0xf0, 0xbd, 0x5b, 0xa9, 0xd5, 0xc5, 0x5f, 0x59, 0xbf, 0x7f, 0xb3, 0x55, 0x22, 0x02, 0xc9, 0x44, 0x55, 0x87, 0x8f, 0x96, 0x98, 0x64, 0x6d, 0x15], [0xb0, 0x8b, 0xaa, 0x1e, 0xec, 0xc7, 0xa5, 0x8f, 0x1f, 0x92, 0x04, 0xc6, 0x05, 0xf6, 0xdf, 0xa1, 0xcc, 0x1f, 0x81, 0xf5, 0x0e, 0x9c, 0x57, 0xdc, 0xe3, 0xbb, 0x06, 0x87, 0x1e, 0xfe, 0x23, 0x6c]],
        [[0xd8, 0x2b, 0x5b, 0x16, 0xea, 0x20, 0xf1, 0xd3, 0x68, 0x8f, 0xae, 0x5b, 0xd0, 0xa9, 0x1a, 0x19, 0xa8, 0x36, 0xfb, 0x2b, 0x57, 0x88, 0x7d, 0x90, 0xd5, 0xa6, 0xf3, 0xdc, 0x38, 0x89, 0x4e, 0x1f], [0xcc, 0x19, 0xda, 0x9b, 0x3b, 0x43, 0x48, 0x21, 0x2e, 0x23, 0x4d, 0x3d, 0xae, 0xf8, 0x8c, 0xfc, 0xdd, 0xa6, 0x74, 0x37, 0x65, 0xca, 0xee, 0x1a, 0x19, 0x8e, 0x9f, 0x64, 0x6f, 0x0c, 0x8b, 0x5a]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x25, 0xb9, 0xc2, 0xf0, 0x72, 0xb8, 0x15, 0x16, 0xcc, 0x8d, 0x3c, 0x6f, 0x25, 0xed, 0xf4, 0x46, 0x2e, 0x0c, 0x60, 0x0f, 0xe2, 0x84, 0x34, 0x55, 0x89, 0x59, 0x34, 0x1b, 0xf5, 0x8d, 0xfe, 0x08], [0xf8, 0xab, 0x93, 0xbc, 0x44, 0xba, 0x1b, 0x75, 0x4b, 0x49, 0x6f, 0xd0, 0x54, 0x2e, 0x63, 0xba, 0xb5, 0xea, 0xed, 0x32, 0x14, 0xc9, 0x94, 0xd8, 0xc5, 0xce, 0xf4, 0x10, 0x68, 0xe0, 0x38, 0x27]],
        [[0x74, 0x1c, 0x14, 0x9b, 0xd4, 0x64, 0x61, 0x71, 0x5a, 0xb6, 0x21, 0x33, 0x4f, 0xf7, 0x8e, 0xba, 0xa5, 0x48, 0x9a, 0xc7, 0xfa, 0x9a, 0xf0, 0xb4, 0x62, 0xad, 0xf2, 0x5e, 0xcc, 0x03, 0x24, 0x1a], [0xf5, 0x76, 0xfd, 0xe4, 0xaf, 0xb9, 0x03, 0x59, 0xce, 0x63, 0xd2, 0x3b, 0x1f, 0xcd, 0x21, 0x0c, 0xad, 0x44, 0xa5, 0x97, 0xac, 0x80, 0x11, 0x02, 0x9b, 0x0c, 0xe5, 0x8b, 0xcd, 0xfb, 0x79, 0x77]],
        [[0x15, 0xbe, 0x9a, 0x0d, 0xba, 0x38, 0x72, 0x20, 0x8a, 0xf5, 0xbe, 0x59, 0x93, 0x79, 0xb7, 0xf6, 0x6a, 0x0c, 0x38, 0x27, 0x1a, 0x60, 0xf4, 0x86, 0x3b, 0xab, 0x5a, 0x00, 0xa0, 0xce, 0x21, 0x7d], [0x6c, 0xba, 0x14, 0xc5, 0xea, 0x12, 0x9e, 0x2e, 0x82, 0x63, 0xce, 0x9b, 0x4a, 0xe7, 0x1d, 0xec, 0xf1, 0x2e, 0x51, 0x1c, 0xf4, 0xd0, 0x69, 0x15, 0x42, 0x9d, 0xa3, 0x3f, 0x0e, 0xbf, 0xe9, 0x5c]],
        [[0xe4, 0x0d, 0xf4, 0xbd, 0xee, 0x31, 0x10, 0xed, 0xcb, 0x12, 0x86, 0xad, 0xd4, 0x2f, 0x90, 0x37, 0x32, 0xc3, 0x0b, 0x73, 0xec, 0x97, 0x85, 0xa4, 0x01, 0x1c, 0x76, 0x35, 0xfe, 0x75, 0xdd, 0x71], [0x11, 0xa4, 0x88, 0x9f, 0x3e, 0x53, 0x69, 0x3b, 0x1b, 0xe0, 0xf7, 0xba, 0x9b, 0xad, 0x4e, 0x81, 0x5f, 0xb5, 0x5c, 0xae, 0xbe, 0x67, 0x86, 0x37, 0x34, 0x8e, 0x07, 0x32, 0x45, 0x4a, 0x67, 0x39]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x90, 0x70, 0x58, 0x20, 0x03, 0x1e, 0x67, 0xb2, 0xc8, 0x9b, 0x58, 0xc5, 0xb1, 0xeb, 0x2d, 0x4a, 0xde, 0x82, 0x8c, 0xf2, 0xd2, 0x14, 0xb8, 0x70, 0x61, 0x4e, 0x73, 0xd6, 0x0b, 0x6b, 0x0d, 0x30], [0x81, 0xfc, 0x55, 0x5c, 0xbf, 0xa7, 0xc4, 0xbd, 0xe2, 0xf0, 0x4b, 0x8f, 0xe9, 0x7d, 0x99, 0xfa, 0xd3, 0xab, 0xbc, 0xc7, 0x83, 0x2b, 0x04, 0x7f, 0x0c, 0x19, 0x43, 0x03, 0x3d, 0x07, 0xca, 0x40]],
        [[0xf9, 0xc8, 0xbe, 0x8c, 0x16, 0x81, 0x39, 0x96, 0xf6, 0x17, 0x58, 0xc8, 0x30, 0x58, 0xfb, 0xc2, 0x03, 0x45, 0xd2, 0x52, 0x76, 0xe0, 0x6a, 0x26, 0x28, 0x5c, 0x88, 0x59, 0x6a, 0x5a, 0x54, 0x42], [0x07, 0xb5, 0x2e, 0x2c, 0x67, 0x15, 0x9b, 0xfb, 0x83, 0x69, 0x1e, 0x0f, 0xda, 0xd6, 0x29, 0xb1, 0x60, 0xe0, 0xb2, 0xba, 0x69, 0xa2, 0x9e, 0xbd, 0xbd, 0xe0, 0x1c, 0xbd, 0xcd, 0x06, 0x64, 0x70]],
        [[0x41, 0xfa, 0x8c, 0xe1, 0x89, 0x8f, 0x27, 0xc8, 0x25, 0x8f, 0x6f, 0x5f, 0x55, 0xf8, 0xde, 0x95, 0x6d, 0x2f, 0x75, 0x16, 0x2b, 0x4e, 0x44, 0xfd, 0x86, 0x6e, 0xe9, 0x70, 0x39, 0x76, 0x97, 0x7e], [0x17, 0x62, 0x6b, 0x14, 0xa1, 0x7c, 0xd0, 0x79, 0x6e, 0xd8, 0x8a, 0xa5, 0x6d, 0x8c, 0x93, 0xd2, 0x3f, 0xec, 0x44, 0x8d, 0x6e, 0x91, 0x01, 0x8c, 0x8f, 0xee, 0x01, 0x8f, 0xc0, 0xb4, 0x85, 0x0e]],
        [[0x02, 0x3a, 0x70, 0x41, 0xe4, 0x11, 0x57, 0x23, 0xac, 0xe6, 0xfc, 0x54, 0x7e, 0xcd, 0xd7, 0x22, 0xcb, 0x76, 0x9f, 0x20, 0xce, 0xa0, 0x73, 0x76, 0x51, 0x3b, 0xa4, 0xf8, 0xe3, 0x62, 0x12, 0x6c], [0x7f, 0x00, 0x9c, 0x26, 0x0d, 0x6f, 0x48, 0x7f, 0x3a, 0x01, 0xed, 0xc5, 0x96, 0xb0, 0x1f, 0x4f, 0xa8, 0x02, 0x62, 0x27, 0x8a, 0x50, 0x8d, 0x9a, 0x8b, 0x52, 0x0f, 0x1e, 0xcf, 0x41, 0x38, 0x19]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xf5, 0x6c, 0xd4, 0x2f, 0x0f, 0x69, 0x0f, 0x87, 0x3f, 0x61, 0x65, 0x1e, 0x35, 0x34, 0x85, 0xba, 0x02, 0x30, 0xac, 0x25, 0x3d, 0xe2, 0x62, 0xf1, 0xcc, 0xe9, 0x1b, 0xc2, 0xef, 0x6a, 0x42, 0x57], [0x34, 0x1f, 0x2e, 0xac, 0xd1, 0xc7, 0x04, 0x52, 0x32, 0x66, 0xb2, 0x33, 0x73, 0x21, 0x34, 0x54, 0xf7, 0x71, 0xed, 0x06, 0xb0, 0xff, 0xa6, 0x59, 0x6f, 0x8a, 0x4e, 0xfb, 0x02, 0xb0, 0x45, 0x6b]],
        [[0xf5, 0x48, 0x0b, 0x03, 0xc5, 0x22, 0x7d, 0x80, 0x08, 0x53, 0xfe, 0x32, 0xb1, 0xa1, 0x8a, 0x74, 0x6f, 0xbd, 0x3f, 0x85, 0xf4, 0xcf, 0xf5, 0x60, 0xaf, 0x41, 0x7e, 0x3e, 0x46, 0xa3, 0x5a, 0x20], [0xaa, 0x35, 0x87, 0x44, 0x63, 0x66, 0x97, 0xf8, 0x6e, 0x55, 0x0c, 0x04, 0x3e, 0x35, 0x50, 0xbf, 0x93, 0x69, 0xd2, 0x8b, 0x05, 0x55, 0x99, 0xbe, 0xe2, 0x53, 0x61, 0xec, 0xe8, 0x08, 0x0b, 0x32]],
        [[0xb3, 0x10, 0x45, 0x02, 0x69, 0x59, 0x2e, 0x97, 0xd9, 0x64, 0xf8, 0xdb, 0x25, 0x80, 0xdc, 0xc4, 0xd5, 0x62, 0x3c, 0xed, 0x65, 0x91, 0xad, 0xd1, 0x57, 0x81, 0x94, 0xaa, 0xa1, 0x29, 0xfc, 0x68], [0xdd, 0xb5, 0x7d, 0xab, 0x5a, 0x21, 0x41, 0x53, 0xbb, 0x17, 0x79, 0x0d, 0xd1, 0xa8, 0x0c, 0x0c, 0x20, 0x88, 0x09, 0xe9, 0x84, 0xe8, 0x25, 0x11, 0x67, 0x7a, 0x8b, 0x1a, 0xe4, 0x5d, 0xe1, 0x5d]],
        [[0x37, 0xea, 0xfe, 0x65, 0x3b, 0x25, 0xe8, 0xe1, 0xc2, 0xc5, 0x02, 0xa4, 0xbe, 0x98, 0x0a, 0x2b, 0x61, 0xc1, 0x9b, 0xe2, 0xd5, 0x92, 0xe6, 0x9e, 0x7d, 0x1f, 0xca, 0x43, 0x88, 0x8b, 0x2c, 0x59], [0xe0, 0xb5, 0x00, 0x1d, 0x2a, 0x6f, 0xaf, 0x79, 0x86, 0x2f, 0xa6, 0x5a, 0x93, 0xd1, 0xfe, 0xae, 0x3a, 0xee, 0xdb, 0x7c, 0x61, 0xbe, 0x7c, 0x01, 0xf9, 0xfe, 0x52, 0xdc, 0xd8, 0x52, 0xa3, 0x42]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x22, 0xaf, 0x13, 0x37, 0xbd, 0x37, 0x71, 0xac, 0x04, 0x46, 0x63, 0xac, 0xa4, 0x77, 0xed, 0x25, 0x38, 0xe0, 0x15, 0xa8, 0x64, 0x00, 0x0d, 0xce, 0x51, 0x01, 0xa9, 0xbc, 0x0f, 0x03, 0x1c, 0x04], [0x89, 0xf9, 0x80, 0x07, 0xcf, 0x3f, 0xb3, 0xe9, 0xe7, 0x45, 0x44, 0x3d, 0x2a, 0x7c, 0xe9, 0xe4, 0x16, 0x5c, 0x5e, 0x65, 0x1c, 0xc7, 0x7d, 0xc6, 0x7a, 0xfb, 0x43, 0xee, 0x25, 0x76, 0x46, 0x72]],
        [[0x02, 0xa2, 0xed, 0xf4, 0x8f, 0x6b, 0x0b, 0x3e, 0xeb, 0x35, 0x1a, 0xd5, 0x7e, 0xdb, 0x78, 0x00, 0x96, 0x8a, 0xa0, 0xb4, 0xcf, 0x60, 0x4b, 0xd4, 0xd5, 0xf9, 0x2d, 0xbf, 0x88, 0xbd, 0x22, 0x62], [0x13, 0x53, 0xe4, 0x82, 0x57, 0xfa, 0x1e, 0x8f, 0x06, 0x2b, 0x90, 0xba, 0x08, 0xb6, 0x10, 0x54, 0x4f, 0x7c, 0x1b, 0x26, 0xed, 0xda, 0x6b, 0xdd, 0x25, 0xd0, 0x4e, 0xea, 0x42, 0xbb, 0x25, 0x03]],
        [[0x51, 0x16, 0x50, 0x7c, 0xd5, 0x5d, 0xf6, 0x99, 0xe8, 0x77, 0x72, 0x4e, 0xfa, 0x62, 0xcb, 0x76, 0x75, 0x0c, 0xe2, 0x71, 0x98, 0x92, 0xd5, 0xfa, 0x45, 0xdf, 0x5c, 0x6f, 0x1e, 0x9e, 0x28, 0x69], [0x0d, 0xac, 0x66, 0x6d, 0xc3, 0x8b, 0xba, 0x16, 0xb5, 0xe2, 0xa0, 0x0d, 0x0c, 0xbd, 0xa4, 0x8e, 0x18, 0x6c, 0xf2, 0xdc, 0xf9, 0xdc, 0x4a, 0x86, 0x25, 0x95, 0x14, 0xcb, 0xd8, 0x1a, 0x04, 0x0f]],
        [[0x97, 0xa5, 0xdb, 0x8b, 0x2d, 0xaa, 0x42, 0x11, 0x09, 0xf2, 0x93, 0xbb, 0xd9, 0x06, 0x84, 0x4e, 0x11, 0xa8, 0xa0, 0x25, 0x2b, 0xa6, 0x5f, 0xae, 0xc4, 0xb4, 0x4c, 0xc8, 0xab, 0xc7, 0x3b, 0x02], [0xee, 0xc9, 0x29, 0x0f, 0xdf, 0x11, 0x85, 0xed, 0xce, 0x0d, 0x62, 0x2c, 0x8f, 0x4b, 0xf9, 0x04, 0xe9, 0x06, 0x72, 0x1d, 0x37, 0x20, 0x50, 0xc9, 0x14, 0xeb, 0xec, 0x39, 0xa7, 0x97, 0x2b, 0x4d]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x69, 0xd1, 0x39, 0xbd, 0xfb, 0x33, 0xbe, 0xc4, 0xf0, 0x5c, 0xef, 0xf0, 0x56, 0x68, 0xfc, 0x97, 0x47, 0xc8, 0x72, 0xb6, 0x53, 0xa4, 0x0a, 0x98, 0xa5, 0xb4, 0x37, 0x71, 0xcf, 0x66, 0x50, 0x6d], [0x17, 0xa4, 0x19, 0x52, 0x11, 0x47, 0xb3, 0x5c, 0x5b, 0xa9, 0x2e, 0x22, 0xb4, 0x00, 0x52, 0xf9, 0x57, 0x18, 0xb8, 0xbe, 0x5a, 0xe3, 0xab, 0x83, 0xc8, 0x87, 0x0a, 0x2a, 0xd8, 0x8c, 0xbb, 0x54]],
        [[0xa9, 0x62, 0x93, 0x85, 0xbe, 0xe8, 0x73, 0x4a, 0x0e, 0xb0, 0xb5, 0x2d, 0x94, 0x50, 0xaa, 0xd3, 0xb2, 0xea, 0x9d, 0x62, 0x76, 0x3b, 0x07, 0x34, 0x4e, 0x2d, 0x70, 0xc8, 0x9a, 0x15, 0x66, 0x6b], [0xc5, 0x96, 0xca, 0xc8, 0x22, 0x1a, 0xee, 0x5f, 0xe7, 0x31, 0x60, 0x22, 0x83, 0x08, 0x63, 0xce, 0xb9, 0x32, 0x44, 0x58, 0x5d, 0x3a, 0x9b, 0xe4, 0x04, 0xd5, 0xef, 0x38, 0xef, 0x4b, 0xdd, 0x19]],
        [[0x4d, 0xc2, 0x17, 0x75, 0xa1, 0x68, 0xcd, 0xc3, 0xc6, 0x03, 0x44, 0xe3, 0x78, 0x09, 0x91, 0x47, 0x3f, 0x0f, 0xe4, 0x92, 0x58, 0xfa, 0x7d, 0x1f, 0x20, 0x94, 0x58, 0x5e, 0xbc, 0x19, 0x02, 0x6f], [0x20, 0xd6, 0xd8, 0x91, 0x54, 0xa7, 0xf3, 0x20, 0x4b, 0x34, 0x06, 0xfa, 0x30, 0xc8, 0x6f, 0x14, 0x10, 0x65, 0x74, 0x13, 0x4e, 0xf0, 0x69, 0x26, 0xce, 0xcf, 0x90, 0xf4, 0xd0, 0xc5, 0xc8, 0x64]],
        [[0x26, 0xa2, 0x50, 0x02, 0x24, 0x72, 0xf1, 0xf0, 0x4e, 0x2d, 0x93, 0xd5, 0x08, 0xe7, 0xae, 0x38, 0xf7, 0x18, 0xa5, 0x32, 0x34, 0xc2, 0xf0, 0xa6, 0xec, 0xb9, 0x61, 0x7b, 0x64, 0x99, 0xac, 0x71], [0x25, 0xcf, 0x74, 0x55, 0x1b, 0xaa, 0xa9, 0x38, 0x41, 0x40, 0xd5, 0x95, 0x95, 0xab, 0x1c, 0x5e, 0xbc, 0x41, 0x7e, 0x14, 0x30, 0xbe, 0x13, 0x89, 0xf4, 0xe5, 0xeb, 0x28, 0xc0, 0xc2, 0x96, 0x3a]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x2b, 0x77, 0x45, 0xec, 0x67, 0x76, 0x32, 0x4c, 0xb9, 0xdf, 0x25, 0x32, 0x6b, 0xcb, 0xe7, 0x14, 0x61, 0x43, 0xee, 0xba, 0x9b, 0x71, 0xef, 0xd2, 0x48, 0x65, 0xbb, 0x1b, 0x8a, 0x13, 0x1b, 0x22], [0x84, 0xad, 0x0c, 0x18, 0x38, 0x5a, 0xba, 0xd0, 0x98, 0x59, 0xbf, 0x37, 0xb0, 0x4f, 0x97, 0x60, 0x20, 0xb3, 0x9b, 0x97, 0xf6, 0x08, 0x6c, 0xa4, 0xff, 0xfb, 0xb7, 0xfa, 0x95, 0xb2, 0x51, 0x79]],
        [[0x28, 0x5c, 0x3f, 0xdb, 0x6b, 0x18, 0x3b, 0x5c, 0xd1, 0x04, 0x28, 0xde, 0x85, 0x52, 0x31, 0xb5, 0xbb, 0xf6, 0xa9, 0xed, 0xbe, 0x28, 0x4f, 0xb3, 0x7e, 0x05, 0x6a, 0xdb, 0x95, 0x0d, 0x1b, 0x1c], [0xd5, 0xc5, 0xc3, 0x9a, 0x0a, 0xd0, 0x31, 0x3e, 0x07, 0x36, 0x8e, 0xc0, 0x8a, 0x62, 0xb1, 0xca, 0xd6, 0x0e, 0x1e, 0x9d, 0xef, 0xab, 0x98, 0x4d, 0xbb, 0x6c, 0x05, 0xe0, 0xe4, 0x5d, 0xbd, 0x57]],
        [[0xcc, 0x21, 0x27, 0xce, 0xfd, 0xa9, 0x94, 0x8e, 0xe1, 0xab, 0x49, 0xe0, 0x46, 0x26, 0xa1, 0xa8, 0x8c, 0xa1, 0x99, 0x1d, 0xb4, 0x27, 0x6d, 0x2d, 0xc8, 0x39, 0x30, 0x5e, 0x37, 0x52, 0xc4, 0x6e], [0xa9, 0x85, 0xf4, 0xe7, 0xb0, 0x15, 0x33, 0x84, 0x1b, 0x14, 0x1a, 0x02, 0xd9, 0x3b, 0xad, 0x0f, 0x43, 0x6c, 0xea, 0x3e, 0x0f, 0x7e, 0xda, 0xdd, 0x6b, 0x4c, 0x7f, 0x6e, 0xd4, 0x6b, 0xbf, 0x0f]],
        [[0x47, 0x9f, 0x7c, 0x56, 0x7c, 0x43, 0x91, 0x1c, 0xbb, 0x4e, 0x72, 0x3e, 0x64, 0xab, 0xa0, 0xa0, 0xdf, 0xb4, 0xd8, 0x87, 0x3a, 0xbd, 0xa8, 0x48, 0xc9, 0xb8, 0xef, 0x2e, 0xad, 0x6f, 0x84, 0x4f], [0x2d, 0x2d, 0xf0, 0x1b, 0x7e, 0x2a, 0x6c, 0xf8, 0xa9, 0x6a, 0xe1, 0xf0, 0x99, 0xa1, 0x67, 0x9a, 0xd4, 0x13, 0xca, 0xca, 0xba, 0x27, 0x92, 0xaa, 0xa1, 0x5d, 0x50, 0xde, 0xcc, 0x40, 0x26, 0x0a]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x9f, 0x3e, 0xf2, 0xb2, 0x90, 0xce, 0xdb, 0x64, 0x3e, 0x03, 0xdd, 0x37, 0x36, 0x54, 0x70, 0x76, 0x24, 0xb5, 0x69, 0x03, 0xfc, 0xa0, 0x2b, 0x74, 0xb2, 0x05, 0x0e, 0xcc, 0xd8, 0x1f, 0x6a, 0x1f], [0x19, 0x5e, 0x60, 0x69, 0x58, 0x86, 0xa0, 0x31, 0xbd, 0x32, 0xe9, 0x2c, 0x5c, 0xd2, 0x85, 0xba, 0x40, 0x64, 0xa8, 0x74, 0xf8, 0x0e, 0x1c, 0xb3, 0xa9, 0x69, 0xe8, 0x1e, 0x40, 0x64, 0x99, 0x77]],
        [[0x6c, 0x32, 0x4f, 0xfd, 0xbb, 0x5c, 0xbb, 0x8d, 0x64, 0x66, 0x4a, 0x71, 0x1f, 0x79, 0xa3, 0xad, 0x8d, 0xf9, 0xd4, 0xec, 0xcf, 0x67, 0x70, 0xfa, 0x05, 0x4a, 0x0f, 0x6e, 0xaf, 0x87, 0x0a, 0x6f], [0xc6, 0x36, 0x6e, 0x6c, 0x8c, 0x24, 0x09, 0x60, 0xbe, 0x26, 0xd2, 0x4c, 0x5e, 0x17, 0xca, 0x5f, 0x1d, 0xcc, 0x87, 0xe8, 0x42, 0x6a, 0xcb, 0xcb, 0x7d, 0x92, 0x05, 0x35, 0x81, 0x13, 0x60, 0x6b]],
        [[0xf4, 0x15, 0xcd, 0x0f, 0x0a, 0xaf, 0x4e, 0x6b, 0x51, 0xfd, 0x14, 0xc4, 0x2e, 0x13, 0x86, 0x74, 0x44, 0xcb, 0x66, 0x6b, 0xb6, 0x9d, 0x74, 0x56, 0x32, 0xac, 0x8d, 0x8e, 0x8c, 0x8c, 0x8c, 0x39], [0xca, 0x59, 0x74, 0x1a, 0x11, 0xef, 0x6d, 0xf7, 0x39, 0x5c, 0x3b, 0x1f, 0xfa, 0xe3, 0x40, 0x41, 0x23, 0x9e, 0xf6, 0xd1, 0x21, 0xa2, 0xbf, 0xad, 0x65, 0x42, 0x6b, 0x59, 0x8a, 0xe8, 0xc5, 0x7f]],
        [[0x64, 0x05, 0x7a, 0x84, 0x4a, 0x13, 0xc3, 0xf6, 0xb0, 0x6e, 0x9a, 0x6b, 0x53, 0x6b, 0x32, 0xda, 0xd9, 0x74, 0x75, 0xc4, 0xba, 0x64, 0x3d, 0x3b, 0x08, 0xdd, 0x10, 0x46, 0xef, 0xc7, 0x90, 0x1f], [0x7b, 0x2f, 0x3a, 0xce, 0xc8, 0xa1, 0x79, 0x3c, 0x30, 0x12, 0x44, 0x28, 0xf6, 0xbc, 0xff, 0xfd, 0xf4, 0xc0, 0x97, 0xb0, 0xcc, 0xc3, 0x13, 0x7a, 0xb9, 0x9a, 0x16, 0xe4, 0xcb, 0x4c, 0x34, 0x63]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x07, 0x4e, 0xd3, 0x2d, 0x09, 0x33, 0x0e, 0xd2, 0x0d, 0xbe, 0x3e, 0xe7, 0xe4, 0xaa, 0xb7, 0x00, 0x8b, 0xe8, 0xad, 0xaa, 0x7a, 0x8d, 0x34, 0x28, 0xa9, 0x81, 0x94, 0xc5, 0xe7, 0x42, 0xac, 0x47], [0x24, 0x89, 0x7a, 0x8f, 0xb5, 0x9b, 0xf0, 0xc2, 0x03, 0x64, 0xd0, 0x1e, 0xf5, 0xa4, 0xb2, 0xf3, 0x74, 0xe9, 0x1a, 0x16, 0xfd, 0xcb, 0x15, 0xea, 0xeb, 0x10, 0x6c, 0x35, 0xd1, 0xc1, 0xa6, 0x28]],
        [[0xcc, 0xd5, 0x39, 0xfc, 0xa5, 0xa4, 0xad, 0x32, 0x15, 0xce, 0x19, 0xe8, 0x34, 0x2b, 0x1c, 0x60, 0x91, 0xfc, 0x05, 0xa9, 0xb3, 0xdc, 0x80, 0x29, 0xc4, 0x20, 0x79, 0x06, 0x39, 0xc0, 0xe2, 0x22], [0xbb, 0xa8, 0xe1, 0x89, 0x70, 0x57, 0x18, 0x54, 0x3c, 0xf6, 0x0d, 0x82, 0x12, 0x05, 0x87, 0x96, 0x06, 0x39, 0xe3, 0xf8, 0xb3, 0x95, 0xe5, 0xd7, 0x26, 0xbf, 0x09, 0x5a, 0x94, 0xf9, 0x1c, 0x63]],
        [[0x2b, 0x8c, 0x2d, 0x9a, 0x8b, 0x84, 0xf2, 0x56, 0xfb, 0xad, 0x2e, 0x7f, 0xb7, 0xfc, 0x30, 0xe1, 0x35, 0x89, 0xba, 0x4d, 0xa8, 0x6d, 0xce, 0x8c, 0x8b, 0x30, 0xe0, 0xda, 0x29, 0x18, 0x11, 0x17], [0x19, 0xa6, 0x5a, 0x65, 0x93, 0xc3, 0xb5, 0x31, 0x22, 0x4f, 0xf3, 0xf6, 0x0f, 0xeb, 0x28, 0xc3, 0x7c, 0xeb, 0xce, 0x86, 0xec, 0x67, 0x76, 0x6e, 0x35, 0x45, 0x7b, 0xd8, 0x6b, 0x92, 0x01, 0x65]],
        [[0x3d, 0xd5, 0x9a, 0x64, 0x73, 0x36, 0xb1, 0xd6, 0x86, 0x98, 0x42, 0x3f, 0x8a, 0xf1, 0xc7, 0xf5, 0x42, 0xa8, 0x9c, 0x52, 0xa8, 0xdc, 0xf9, 0x24, 0x3f, 0x4a, 0xa1, 0xa4, 0x5b, 0xe8, 0x62, 0x1a], [0xc5, 0xbd, 0xc8, 0x14, 0xd5, 0x0d, 0xeb, 0xe1, 0xa5, 0xe6, 0x83, 0x11, 0x09, 0x00, 0x1d, 0x55, 0x83, 0x51, 0x7e, 0x75, 0x00, 0x81, 0xb9, 0xcb, 0xd8, 0xc5, 0xe5, 0xa1, 0xd9, 0x17, 0x6d, 0x1f]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xea, 0xf9, 0xe4, 0xe9, 0xe1, 0x52, 0x3f, 0x51, 0x19, 0x0d, 0xdd, 0xd9, 0x9d, 0x93, 0x31, 0x87, 0x23, 0x09, 0xd5, 0x83, 0xeb, 0x92, 0x09, 0x76, 0x6e, 0xe3, 0xf8, 0xc0, 0xa2, 0x66, 0xb5, 0x36], [0x3a, 0xbb, 0x39, 0xed, 0x32, 0x02, 0xe7, 0x43, 0x7a, 0x38, 0x14, 0x84, 0xe3, 0x44, 0xd2, 0x5e, 0x94, 0xdd, 0x78, 0x89, 0x55, 0x4c, 0x73, 0x9e, 0xe1, 0xe4, 0x3e, 0x43, 0xd0, 0x4a, 0xde, 0x1b]],
        [[0xb2, 0xe7, 0x8f, 0xe3, 0xa3, 0xc5, 0xcb, 0x72, 0xee, 0x79, 0x41, 0xf8, 0xdf, 0xee, 0x65, 0xc5, 0x45, 0x77, 0x27, 0x3c, 0xbd, 0x58, 0xd3, 0x75, 0xe2, 0x04, 0x4b, 0xbb, 0x65, 0xf3, 0xc8, 0x0f], [0x24, 0x7b, 0x93, 0x34, 0xb5, 0xe2, 0x74, 0x48, 0xcd, 0xa0, 0x0b, 0x92, 0x97, 0x66, 0x39, 0xf4, 0xb0, 0xe2, 0x5d, 0x39, 0x6a, 0x5b, 0x45, 0x17, 0x78, 0x1e, 0xdb, 0x91, 0x81, 0x1c, 0xf9, 0x16]],
        [[0x16, 0xdf, 0xd1, 0x5a, 0xd5, 0xe9, 0x4e, 0x58, 0x95, 0x93, 0x5f, 0x51, 0x09, 0xc3, 0x2a, 0xc9, 0xd4, 0x55, 0x48, 0x79, 0xa4, 0xa3, 0xb2, 0xc3, 0x62, 0xaa, 0x8c, 0xe8, 0xad, 0x47, 0x39, 0x1b], [0x46, 0xda, 0x9e, 0x51, 0x3a, 0xe6, 0xd1, 0xa6, 0xbb, 0x4d, 0x7b, 0x08, 0xbe, 0x8c, 0xd5, 0xf3, 0x3f, 0xfd, 0xf7, 0x44, 0x80, 0x2d, 0x53, 0x4b, 0xd0, 0x87, 0x68, 0xc1, 0xb5, 0xd8, 0xf7, 0x07]],
        [[0xf4, 0x10, 0x46, 0xbe, 0xb7, 0xd2, 0xd1, 0xce, 0x5e, 0x76, 0xa2, 0xd7, 0x03, 0xdc, 0xe4, 0x81, 0x5a, 0xf6, 0x3c, 0xde, 0xae, 0x7a, 0x9d, 0x21, 0x34, 0xa5, 0xf6, 0xa9, 0x73, 0xe2, 0x8d, 0x60], [0xfa, 0x44, 0x71, 0xf6, 0x41, 0xd8, 0xc6, 0x58, 0x13, 0x37, 0xeb, 0x84, 0x0f, 0x96, 0xc7, 0xdc, 0xc8, 0xa9, 0x7a, 0x83, 0xb2, 0x2f, 0x31, 0xb1, 0x1a, 0xd8, 0x98, 0x3f, 0x11, 0xd0, 0x31, 0x3b]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x81, 0xd5, 0x34, 0x16, 0x01, 0xa3, 0x93, 0xea, 0x52, 0x94, 0xec, 0x93, 0xb7, 0x81, 0x11, 0x2d, 0x58, 0xf9, 0xb5, 0x0a, 0xaa, 0x4f, 0xf6, 0x2e, 0x3f, 0x36, 0xbf, 0x33, 0x5a, 0xe7, 0xd1, 0x08], [0x1a, 0xcf, 0x42, 0xae, 0xcc, 0xb5, 0x77, 0x39, 0xc4, 0x5b, 0x5b, 0xd0, 0x26, 0x59, 0x27, 0xd0, 0x55, 0x71, 0x12, 0x9d, 0x88, 0x3d, 0x9c, 0xea, 0x41, 0x6a, 0xf0, 0x50, 0x93, 0x93, 0xdd, 0x47]],
        [[0x6f, 0xc9, 0x51, 0x6d, 0x1c, 0xaa, 0xf5, 0xa5, 0x90, 0x3f, 0x14, 0xe2, 0x6e, 0x8e, 0x64, 0xfd, 0xac, 0xe0, 0x4e, 0x22, 0xe5, 0xc1, 0xbc, 0x29, 0x0a, 0x6a, 0x9e, 0xa1, 0x60, 0xcb, 0x2f, 0x0b], [0xdc, 0x39, 0x32, 0xf3, 0xa1, 0x44, 0xe9, 0xc5, 0xc3, 0x78, 0xfb, 0x95, 0x47, 0x34, 0x35, 0x34, 0xe8, 0x25, 0xde, 0x93, 0xc6, 0xb4, 0x76, 0x6d, 0x86, 0x13, 0xc6, 0xe9, 0x68, 0xb5, 0x01, 0x63]],
        [[0x1f, 0x9a, 0x52, 0x64, 0x97, 0xd9, 0x1c, 0x08, 0x51, 0x6f, 0x26, 0x9d, 0xaa, 0x93, 0x33, 0x43, 0xfa, 0x77, 0xe9, 0x62, 0x9b, 0x5d, 0x18, 0x75, 0xeb, 0x78, 0xf7, 0x87, 0x8f, 0x41, 0xb4, 0x4d], [0x13, 0xa8, 0x82, 0x3e, 0xe9, 0x13, 0xad, 0xeb, 0x01, 0xca, 0xcf, 0xda, 0xcd, 0xf7, 0x6c, 0xc7, 0x7a, 0xdc, 0x1e, 0x6e, 0xc8, 0x4e, 0x55, 0x62, 0x80, 0xea, 0x78, 0x0c, 0x86, 0xb9, 0x40, 0x51]],
        [[0x27, 0xae, 0xd3, 0x0d, 0x4c, 0x8f, 0x34, 0xea, 0x7d, 0x3c, 0xe5, 0x8a, 0xcf, 0x5b, 0x92, 0xd8, 0x30, 0x16, 0xb4, 0xa3, 0x75, 0xff, 0xeb, 0x27, 0xc8, 0x5c, 0x6c, 0xc2, 0xee, 0x6c, 0x21, 0x0b], [0xc3, 0xba, 0x12, 0x53, 0x2a, 0xaa, 0x77, 0xad, 0x19, 0x78, 0x55, 0x8a, 0x2e, 0x60, 0x87, 0xc2, 0x6e, 0x91, 0x38, 0x91, 0x3f, 0x7a, 0xc5, 0x24, 0x8f, 0x51, 0xc5, 0xde, 0xb0, 0x53, 0x30, 0x56]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x02, 0xfe, 0x54, 0x12, 0x18, 0xca, 0x7d, 0xa5, 0x68, 0x43, 0xa3, 0x6d, 0x14, 0x2a, 0x6a, 0xa5, 0x8e, 0x32, 0xe7, 0x63, 0x4f, 0xe3, 0xc6, 0x44, 0x3e, 0xab, 0x63, 0xca, 0x17, 0x86, 0x74, 0x3f], [0x1e, 0x64, 0xc1, 0x7d, 0x52, 0xdc, 0x13, 0x5a, 0xa1, 0x9c, 0x4e, 0xee, 0x99, 0x28, 0xbb, 0x4c, 0xee, 0xac, 0xa9, 0x1b, 0x89, 0xa2, 0x38, 0x39, 0x7b, 0xc4, 0x0f, 0x42, 0xe6, 0x89, 0xed, 0x0f]],
        [[0xf3, 0x3c, 0x8c, 0x80, 0x83, 0x10, 0x8a, 0x37, 0x50, 0x9c, 0xb4, 0xdf, 0x3f, 0x8c, 0xf7, 0x23, 0x07, 0xd6, 0xff, 0xa0, 0x82, 0x6c, 0x75, 0x3b, 0xe4, 0xb5, 0xbb, 0xe4, 0xe6, 0x50, 0xf0, 0x08], [0x62, 0xee, 0x75, 0x48, 0x92, 0x33, 0xf2, 0xf4, 0xad, 0x15, 0x7a, 0xa1, 0x01, 0x46, 0xa9, 0x32, 0x06, 0x88, 0xb6, 0x36, 0x47, 0x35, 0xb9, 0xb4, 0x42, 0x85, 0x76, 0xf0, 0x48, 0x00, 0x90, 0x38]],
        [[0x51, 0x15, 0x9d, 0xc3, 0x95, 0xd1, 0x39, 0xbb, 0x64, 0x9d, 0x15, 0x81, 0xc1, 0x68, 0xd0, 0xb6, 0xa4, 0x2c, 0x7d, 0x5e, 0x02, 0x39, 0x00, 0xe0, 0x3b, 0xa4, 0xcc, 0xca, 0x1d, 0x81, 0x24, 0x10], [0xe7, 0x29, 0xf9, 0x37, 0xd9, 0x46, 0x5a, 0xcd, 0x70, 0xfe, 0x4d, 0x5b, 0xbf, 0xa5, 0xcf, 0x91, 0xf4, 0xef, 0xee, 0x8a, 0x29, 0xd0, 0xe7, 0xc4, 0x25, 0x92, 0x8a, 0xff, 0x36, 0xfc, 0xe4, 0x49]],
        [[0xbd, 0x00, 0xb9, 0x04, 0x7d, 0x35, 0xfc, 0xeb, 0xd0, 0x0b, 0x05, 0x32, 0x52, 0x7a, 0x89, 0x24, 0x75, 0x50, 0xe1, 0x63, 0x02, 0x82, 0x8e, 0xe7, 0x85, 0x0c, 0xf2, 0x56, 0x44, 0x37, 0x83, 0x25], [0x8f, 0xa1, 0xce, 0xcb, 0x60, 0xda, 0x12, 0x02, 0x1e, 0x29, 0x39, 0x2a, 0x03, 0xb7, 0xeb, 0x77, 0x40, 0xea, 0xc9, 0x2b, 0x2c, 0xd5, 0x7d, 0x7e, 0x2c, 0xc7, 0x5a, 0xfd, 0xff, 0xc4, 0xd1, 0x62]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x1d, 0x88, 0x98, 0x5b, 0x4e, 0xfc, 0x41, 0x24, 0x05, 0xe6, 0x50, 0x2b, 0xae, 0x96, 0x51, 0xd9, 0x6b, 0x72, 0xb2, 0x33, 0x42, 0x98, 0x68, 0xbb, 0x10, 0x5a, 0x7a, 0x8c, 0x9d, 0x07, 0xb4, 0x05], [0x2f, 0x61, 0x9f, 0xd7, 0xa8, 0x3f, 0x83, 0x8c, 0x10, 0x69, 0x90, 0xe6, 0xcf, 0xd2, 0x63, 0xa3, 0xe4, 0x54, 0x7e, 0xe5, 0x69, 0x13, 0x1c, 0x90, 0x57, 0xaa, 0xe9, 0x53, 0x22, 0x43, 0x29, 0x23]],
        [[0xe5, 0x1c, 0xf8, 0x0a, 0xfd, 0x2d, 0x7e, 0xf5, 0xf5, 0x70, 0x7d, 0x41, 0x6b, 0x11, 0xfe, 0xbe, 0x99, 0xd1, 0x55, 0x29, 0x31, 0xbf, 0xc0, 0x97, 0x6c, 0xd5, 0x35, 0xcc, 0x5e, 0x8b, 0xd9, 0x69], [0x8e, 0x4e, 0x9f, 0x25, 0xf8, 0x81, 0x54, 0x2d, 0x0e, 0xd5, 0x54, 0x81, 0x9b, 0xa6, 0x92, 0xce, 0x4b, 0xe9, 0x8f, 0x24, 0x3b, 0xca, 0xe0, 0x44, 0xab, 0x36, 0xfe, 0xfb, 0x87, 0xd4, 0x26, 0x3e]],
        [[0x0f, 0x93, 0x9c, 0x11, 0xe7, 0xdb, 0xf1, 0xf0, 0x85, 0x43, 0x28, 0x15, 0x37, 0xdd, 0xde, 0x27, 0xdf, 0xad, 0x3e, 0x49, 0x4f, 0xe0, 0x5b, 0xf6, 0x80, 0x59, 0x15, 0x3c, 0x85, 0xb7, 0x3e, 0x12], [0xf5, 0xff, 0xcc, 0xf0, 0xb4, 0x12, 0x03, 0x5f, 0xc9, 0x84, 0xcb, 0x1d, 0x17, 0xe0, 0xbc, 0xcc, 0x03, 0x62, 0xa9, 0x8b, 0x94, 0xa6, 0xaa, 0x18, 0xcb, 0x27, 0x8d, 0x49, 0xa6, 0x17, 0x15, 0x07]],
        [[0xd9, 0xb6, 0xd4, 0x9d, 0xd4, 0x6a, 0xaf, 0x70, 0x07, 0x2c, 0x10, 0x9e, 0xbd, 0x11, 0xad, 0xe4, 0x26, 0x33, 0x70, 0x92, 0x78, 0x1c, 0x74, 0x9f, 0x75, 0x60, 0x56, 0xf4, 0x39, 0xa8, 0xa8, 0x62], [0x3b, 0xbf, 0x55, 0x35, 0x61, 0x8b, 0x44, 0x97, 0xe8, 0x3a, 0x55, 0xc1, 0xc8, 0x3b, 0xfd, 0x95, 0x29, 0x11, 0x60, 0x96, 0x1e, 0xcb, 0x11, 0x9d, 0xc2, 0x03, 0x8a, 0x1b, 0xc6, 0xd6, 0x45, 0x3d]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x7e, 0x0e, 0x50, 0xb2, 0xcc, 0x0d, 0x6b, 0xa6, 0x71, 0x5b, 0x42, 0xed, 0xbd, 0xaf, 0xac, 0xf0, 0xfc, 0x12, 0xa2, 0x3f, 0x4e, 0xda, 0xe8, 0x11, 0xf3, 0x23, 0xe1, 0x04, 0x62, 0x03, 0x1c, 0x4e], [0xc8, 0xb1, 0x1b, 0x6f, 0x73, 0x61, 0x3d, 0x27, 0x0d, 0x7d, 0x7a, 0x25, 0x5f, 0x73, 0x0e, 0x2f, 0x93, 0xf6, 0x24, 0xd8, 0x4f, 0x90, 0xac, 0xa2, 0x62, 0x0a, 0xf0, 0x61, 0xd9, 0x08, 0x59, 0x6a]],
        [[0x6f, 0x2d, 0x55, 0xf8, 0x2f, 0x8e, 0xf0, 0x18, 0x3b, 0xea, 0xdd, 0x26, 0x72, 0xd1, 0xf5, 0xfe, 0xe5, 0xb8, 0xe6, 0xd3, 0x10, 0x48, 0x46, 0x49, 0x3a, 0x9f, 0x5e, 0x45, 0x6b, 0x90, 0xe8, 0x7f], [0xd3, 0x76, 0x69, 0x33, 0x7b, 0xb9, 0x40, 0x70, 0xee, 0xa6, 0x29, 0x6b, 0xdd, 0xd0, 0x5d, 0x8d, 0xc1, 0x3e, 0x4a, 0xea, 0x37, 0xb1, 0x03, 0x02, 0x03, 0x35, 0xf1, 0x28, 0x9d, 0xff, 0x00, 0x13]],
        [[0x7a, 0xdb, 0x12, 0xd2, 0x8a, 0x82, 0x03, 0x1b, 0x1e, 0xaf, 0xf9, 0x4b, 0x9c, 0xbe, 0xae, 0x7c, 0xe4, 0x94, 0x2a, 0x23, 0xb3, 0x62, 0x86, 0xe7, 0xfd, 0x23, 0xaa, 0x99, 0xbd, 0x2b, 0x11, 0x6c], [0x8d, 0xa6, 0xd5, 0xac, 0x9d, 0xcc, 0x68, 0x75, 0x7f, 0xc3, 0x4d, 0x4b, 0xdd, 0x6c, 0xbb, 0x11, 0x5a, 0x60, 0xe5, 0xbd, 0x7d, 0x27, 0x8b, 0xda, 0xb4, 0x95, 0xf6, 0x03, 0x27, 0xa4, 0x92, 0x3f]],
        [[0x22, 0xd6, 0xb5, 0x17, 0x84, 0xbf, 0x12, 0xcc, 0x23, 0x14, 0x4a, 0xdf, 0x14, 0x31, 0xbc, 0xa1, 0xac, 0x6e, 0xab, 0xfa, 0x57, 0x11, 0x53, 0xb3, 0x27, 0xe6, 0xf9, 0x47, 0x33, 0x44, 0x34, 0x1e], [0x79, 0xfc, 0xa6, 0xb4, 0x0b, 0x35, 0x20, 0xc9, 0x4d, 0x22, 0x84, 0xc4, 0xa9, 0x20, 0xec, 0x89, 0x94, 0xba, 0x66, 0x56, 0x48, 0xb9, 0x87, 0x7f, 0xca, 0x1e, 0x06, 0xed, 0xa5, 0x55, 0x59, 0x29]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x56, 0xe1, 0xf5, 0xf1, 0xd5, 0xab, 0xa8, 0x2b, 0xae, 0x89, 0xf3, 0xcf, 0x56, 0x9f, 0xf2, 0x4b, 0x31, 0xbc, 0x18, 0xa9, 0x06, 0x5b, 0xbe, 0xb4, 0x61, 0xf8, 0xb2, 0x06, 0x9c, 0x81, 0xab, 0x4c], [0x1f, 0x68, 0x76, 0x01, 0x16, 0x38, 0x2b, 0x0f, 0x77, 0x97, 0x92, 0x67, 0x4e, 0x86, 0x6a, 0x8b, 0xe5, 0xe8, 0x0c, 0xf7, 0x36, 0x39, 0xb5, 0x33, 0xe6, 0xcf, 0x5e, 0xbd, 0x18, 0xfb, 0x10, 0x1f]],
        [[0x83, 0xf0, 0x0d, 0x63, 0xef, 0x53, 0x6b, 0xb5, 0x6b, 0xf9, 0x83, 0xcf, 0xde, 0x04, 0x22, 0x9b, 0x2c, 0x0a, 0xe0, 0xa5, 0xd8, 0xc7, 0x9c, 0xa5, 0xa3, 0xf6, 0x6f, 0xcf, 0x90, 0x6b, 0x68, 0x7c], [0x33, 0x15, 0xd7, 0x7f, 0x1a, 0xd5, 0x21, 0x58, 0xc4, 0x18, 0xa5, 0xf0, 0xcc, 0x73, 0xa8, 0xfd, 0xfa, 0x18, 0xd1, 0x03, 0x91, 0x8d, 0x52, 0xd2, 0xa3, 0xa4, 0xd3, 0xb1, 0xea, 0x1d, 0x0f, 0x00]],
        [[0xcc, 0x48, 0x83, 0x90, 0xe5, 0xfd, 0x3f, 0x84, 0xaa, 0xf9, 0x8b, 0x82, 0x59, 0x24, 0x34, 0x68, 0x4f, 0x1c, 0x23, 0xd9, 0xcc, 0x71, 0xe1, 0x7f, 0x8c, 0xaf, 0xf1, 0xee, 0x00, 0xb6, 0xa0, 0x77], [0xf5, 0x1a, 0x61, 0xf7, 0x37, 0x9d, 0x00, 0xf4, 0xf2, 0x69, 0x6f, 0x4b, 0x01, 0x85, 0x19, 0x45, 0x4d, 0x7f, 0x02, 0x7c, 0x6a, 0x05, 0x47, 0x6c, 0x1f, 0x81, 0x20, 0xd4, 0xe8, 0x50, 0x27, 0x72]],
        [[0x2c, 0x3a, 0xe5, 0xad, 0xf4, 0xdd, 0x2d, 0xf7, 0x5c, 0x44, 0xb5, 0x5b, 0x21, 0xa3, 0x89, 0x5f, 0x96, 0x45, 0xca, 0x4d, 0xa4, 0x21, 0x99, 0x70, 0xda, 0xc4, 0xc4, 0xa0, 0xe5, 0xf4, 0xec, 0x0a], [0x07, 0x68, 0x21, 0x65, 0xe9, 0x08, 0xa0, 0x0b, 0x6a, 0x4a, 0xba, 0xb5, 0x80, 0xaf, 0xd0, 0x1b, 0xc5, 0xf5, 0x4b, 0x73, 0x50, 0x60, 0x2d, 0x71, 0x69, 0x61, 0x0e, 0xc0, 0x20, 0x40, 0x30, 0x19]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xd0, 0x75, 0x57, 0x3b, 0xeb, 0x5c, 0x14, 0x56, 0x50, 0xc9, 0x4f, 0xb8, 0xb8, 0x1e, 0xa3, 0xf4, 0xab, 0xf5, 0xa9, 0x20, 0x15, 0x94, 0x82, 0xda, 0x96, 0x1c, 0x9b, 0x59, 0x8c, 0xff, 0xf4, 0x51], [0xc1, 0x3a, 0x86, 0xd7, 0xb0, 0x06, 0x84, 0x7f, 0x1b, 0xbd, 0xd4, 0x07, 0x78, 0x80, 0x2e, 0xb1, 0xb4, 0xee, 0x52, 0x38, 0xee, 0x9a, 0xf9, 0xf6, 0xf3, 0x41, 0x6e, 0xd4, 0x88, 0x95, 0xac, 0x35]],
        [[0x41, 0x97, 0xbf, 0x71, 0x6a, 0x9b, 0x72, 0xec, 0xf3, 0xf8, 0x6b, 0xe6, 0x0e, 0x6c, 0x69, 0xa5, 0x2f, 0x68, 0x52, 0xd8, 0x61, 0x81, 0xc0, 0x63, 0x3f, 0xa6, 0x3c, 0x13, 0x90, 0xe6, 0x8d, 0x56], [0xe8, 0x39, 0x30, 0x77, 0x23, 0xb1, 0xfd, 0x1b, 0x3d, 0x3e, 0x74, 0x4d, 0x7f, 0xae, 0x5b, 0x3a, 0xb4, 0x65, 0x0e, 0x3a, 0x43, 0xdc, 0xdc, 0x41, 0x47, 0xe6, 0xe8, 0x92, 0x09, 0x22, 0x48, 0x4c]],
        [[0x85, 0x57, 0x9f, 0xb5, 0xc8, 0x06, 0xb2, 0x9f, 0x47, 0x3f, 0xf0, 0xfa, 0xe6, 0xa9, 0xb1, 0x9b, 0x6f, 0x96, 0x7d, 0xf9, 0xa4, 0x65, 0x09, 0x75, 0x32, 0xa6, 0x6c, 0x7f, 0x47, 0x4b, 0x2f, 0x4f], [0x34, 0xe9, 0x59, 0x93, 0x9d, 0x26, 0x80, 0x54, 0xf2, 0xcc, 0x3c, 0xc2, 0x25, 0x85, 0xe3, 0x6a, 0xc1, 0x62, 0x04, 0xa7, 0x08, 0x32, 0x6d, 0xa1, 0x39, 0x84, 0x8a, 0x3b, 0x87, 0x5f, 0x11, 0x13]],
        [[0xda, 0x03, 0x34, 0x66, 0xc4, 0x0c, 0x73, 0x6e, 0xbc, 0x24, 0xb5, 0xf9, 0x70, 0x81, 0x52, 0xe9, 0xf4, 0x7c, 0x23, 0xdd, 0x9f, 0xb8, 0x46, 0xef, 0x1d, 0x22, 0x55, 0x7d, 0x71, 0xc4, 0x42, 0x33], [0xc5, 0x37, 0x69, 0x5b, 0xa8, 0xc6, 0x9d, 0xa4, 0xfc, 0x61, 0x6e, 0x68, 0x46, 0xea, 0xd7, 0x1c, 0x67, 0xd2, 0x7d, 0xfa, 0xf1, 0xcc, 0x54, 0x8d, 0x36, 0x35, 0xc9, 0x00, 0xdf, 0x6c, 0x67, 0x50]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x9a, 0x4d, 0x42, 0x29, 0x5d, 0xa4, 0x6b, 0x6f, 0xa8, 0x8a, 0x4d, 0x91, 0x7b, 0xd2, 0xdf, 0x36, 0xef, 0x01, 0x22, 0xc5, 0xcc, 0x8d, 0xeb, 0x58, 0x3d, 0xb3, 0x50, 0xfc, 0x8b, 0x97, 0x96, 0x33], [0x93, 0x33, 0x07, 0xc8, 0x4a, 0xca, 0xd0, 0xb1, 0xab, 0xbd, 0xdd, 0xa7, 0x7c, 0xac, 0x3e, 0x45, 0xcb, 0xcc, 0x07, 0x91, 0xbf, 0x35, 0x9d, 0xcb, 0x7d, 0x12, 0x3c, 0x11, 0x59, 0x13, 0xcf, 0x5c]],
        [[0x45, 0xb8, 0x41, 0xd7, 0xab, 0x07, 0x15, 0x00, 0x8e, 0xce, 0xdf, 0xb2, 0x43, 0x5c, 0x01, 0xdc, 0xf4, 0x01, 0x51, 0x95, 0x10, 0x5a, 0xf6, 0x24, 0x24, 0xa0, 0x19, 0x3a, 0x09, 0x2a, 0xaa, 0x3f], [0xdc, 0x8e, 0xeb, 0xc6, 0xbf, 0xdd, 0x11, 0x7b, 0xe7, 0x47, 0xe6, 0xce, 0xe7, 0xb6, 0xc5, 0xe8, 0x8a, 0xdc, 0x4b, 0x57, 0x15, 0x3b, 0x66, 0xca, 0x89, 0xa3, 0xfd, 0xac, 0x0d, 0xe1, 0x1d, 0x7a]],
        [[0x89, 0xef, 0xbf, 0x03, 0x75, 0xd0, 0x29, 0x50, 0xcb, 0x7d, 0xd6, 0xbe, 0xad, 0x5f, 0x7b, 0x00, 0x32, 0xaa, 0x98, 0xed, 0x3f, 0x8f, 0x92, 0xcb, 0x81, 0x56, 0x01, 0x63, 0x64, 0xa3, 0x38, 0x39], [0x8b, 0xa4, 0xd6, 0x50, 0xb4, 0xaa, 0x5d, 0x64, 0x64, 0x76, 0x2e, 0xa1, 0xa6, 0xb3, 0xb8, 0x7c, 0x7a, 0x56, 0xf5, 0x5c, 0x4e, 0x84, 0x5c, 0xfb, 0xdd, 0xca, 0x48, 0x8b, 0x48, 0xb9, 0xba, 0x34]],
        [[0xc5, 0xe3, 0xe8, 0xae, 0x17, 0x27, 0xe3, 0x64, 0x60, 0x71, 0x47, 0x29, 0x02, 0x0f, 0x92, 0x5d, 0x10, 0x93, 0xc8, 0x0e, 0xa1, 0xed, 0xba, 0xa9, 0x96, 0x1c, 0xc5, 0x76, 0x30, 0xcd, 0xf9, 0x30], [0x95, 0xb0, 0xbd, 0x8c, 0xbc, 0xa7, 0x4f, 0x7e, 0xfd, 0x4e, 0x3a, 0xbf, 0x5f, 0x04, 0x79, 0x80, 0x2b, 0x5a, 0x9f, 0x4f, 0x68, 0x21, 0x19, 0x71, 0xc6, 0x20, 0x01, 0x42, 0xaa, 0xdf, 0xae, 0x2c]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x90, 0x6e, 0x7e, 0x4b, 0x71, 0x93, 0xc0, 0x72, 0xed, 0xeb, 0x71, 0x24, 0x97, 0x26, 0x9c, 0xfe, 0xcb, 0x3e, 0x59, 0x19, 0xa8, 0x0f, 0x75, 0x7d, 0xbe, 0x18, 0xe6, 0x96, 0x1e, 0x95, 0x70, 0x60], [0x89, 0x66, 0x3e, 0x1d, 0x4c, 0x5f, 0xfe, 0xc0, 0x04, 0x43, 0xd6, 0x44, 0x19, 0xb5, 0xad, 0xc7, 0x22, 0xdc, 0x71, 0x28, 0x64, 0xde, 0x41, 0x38, 0x27, 0x8f, 0x2c, 0x6b, 0x08, 0xb8, 0xb8, 0x7b]],
        [[0x3d, 0x70, 0x27, 0x9d, 0xd9, 0xaf, 0xb1, 0x27, 0xaf, 0xe3, 0x5d, 0x1e, 0x3a, 0x30, 0x54, 0x61, 0x60, 0xe8, 0xc3, 0x26, 0x3a, 0xbc, 0x7e, 0xf5, 0x81, 0xdd, 0x64, 0x01, 0x04, 0xeb, 0xc0, 0x1e], [0xda, 0x2c, 0xa4, 0xd1, 0xa1, 0xc3, 0x5c, 0x6e, 0x32, 0x07, 0x1f, 0xb8, 0x0e, 0x19, 0x9e, 0x99, 0x29, 0x33, 0x9a, 0xae, 0x7a, 0xed, 0x68, 0x42, 0x69, 0x7c, 0x07, 0xb3, 0x38, 0x2c, 0xf6, 0x3d]],
        [[0x64, 0xaa, 0xb5, 0x88, 0x79, 0x65, 0x38, 0x8c, 0x94, 0xd6, 0x62, 0x37, 0x7d, 0x64, 0xcd, 0x3a, 0xeb, 0xff, 0xe8, 0x81, 0x09, 0xc7, 0x6a, 0x50, 0x09, 0x0d, 0x28, 0x03, 0x0d, 0x9a, 0x93, 0x0a], [0x42, 0xa3, 0xf1, 0xc5, 0xb4, 0x0f, 0xd8, 0xc8, 0x8d, 0x15, 0x31, 0xbd, 0xf8, 0x07, 0x8b, 0xcd, 0x08, 0x8a, 0xfb, 0x18, 0x07, 0xfe, 0x8e, 0x52, 0x86, 0xef, 0xbe, 0xec, 0x49, 0x52, 0x99, 0x08]],
        [[0x0f, 0xa9, 0xd5, 0x01, 0xaa, 0x48, 0x4f, 0x28, 0x66, 0x32, 0x1a, 0xba, 0x7c, 0xea, 0x11, 0x80, 0x17, 0x18, 0x9b, 0x56, 0x88, 0x25, 0x06, 0x69, 0x12, 0x2c, 0xea, 0x56, 0x69, 0x41, 0x24, 0x19], [0xde, 0x21, 0xf0, 0xda, 0x8a, 0xfb, 0xb1, 0xb8, 0xcd, 0xc8, 0x6a, 0x82, 0x19, 0x73, 0xdb, 0xc7, 0xcf, 0x88, 0xeb, 0x96, 0xee, 0x6f, 0xfb, 0x06, 0xd2, 0xcd, 0x7d, 0x7b, 0x12, 0x28, 0x8e, 0x0c]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x93, 0x44, 0x97, 0xce, 0x28, 0xff, 0x3a, 0x40, 0xc4, 0xf5, 0xf6, 0x9b, 0xf4, 0x6b, 0x07, 0x84, 0xfb, 0x98, 0xd8, 0xec, 0x8c, 0x03, 0x57, 0xec, 0x49, 0xed, 0x63, 0xb6, 0xaa, 0xff, 0x98, 0x28], [0x3d, 0x16, 0x35, 0xf3, 0x46, 0xbc, 0xb3, 0xf4, 0xc6, 0xb6, 0x4f, 0xfa, 0xf4, 0xa0, 0x13, 0xe6, 0x57, 0x45, 0x93, 0xb9, 0xbc, 0xd6, 0x59, 0xe7, 0x77, 0x94, 0x6c, 0xab, 0x96, 0x3b, 0x4f, 0x09]],
        [[0x5a, 0xf7, 0x6b, 0x01, 0x12, 0x4f, 0x51, 0xc1, 0x70, 0x84, 0x94, 0x47, 0xb2, 0x01, 0x6c, 0x71, 0xd7, 0xcc, 0x17, 0x66, 0x0f, 0x59, 0x5d, 0x5d, 0x10, 0x01, 0x57, 0x11, 0xf5, 0xdd, 0xe2, 0x34], [0x26, 0xd9, 0x1f, 0x5c, 0x58, 0xac, 0x8b, 0x03, 0xd2, 0xc3, 0x85, 0x0f, 0x3a, 0xc3, 0x7f, 0x6d, 0x8e, 0x86, 0xcd, 0x52, 0x74, 0x8f, 0x55, 0x77, 0x17, 0xb7, 0x8e, 0xb7, 0x88, 0xea, 0xda, 0x1b]],
        [[0xb6, 0xea, 0x0e, 0x40, 0x93, 0x20, 0x79, 0x35, 0x6a, 0x61, 0x84, 0x5a, 0x07, 0x6d, 0xf9, 0x77, 0x6f, 0xed, 0x69, 0x1c, 0x0d, 0x25, 0x76, 0xcc, 0xf0, 0xdb, 0xbb, 0xc5, 0xad, 0xe2, 0x26, 0x57], [0xcf, 0xe8, 0x0e, 0x6b, 0x96, 0x7d, 0xed, 0x27, 0xd1, 0x3c, 0xa9, 0xd9, 0x50, 0xa9, 0x98, 0x84, 0x5e, 0x86, 0xef, 0xd6, 0xf0, 0xf8, 0x0e, 0x89, 0x05, 0x2f, 0xd9, 0x5f, 0x15, 0x5f, 0x73, 0x79]],
        [[0xc8, 0x5c, 0x16, 0xfe, 0xed, 0x9f, 0x26, 0x56, 0xf6, 0x4b, 0x9f, 0xa7, 0x0a, 0x85, 0xfe, 0xa5, 0x8c, 0x87, 0xdd, 0x98, 0xce, 0x4e, 0xc3, 0x58, 0x55, 0xb2, 0x7b, 0x3d, 0xd8, 0x6b, 0xb5, 0x4c], [0x65, 0x38, 0xa0, 0x15, 0xfa, 0xa7, 0xb4, 0x8f, 0xeb, 0xc4, 0x86, 0x9b, 0x30, 0xa5, 0x5e, 0x4d, 0xea, 0x8a, 0x9a, 0x9f, 0x1a, 0xd8, 0x5b, 0x53, 0x14, 0x19, 0x25, 0x63, 0xb4, 0x6f, 0x1f, 0x5d]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xac, 0x8f, 0xbc, 0x1e, 0x7d, 0x8b, 0x5a, 0x0b, 0x8d, 0xaf, 0x76, 0x2e, 0x71, 0xe3, 0x3b, 0x6f, 0x53, 0x2f, 0x3e, 0x90, 0x95, 0xd4, 0x35, 0x14, 0x4f, 0x8c, 0x3c, 0xce, 0x57, 0x1c, 0x76, 0x49], [0xa8, 0x50, 0xe1, 0x61, 0x6b, 0x57, 0x35, 0xeb, 0x44, 0x0b, 0x0c, 0x6e, 0xf9, 0x25, 0x80, 0x74, 0xf2, 0x8f, 0x6f, 0x7a, 0x3e, 0x7f, 0x2d, 0xf3, 0x4e, 0x09, 0x65, 0x10, 0x5e, 0x03, 0x25, 0x32]],
        [[0xa9, 0x60, 0xdc, 0x0f, 0x64, 0xe5, 0x1d, 0xe2, 0x8d, 0x4f, 0x79, 0x2f, 0x0e, 0x24, 0x02, 0x00, 0x05, 0x77, 0x43, 0x25, 0x3d, 0x6a, 0xc7, 0xb7, 0xbf, 0x04, 0x08, 0x65, 0xf4, 0x39, 0x4b, 0x65], [0x96, 0x19, 0x12, 0x6b, 0x6a, 0xb7, 0xe3, 0xdc, 0x45, 0x9b, 0xdb, 0xb4, 0xa8, 0xae, 0xdc, 0xa8, 0x14, 0x44, 0x65, 0x62, 0xce, 0x34, 0x9a, 0x84, 0x18, 0x12, 0x01, 0xf1, 0xe2, 0x7b, 0xce, 0x50]],
        [[0x41, 0x21, 0x30, 0x53, 0x1b, 0x47, 0x01, 0xb7, 0x18, 0xd8, 0x82, 0x57, 0xbd, 0xa3, 0x60, 0xf0, 0x32, 0xf6, 0x5b, 0xf0, 0x30, 0x88, 0x91, 0x59, 0xfd, 0x90, 0xa2, 0xb9, 0x55, 0x93, 0x21, 0x34], [0x97, 0x67, 0x9e, 0xeb, 0x6a, 0xf9, 0x6e, 0xd6, 0x73, 0xe8, 0x6b, 0x29, 0xec, 0x63, 0x82, 0x00, 0xa8, 0x99, 0x1c, 0x1d, 0x30, 0xc8, 0x90, 0x52, 0x90, 0xb6, 0x6a, 0x80, 0x4e, 0xff, 0x4b, 0x51]],
        [[0x0f, 0x7d, 0x63, 0x8c, 0x6e, 0x5c, 0xde, 0x30, 0xdf, 0x65, 0xfa, 0x2e, 0xb0, 0xa3, 0x25, 0x05, 0x54, 0xbd, 0x25, 0xba, 0x06, 0xae, 0xdf, 0x8b, 0xd9, 0x1b, 0xea, 0x38, 0xb3, 0x05, 0x16, 0x09], [0xc7, 0x8c, 0xbf, 0x64, 0x28, 0xad, 0xf8, 0xa5, 0x5a, 0x6f, 0xc9, 0xba, 0xd5, 0x7f, 0xd5, 0xd6, 0xbd, 0x66, 0x2f, 0x3d, 0xaa, 0x54, 0xf6, 0xba, 0x32, 0x22, 0x9a, 0x1e, 0x52, 0x05, 0xf4, 0x1d]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xaa, 0x1f, 0xbb, 0xeb, 0xfe, 0xe4, 0x87, 0xfc, 0xb1, 0x2c, 0xb7, 0x88, 0xf4, 0xc6, 0xb9, 0xf5, 0x24, 0x46, 0xf2, 0xa5, 0x9f, 0x8f, 0x8a, 0x93, 0x70, 0x69, 0xd4, 0x56, 0xec, 0xfd, 0x06, 0x46], [0x4e, 0x66, 0xcf, 0x4e, 0x34, 0xce, 0x0c, 0xd9, 0xa6, 0x50, 0xd6, 0x5e, 0x95, 0xaf, 0xe9, 0x58, 0xfa, 0xee, 0x9b, 0xb8, 0xa5, 0x0f, 0x35, 0xe0, 0x43, 0x82, 0x6d, 0x65, 0xe6, 0xd9, 0x00, 0x0f]],
        [[0x7b, 0x75, 0x3a, 0xfc, 0x64, 0xd3, 0x29, 0x7e, 0xdd, 0x49, 0x9a, 0x59, 0x53, 0xbf, 0xb4, 0xa7, 0x52, 0xb3, 0x05, 0xab, 0xc3, 0xaf, 0x16, 0x1a, 0x85, 0x42, 0x32, 0xa2, 0x86, 0xfa, 0x39, 0x43], [0x0e, 0x4b, 0xa3, 0x63, 0x8a, 0xfe, 0xa5, 0x58, 0xf1, 0x13, 0xbd, 0x9d, 0xaa, 0x7f, 0x76, 0x40, 0x70, 0x81, 0x10, 0x75, 0x99, 0xbb, 0xbe, 0x0b, 0x16, 0xe9, 0xba, 0x62, 0x34, 0xcc, 0x07, 0x6d]],
        [[0xc3, 0xf1, 0xc6, 0x93, 0x65, 0xee, 0x0b, 0xbc, 0xea, 0x14, 0xf0, 0xc1, 0xf8, 0x84, 0x89, 0xc2, 0xc9, 0xd7, 0xea, 0x34, 0xca, 0xa7, 0xc4, 0x99, 0xd5, 0x50, 0x69, 0xcb, 0xd6, 0x21, 0x63, 0x7c], [0x99, 0xeb, 0x7c, 0x31, 0x73, 0x64, 0x67, 0x7f, 0x0c, 0x66, 0xaa, 0x8c, 0x69, 0x91, 0xe2, 0x26, 0xd3, 0x23, 0xe2, 0x76, 0x5d, 0x32, 0x52, 0xdf, 0x5d, 0xc5, 0x8f, 0xb7, 0x7c, 0x84, 0xb3, 0x70]],
        [[0xeb, 0x01, 0xc7, 0x36, 0x97, 0x4e, 0xb6, 0xab, 0x5f, 0x0d, 0x2c, 0xba, 0x67, 0x64, 0x55, 0xde, 0xbc, 0xff, 0xa6, 0xec, 0x04, 0xd3, 0x8d, 0x39, 0x56, 0x5e, 0xee, 0xf8, 0xe4, 0x2e, 0x33, 0x62], [0x65, 0xef, 0xb8, 0x9f, 0xc8, 0x4b, 0xa7, 0xfd, 0x21, 0x49, 0x9b, 0x92, 0x35, 0x82, 0xd6, 0x0a, 0x9b, 0xf2, 0x79, 0xf1, 0x47, 0x2f, 0x6a, 0x7e, 0x9f, 0xcf, 0x18, 0x02, 0x3c, 0xfb, 0x1b, 0x3e]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x2f, 0x8b, 0xc8, 0x40, 0x51, 0xd1, 0xac, 0x1a, 0x0b, 0xe4, 0xa9, 0xa2, 0x42, 0x21, 0x19, 0x2f, 0x7b, 0x97, 0xbf, 0xf7, 0x57, 0x6d, 0x3f, 0x3d, 0x4f, 0x0f, 0xe2, 0xb2, 0x81, 0x00, 0x9e, 0x7b], [0x8c, 0x85, 0x2b, 0xc4, 0xfc, 0xf1, 0xab, 0xe8, 0x79, 0x22, 0xc4, 0x84, 0x17, 0x3a, 0xfa, 0x86, 0xa6, 0x7d, 0xf9, 0xf3, 0x6f, 0x03, 0x57, 0x20, 0x4d, 0x79, 0xf9, 0x6e, 0x71, 0x54, 0x38, 0x09]],
        [[0x40, 0x29, 0x74, 0xa8, 0x2f, 0x5e, 0xf9, 0x79, 0xa4, 0xf3, 0x3e, 0xb9, 0xfd, 0x33, 0x31, 0xac, 0x9a, 0x69, 0x88, 0x1e, 0x77, 0x21, 0x2d, 0xf3, 0x91, 0x52, 0x26, 0x15, 0xb2, 0xa6, 0xcf, 0x7e], [0xc6, 0x20, 0x47, 0x6c, 0xa4, 0x7d, 0xcb, 0x63, 0xea, 0x5b, 0x03, 0xdf, 0x3e, 0x88, 0x81, 0x6d, 0xce, 0x07, 0x42, 0x18, 0x60, 0x7e, 0x7b, 0x55, 0xfe, 0x6a, 0xf3, 0xda, 0x5c, 0x8b, 0x95, 0x10]],
        [[0x62, 0xe4, 0x0d, 0x03, 0xb4, 0xd7, 0xcd, 0xfa, 0xbd, 0x46, 0xdf, 0x93, 0x71, 0x10, 0x2c, 0xa8, 0x3b, 0xb6, 0x09, 0x05, 0x70, 0x84, 0x43, 0x29, 0xa8, 0x59, 0xf5, 0x8e, 0x10, 0xe4, 0xd7, 0x20], [0x57, 0x82, 0x1c, 0xab, 0xbf, 0x62, 0x70, 0xe8, 0xc4, 0xcf, 0xf0, 0x28, 0x6e, 0x16, 0x3c, 0x08, 0x78, 0x89, 0x85, 0x46, 0x0f, 0xf6, 0x7f, 0xcf, 0xcb, 0x7e, 0xb8, 0x25, 0xe9, 0x5a, 0xfa, 0x03]],
        [[0xfb, 0x95, 0x92, 0x63, 0x50, 0xfc, 0x62, 0xf0, 0xa4, 0x5e, 0x8c, 0x18, 0xc2, 0x17, 0x24, 0xb7, 0x78, 0xc2, 0xa9, 0xe7, 0x6a, 0x32, 0xd6, 0x29, 0x85, 0xaf, 0xcb, 0x8d, 0x91, 0x13, 0xda, 0x6b], [0x36, 0x0a, 0xc2, 0xb6, 0x4b, 0xa5, 0x5d, 0x07, 0x17, 0x41, 0x31, 0x5f, 0x62, 0x46, 0xf8, 0x92, 0xf9, 0x66, 0x48, 0x73, 0xa6, 0x97, 0x0d, 0x7d, 0x88, 0xee, 0x62, 0xb1, 0x03, 0xa8, 0x3f, 0x2c]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x4a, 0xb1, 0x70, 0x8a, 0xa9, 0xe8, 0x63, 0x79, 0x00, 0xe2, 0x25, 0x16, 0xca, 0x4b, 0x0f, 0xa4, 0x66, 0xad, 0x19, 0x9f, 0x88, 0x67, 0x0c, 0x8b, 0xc2, 0x4a, 0x5b, 0x2b, 0x6d, 0x95, 0xaf, 0x19], [0x8b, 0x9d, 0xb6, 0xcc, 0x60, 0xb4, 0x72, 0x4f, 0x17, 0x69, 0x5a, 0x4a, 0x68, 0x34, 0xab, 0xa1, 0x45, 0x32, 0x3c, 0x83, 0x87, 0x72, 0x30, 0x54, 0x77, 0x68, 0xae, 0xfb, 0xb5, 0x8b, 0x22, 0x5e]],
        [[0xf1, 0xb9, 0x87, 0x35, 0xc5, 0xbb, 0xb9, 0xcf, 0xf5, 0xd6, 0xcd, 0xd5, 0x0c, 0x7c, 0x0e, 0xe6, 0x90, 0x34, 0xfb, 0x51, 0x42, 0x1e, 0x6d, 0xac, 0x9a, 0x46, 0xc4, 0x97, 0x29, 0x32, 0xbf, 0x45], [0x66, 0x9e, 0xc6, 0x24, 0xc0, 0xed, 0xa5, 0x5d, 0x88, 0xd4, 0xf0, 0x73, 0x97, 0x7b, 0xea, 0x7f, 0x42, 0xff, 0x21, 0xa0, 0x9b, 0x2f, 0x9a, 0xfd, 0x53, 0x57, 0x07, 0x84, 0x48, 0x88, 0x9d, 0x52]],
        [[0xc6, 0x96, 0x48, 0x34, 0x2a, 0x06, 0xaf, 0x94, 0x3d, 0xf4, 0x1a, 0xcf, 0xf2, 0xc0, 0x21, 0xc2, 0x42, 0x5e, 0xc8, 0x2f, 0x35, 0xa2, 0x3e, 0x29, 0xfa, 0x0c, 0x84, 0xe5, 0x89, 0x72, 0x7c, 0x06], [0x32, 0x65, 0x03, 0xe5, 0x89, 0xa6, 0x6e, 0xb3, 0x5b, 0x8e, 0xca, 0xeb, 0xfe, 0x22, 0x56, 0x8b, 0x5d, 0x14, 0x4b, 0x4d, 0xf9, 0xbe, 0xb5, 0xf5, 0xe6, 0x5c, 0x7b, 0x8b, 0xf4, 0x13, 0x11, 0x34]],
        [[0x07, 0xc6, 0x22, 0x15, 0xe2, 0x9c, 0x60, 0xa2, 0x19, 0xd9, 0x27, 0xae, 0x37, 0x4e, 0xa6, 0xc9, 0x80, 0xa6, 0x91, 0x8f, 0x12, 0x49, 0xe5, 0x00, 0x18, 0x47, 0xd1, 0xd7, 0x28, 0x22, 0x63, 0x39], [0xe8, 0xe2, 0x00, 0x7e, 0xf2, 0x9e, 0x1e, 0x99, 0x39, 0x95, 0x04, 0xbd, 0x1e, 0x67, 0x7b, 0xb2, 0x26, 0xac, 0xe6, 0xaa, 0xe2, 0x46, 0xd5, 0xe4, 0xe8, 0x86, 0xbd, 0xab, 0x7c, 0x55, 0x59, 0x6f]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x24, 0x64, 0x6e, 0x9b, 0x35, 0x71, 0x78, 0xce, 0x33, 0x03, 0x21, 0x33, 0x36, 0xf1, 0x73, 0x9b, 0xb9, 0x15, 0x8b, 0x2c, 0x69, 0xcf, 0x4d, 0xed, 0x4f, 0x4d, 0x57, 0x14, 0x13, 0x82, 0xa4, 0x4d], [0x65, 0x6e, 0x0a, 0xa4, 0x59, 0x07, 0x17, 0xf2, 0x6b, 0x4a, 0x1f, 0x6e, 0xf6, 0xb5, 0xbc, 0x62, 0xe4, 0xb6, 0xda, 0xa2, 0x93, 0xbc, 0x29, 0x05, 0xd2, 0xd2, 0x73, 0x46, 0x03, 0x16, 0x40, 0x31]],
        [[0x4c, 0x73, 0x6d, 0x15, 0xbd, 0xa1, 0x4d, 0x5c, 0x13, 0x0b, 0x24, 0x06, 0x98, 0x78, 0x1c, 0x5b, 0xeb, 0x1f, 0x18, 0x54, 0x43, 0xd9, 0x55, 0x66, 0xda, 0x29, 0x21, 0xe8, 0xb8, 0x3c, 0x42, 0x22], [0xb4, 0xcd, 0x08, 0x6f, 0x15, 0x23, 0x1a, 0x0b, 0x22, 0xed, 0xd1, 0xf1, 0xa7, 0xc7, 0x73, 0x45, 0xf3, 0x9e, 0xce, 0x76, 0xb7, 0xf6, 0x39, 0xb6, 0x8e, 0x79, 0xbe, 0xe9, 0x9b, 0xcf, 0x7d, 0x62]],
        [[0x92, 0x5b, 0xfc, 0x72, 0xfd, 0xba, 0xf1, 0xfd, 0xa6, 0x7c, 0x95, 0xe3, 0x61, 0x3f, 0xe9, 0x03, 0xd4, 0x2b, 0xd4, 0x20, 0xd9, 0xdb, 0x4d, 0x32, 0x3e, 0xf5, 0x11, 0x64, 0xe3, 0xb4, 0xbe, 0x32], [0x86, 0x17, 0x90, 0xe7, 0xc9, 0x1f, 0x10, 0xa5, 0x6a, 0x2d, 0x39, 0xd0, 0x3b, 0xc4, 0xa6, 0xe9, 0x59, 0x13, 0xda, 0x1a, 0xe6, 0xa0, 0xb9, 0x3c, 0x50, 0xb8, 0x40, 0x7c, 0x15, 0x36, 0x5a, 0x42]],
        [[0xb4, 0x0b, 0x32, 0xab, 0xdc, 0x04, 0x51, 0x55, 0x21, 0x1e, 0x0b, 0x75, 0x99, 0x89, 0x73, 0x35, 0x3a, 0x91, 0x2b, 0xfe, 0xe7, 0x49, 0xea, 0x76, 0xc1, 0xf9, 0x46, 0xb9, 0x53, 0x02, 0x23, 0x04], [0xfc, 0x5a, 0x1e, 0x1d, 0x74, 0x58, 0x95, 0xa6, 0x8f, 0x7b, 0x97, 0x3e, 0x17, 0x3b, 0x79, 0x2d, 0xa6, 0x57, 0xef, 0x45, 0x02, 0x0b, 0x4d, 0x6e, 0x9e, 0x93, 0x8d, 0x2f, 0xd9, 0x9d, 0xdb, 0x04]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xc0, 0xd7, 0x56, 0x97, 0x58, 0x91, 0xde, 0x09, 0x4f, 0x9f, 0xbe, 0x63, 0xb0, 0x83, 0x86, 0x43, 0x5d, 0xbc, 0xe0, 0xf3, 0xc0, 0x75, 0xbf, 0x8b, 0x8e, 0xaa, 0xf7, 0x8b, 0x64, 0x6e, 0xb0, 0x63], [0x16, 0xae, 0x8b, 0xe0, 0x9b, 0x24, 0x68, 0x5c, 0x44, 0xc2, 0xd0, 0x08, 0xb7, 0x7b, 0x62, 0xfd, 0x7f, 0xd8, 0xd4, 0xb7, 0x50, 0xfd, 0x2c, 0x1b, 0xbf, 0x41, 0x95, 0xd9, 0x8e, 0xd8, 0x17, 0x1b]],
        [[0x86, 0x55, 0x37, 0x8e, 0xc3, 0x38, 0x48, 0x14, 0xb5, 0x97, 0xd2, 0xa7, 0x54, 0x45, 0xf1, 0x35, 0x44, 0x38, 0x9e, 0xf1, 0x1b, 0xb6, 0x34, 0x00, 0x3c, 0x96, 0xee, 0x29, 0x00, 0xea, 0x2c, 0x0b], [0xea, 0xda, 0x99, 0x9e, 0x19, 0x83, 0x66, 0x6d, 0xe9, 0x76, 0x87, 0x50, 0xd1, 0xfd, 0x3c, 0x60, 0x87, 0xc6, 0x41, 0xd9, 0x8e, 0xdb, 0x5e, 0xde, 0xaa, 0x9a, 0xd3, 0x28, 0xda, 0x95, 0xea, 0x47]],
        [[0xd0, 0x80, 0xba, 0x19, 0xae, 0x1d, 0xa9, 0x79, 0xf6, 0x3f, 0xac, 0x5d, 0x6f, 0x96, 0x1f, 0x2a, 0xce, 0x29, 0xb2, 0xff, 0x37, 0xf1, 0x94, 0x8f, 0x0c, 0xb5, 0x28, 0xba, 0x9a, 0x21, 0xf6, 0x66], [0x02, 0xfb, 0x54, 0xb8, 0x05, 0xf3, 0x81, 0x52, 0x69, 0x34, 0x46, 0x9d, 0x86, 0x76, 0x8f, 0xd7, 0xf8, 0x6a, 0x66, 0xff, 0xe6, 0xa7, 0x90, 0xf7, 0x5e, 0xcd, 0x6a, 0x9b, 0x55, 0xfc, 0x9d, 0x48]],
        [[0xbd, 0xaa, 0x13, 0xe6, 0xcd, 0x45, 0x4a, 0xa4, 0x59, 0x0a, 0x64, 0xb1, 0x98, 0xd6, 0x34, 0x13, 0x04, 0xe6, 0x97, 0x94, 0x06, 0xcb, 0xd4, 0x4e, 0xbb, 0x96, 0xcd, 0xd1, 0x57, 0xd1, 0xe3, 0x06], [0x7a, 0x6c, 0x45, 0x27, 0xc4, 0x93, 0x7f, 0x7d, 0x7c, 0x62, 0x50, 0x38, 0x3a, 0x6b, 0xb5, 0x88, 0xc6, 0xd9, 0xf1, 0x78, 0x19, 0xb9, 0x39, 0x93, 0x3d, 0xc9, 0xe0, 0x9c, 0x3c, 0xce, 0xf5, 0x72]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x24, 0xea, 0x23, 0x7d, 0x56, 0x2c, 0xe2, 0x59, 0x0e, 0x85, 0x60, 0x04, 0x88, 0x5a, 0x74, 0x1e, 0x4b, 0xef, 0x13, 0xda, 0x4c, 0xff, 0x83, 0x45, 0x85, 0x3f, 0x08, 0x95, 0x2c, 0x20, 0x13, 0x1f], [0x48, 0x5f, 0x27, 0x90, 0x5c, 0x02, 0x42, 0xad, 0x78, 0x47, 0x5c, 0xb5, 0x7e, 0x08, 0x85, 0x00, 0xfa, 0x7f, 0xfd, 0xfd, 0xe7, 0x09, 0x11, 0xf2, 0x7e, 0x1b, 0x38, 0x6c, 0x35, 0x6d, 0x33, 0x66]],
        [[0x93, 0x03, 0x36, 0x81, 0xac, 0xe4, 0x20, 0x09, 0x35, 0x4c, 0x45, 0xb2, 0x1e, 0x4c, 0x14, 0x21, 0xe6, 0xe9, 0x8a, 0x7b, 0x8d, 0xfe, 0x1e, 0xc6, 0x3e, 0xc1, 0x35, 0xfa, 0xe7, 0x70, 0x4e, 0x1d], [0x61, 0x2e, 0xc2, 0xdd, 0x95, 0x57, 0xd1, 0xab, 0x80, 0xe8, 0x63, 0x17, 0xb5, 0x48, 0xe4, 0x8a, 0x11, 0x9e, 0x72, 0xbe, 0x85, 0x8d, 0x51, 0x0a, 0xf2, 0x9f, 0xe0, 0x1c, 0xa9, 0x07, 0x28, 0x7b]],
        [[0xbb, 0x71, 0x14, 0x5e, 0x26, 0x8c, 0x3d, 0xc8, 0xe9, 0x7c, 0xd3, 0xd6, 0xd1, 0x2f, 0x07, 0x6d, 0xe6, 0xdf, 0xfb, 0x79, 0xd6, 0x99, 0x59, 0x96, 0x48, 0x40, 0x0f, 0x3a, 0x7b, 0xb2, 0xa0, 0x72], [0x4e, 0x3b, 0x69, 0xc8, 0x43, 0x75, 0x51, 0x6c, 0x79, 0x56, 0xe4, 0xcb, 0xf7, 0xa6, 0x51, 0xc2, 0x2c, 0x42, 0x0b, 0xd4, 0x82, 0x20, 0x1c, 0x01, 0x08, 0x66, 0xd7, 0xbf, 0x04, 0x56, 0xfc, 0x02]],
        [[0x24, 0xe8, 0xb7, 0x60, 0xae, 0x47, 0x80, 0xfc, 0xe5, 0x23, 0xe7, 0xc2, 0xc9, 0x85, 0xe6, 0x98, 0xa0, 0x29, 0x4e, 0xe1, 0x84, 0x39, 0x2d, 0x95, 0x2c, 0xf3, 0x45, 0x3c, 0xff, 0xaf, 0x27, 0x4c], [0x6b, 0xa6, 0xf5, 0x4b, 0x11, 0xbd, 0xba, 0x5b, 0x9e, 0xc4, 0xa4, 0x51, 0x1e, 0xbe, 0xd0, 0x90, 0x3a, 0x9c, 0xc2, 0x26, 0xb6, 0x1e, 0xf1, 0x95, 0x7d, 0xc8, 0x6d, 0x52, 0xe6, 0x99, 0x2c, 0x5f]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x85, 0xe0, 0x24, 0x32, 0xb4, 0xd1, 0xef, 0xfc, 0x69, 0xa2, 0xbf, 0x8f, 0x72, 0x2c, 0x95, 0xf6, 0xe4, 0x6e, 0x7d, 0x90, 0xf7, 0x57, 0x81, 0xa0, 0xf7, 0xda, 0xef, 0x33, 0x07, 0xe3, 0x6b, 0x78], [0x36, 0x27, 0x3e, 0xc6, 0x12, 0x07, 0xab, 0x4e, 0xbe, 0x69, 0x9d, 0xb3, 0xbe, 0x08, 0x7c, 0x2a, 0x47, 0x08, 0xfd, 0xd4, 0xcd, 0x0e, 0x27, 0x34, 0x5b, 0x98, 0x34, 0x2f, 0x77, 0x5f, 0x3a, 0x65]],
        [[0x13, 0xaa, 0x2e, 0x4c, 0xf0, 0x22, 0xb8, 0x6c, 0xb3, 0x19, 0x4d, 0xeb, 0x6b, 0xd0, 0xa4, 0xc6, 0x9c, 0xdd, 0xc8, 0x5b, 0x81, 0x57, 0x89, 0xdf, 0x33, 0xa9, 0x68, 0x49, 0x80, 0xe4, 0xfe, 0x21], [0x00, 0x17, 0x90, 0x30, 0xe9, 0xd3, 0x60, 0x30, 0x31, 0xc2, 0x72, 0x89, 0x7a, 0x36, 0xa5, 0xbd, 0x39, 0x83, 0x85, 0x50, 0xa1, 0x5d, 0x6c, 0x41, 0x1d, 0xb5, 0x2c, 0x07, 0x40, 0x77, 0x0b, 0x50]],
        [[0x64, 0x34, 0xec, 0xc0, 0x9e, 0x44, 0x41, 0xaf, 0xa0, 0x36, 0x05, 0x6d, 0xea, 0x30, 0x25, 0x46, 0x35, 0x24, 0x9d, 0x86, 0xbd, 0x95, 0xf1, 0x6a, 0x46, 0xd7, 0x94, 0x54, 0xf9, 0x3b, 0xbd, 0x5d], [0x77, 0x5b, 0xe2, 0x37, 0xc7, 0xe1, 0x7c, 0x13, 0x8c, 0x9f, 0x7b, 0x7b, 0x2a, 0xce, 0x42, 0xa3, 0xb9, 0x2a, 0x99, 0xa8, 0xc0, 0xd8, 0x3c, 0x86, 0xb0, 0xfb, 0xe9, 0x76, 0x77, 0xf7, 0xf5, 0x56]],
        [[0xdf, 0xb3, 0x46, 0x11, 0x6e, 0x13, 0xb7, 0x28, 0x4e, 0x56, 0xdd, 0xf1, 0xac, 0xad, 0x58, 0xc3, 0xf8, 0x88, 0x94, 0x5e, 0x06, 0x98, 0xa1, 0xe4, 0x6a, 0xfb, 0x0a, 0x49, 0x5d, 0x8a, 0xfe, 0x77], [0x46, 0x02, 0xf5, 0xa5, 0xaf, 0xc5, 0x75, 0x6d, 0xba, 0x45, 0x35, 0x0a, 0xfe, 0xc9, 0xac, 0x22, 0x91, 0x8d, 0x21, 0x95, 0x33, 0x03, 0xc0, 0x8a, 0x16, 0xf3, 0x39, 0xe0, 0x01, 0x0f, 0x53, 0x3c]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x34, 0x75, 0x37, 0x1f, 0x34, 0x4e, 0xa9, 0x1d, 0x68, 0x67, 0xf8, 0x49, 0x98, 0x96, 0xfc, 0x4c, 0x65, 0x97, 0xf7, 0x02, 0x4a, 0x52, 0x6c, 0x01, 0xbd, 0x48, 0xbb, 0x1b, 0xed, 0xa4, 0xe2, 0x53], [0x59, 0xd5, 0x9b, 0x5a, 0xa2, 0x90, 0xd3, 0xb8, 0x37, 0x4c, 0x55, 0x82, 0x28, 0x08, 0x0f, 0x7f, 0xaa, 0x81, 0x65, 0xe0, 0x0c, 0x52, 0xc9, 0xa3, 0x32, 0x27, 0x64, 0xda, 0xfd, 0x34, 0x23, 0x5a]],
        [[0xb5, 0xb0, 0x0c, 0x4d, 0xb3, 0x7b, 0x23, 0xc8, 0x1f, 0x8a, 0x39, 0x66, 0xe6, 0xba, 0x4c, 0x10, 0x37, 0xca, 0x9c, 0x7c, 0x05, 0x9e, 0xff, 0xc0, 0xf8, 0x8e, 0xb1, 0x8f, 0x6f, 0x67, 0x18, 0x26], [0x4b, 0x41, 0x13, 0x54, 0x23, 0x1a, 0xa4, 0x4e, 0xa9, 0x8b, 0x1e, 0x4b, 0xfc, 0x15, 0x24, 0xbb, 0x7e, 0xcb, 0xb6, 0x1e, 0x1b, 0xf5, 0xf2, 0xc8, 0x56, 0xec, 0x32, 0xa2, 0x60, 0x5b, 0xa0, 0x2a]],
        [[0xa4, 0x29, 0x47, 0x86, 0x2e, 0x92, 0x4f, 0x11, 0x4f, 0xf3, 0xb2, 0x5c, 0xd5, 0x3e, 0xa6, 0xb9, 0xc8, 0xe2, 0x33, 0x11, 0x1f, 0x01, 0x8f, 0xb0, 0x9b, 0xc7, 0xa5, 0xff, 0x83, 0x0f, 0x1e, 0x28], [0x1d, 0x29, 0x7a, 0xa1, 0xec, 0x8e, 0xb5, 0xad, 0xea, 0x02, 0x68, 0x60, 0x74, 0x29, 0x1c, 0xa5, 0xcf, 0xc8, 0x3b, 0x7d, 0x8b, 0x2b, 0x7c, 0xad, 0xa4, 0x40, 0x17, 0x51, 0x59, 0x7c, 0x2e, 0x5d]],
        [[0x0a, 0x6c, 0x4f, 0xbc, 0x3e, 0x32, 0xe7, 0x4a, 0x1a, 0x13, 0xc1, 0x49, 0x38, 0xbf, 0xf7, 0xc2, 0xd3, 0x8f, 0x6b, 0xad, 0x52, 0xf7, 0xcf, 0xbc, 0x27, 0xcb, 0x40, 0x67, 0x76, 0xcd, 0x6d, 0x56], [0xe5, 0xb0, 0x27, 0xad, 0xbe, 0x9b, 0xf2, 0xb5, 0x63, 0xde, 0x3a, 0x23, 0x95, 0xb7, 0x0a, 0x7e, 0xf3, 0x9e, 0x45, 0x6f, 0x19, 0x39, 0x75, 0x8f, 0x39, 0x3d, 0x0f, 0xc0, 0x9f, 0xf1, 0xe9, 0x51]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x88, 0xaa, 0x14, 0x24, 0x86, 0x94, 0x11, 0x12, 0x3e, 0x1a, 0xb5, 0xcc, 0xbb, 0xe0, 0x9c, 0xd5, 0x9c, 0x6d, 0xba, 0x58, 0x72, 0x8d, 0xfb, 0x22, 0x7b, 0x9f, 0x7c, 0x94, 0x30, 0xb3, 0x51, 0x21], [0xf6, 0x74, 0x3d, 0xf2, 0xaf, 0xd0, 0x1e, 0x03, 0x7c, 0x23, 0x6b, 0xc9, 0xfc, 0x25, 0x70, 0x90, 0xdc, 0x9a, 0xa4, 0xfb, 0x49, 0xfc, 0x3d, 0x0a, 0x35, 0x38, 0x6f, 0xe4, 0x7e, 0x50, 0x01, 0x2a]],
        [[0xd6, 0xe3, 0x96, 0x61, 0x3a, 0xfd, 0xef, 0x9b, 0x1f, 0x90, 0xa4, 0x24, 0x14, 0x5b, 0xc8, 0xde, 0x50, 0xb1, 0x1d, 0xaf, 0xe8, 0x55, 0x8a, 0x87, 0x0d, 0xfe, 0xaa, 0x3b, 0x82, 0x2c, 0x8d, 0x7b], [0x85, 0x0c, 0xaf, 0xf8, 0x83, 0x44, 0x49, 0xd9, 0x45, 0xcf, 0xf7, 0x48, 0xd9, 0x53, 0xb4, 0xf1, 0x65, 0xa0, 0xe1, 0xc3, 0xb3, 0x15, 0xed, 0x89, 0x9b, 0x4f, 0x62, 0xb3, 0x57, 0xa5, 0x45, 0x1c]],
        [[0x8f, 0x12, 0xea, 0xaf, 0xd1, 0x1f, 0x79, 0x10, 0x0b, 0xf6, 0xa3, 0x7b, 0xea, 0xac, 0x8b, 0x57, 0x32, 0x62, 0xe7, 0x06, 0x12, 0x51, 0xa0, 0x3b, 0x43, 0x5e, 0xa4, 0x20, 0x78, 0x31, 0xce, 0x0d], [0x84, 0x7c, 0xc2, 0xa6, 0x91, 0x23, 0xce, 0xbd, 0xdc, 0xf9, 0xce, 0xd5, 0x75, 0x30, 0x22, 0xe6, 0xf9, 0x43, 0x62, 0x0d, 0xf7, 0x75, 0x9d, 0x7f, 0x8c, 0xff, 0x7d, 0xe4, 0x72, 0xac, 0x9f, 0x1c]],
        [[0x88, 0xc1, 0x99, 0xd0, 0x3c, 0x1c, 0x5d, 0xb4, 0xef, 0x13, 0x0f, 0x90, 0xb9, 0x36, 0x2f, 0x95, 0x95, 0xc6, 0xdc, 0xde, 0x0a, 0x51, 0xe2, 0x8d, 0xf3, 0xbc, 0x51, 0xec, 0xdf, 0xb1, 0xa2, 0x5f], [0x2e, 0x68, 0xa1, 0x23, 0x7d, 0x9b, 0x40, 0x69, 0x85, 0x7b, 0x42, 0xbf, 0x90, 0x4b, 0xd6, 0x40, 0x2f, 0xd7, 0x52, 0x52, 0xb2, 0x21, 0xde, 0x64, 0xbd, 0x88, 0xc3, 0x6d, 0xa5, 0xfa, 0x81, 0x3f]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xfb, 0xfd, 0x47, 0x7b, 0x8a, 0x66, 0x9e, 0x79, 0x2e, 0x64, 0x82, 0xef, 0xf7, 0x21, 0xec, 0xf6, 0xd8, 0x86, 0x09, 0x31, 0x7c, 0xdd, 0x03, 0x6a, 0x58, 0xa0, 0x77, 0xb7, 0x9b, 0x8c, 0x87, 0x1f], [0x55, 0x47, 0xe4, 0xa8, 0x3d, 0x55, 0x21, 0x34, 0xab, 0x1d, 0xae, 0xe0, 0xf4, 0xea, 0xdb, 0xc5, 0xb9, 0x58, 0xbf, 0xc4, 0x2a, 0x89, 0x31, 0x1a, 0xf4, 0x2d, 0xe1, 0xca, 0x37, 0x99, 0x47, 0x59]],
        [[0xc7, 0xca, 0x63, 0xc1, 0x49, 0xa9, 0x35, 0x45, 0x55, 0x7e, 0xda, 0x64, 0x32, 0x07, 0x50, 0xf7, 0x32, 0xac, 0xde, 0x75, 0x58, 0x9b, 0x11, 0xb2, 0x3a, 0x1f, 0xf5, 0xf7, 0x79, 0x04, 0xe6, 0x08], [0x46, 0xfa, 0x22, 0x4b, 0xfa, 0xe1, 0xfe, 0x96, 0xfc, 0x67, 0xba, 0x67, 0x97, 0xc4, 0xe7, 0x1b, 0x86, 0x90, 0x5f, 0xee, 0xf4, 0x5b, 0x11, 0xb2, 0xcd, 0xad, 0xee, 0xc2, 0x48, 0x6c, 0x2b, 0x1b]],
        [[0xe3, 0x39, 0x62, 0xb4, 0x4f, 0x31, 0x04, 0xc9, 0xda, 0xd5, 0x73, 0x51, 0x57, 0xc5, 0xb8, 0xf3, 0xa3, 0x43, 0x70, 0xe4, 0x61, 0x81, 0x84, 0xe2, 0xbb, 0xbf, 0x4f, 0x9e, 0xa4, 0x5e, 0x74, 0x06], [0x29, 0xac, 0xff, 0x27, 0xe0, 0x59, 0xbe, 0x39, 0x9c, 0x0d, 0x83, 0xd7, 0x10, 0x0b, 0x15, 0xb7, 0xe1, 0xc2, 0x2c, 0x30, 0x73, 0x80, 0x3a, 0x7d, 0x5d, 0xab, 0x58, 0x6b, 0xc1, 0xf0, 0xf4, 0x22]],
        [[0xfe, 0x7f, 0xfb, 0x35, 0x7d, 0xc6, 0x01, 0x23, 0x28, 0xc4, 0x02, 0xac, 0x1f, 0x42, 0xb4, 0x9d, 0xfc, 0x00, 0x94, 0xa5, 0xee, 0xca, 0xda, 0x97, 0x09, 0x41, 0x77, 0x87, 0x5d, 0x7b, 0x87, 0x78], [0xf5, 0xfb, 0x90, 0x2d, 0x81, 0x19, 0x9e, 0x2f, 0x6d, 0x85, 0x88, 0x8c, 0x40, 0x5c, 0x77, 0x41, 0x4d, 0x01, 0x19, 0x76, 0x60, 0xe8, 0x4c, 0x48, 0xe4, 0x33, 0x83, 0x32, 0x6c, 0xb4, 0x41, 0x03]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xff, 0x10, 0xc2, 0x09, 0x4f, 0x6e, 0xf4, 0xd2, 0xdf, 0x7e, 0xca, 0x7b, 0x1c, 0x1d, 0xba, 0xa3, 0xb6, 0xda, 0x67, 0x33, 0xd4, 0x87, 0x36, 0x4b, 0x11, 0x20, 0x05, 0xa6, 0x29, 0xc1, 0x87, 0x17], [0xf6, 0x96, 0xca, 0x2f, 0xda, 0x38, 0xa7, 0x1b, 0xfc, 0xca, 0x7d, 0xfe, 0x08, 0x89, 0xe2, 0x47, 0x2b, 0x6a, 0x5d, 0x4b, 0xfa, 0xa1, 0xb4, 0xde, 0xb6, 0xc2, 0x31, 0x51, 0xf5, 0xe0, 0xa4, 0x0b]],
        [[0x5c, 0xe5, 0xc6, 0x04, 0x8e, 0x2b, 0x57, 0xbe, 0x38, 0x85, 0x23, 0xcb, 0xb7, 0xbe, 0x4f, 0xa9, 0xd3, 0x6e, 0x12, 0xaa, 0xd5, 0xb2, 0x2e, 0x93, 0x29, 0x9a, 0x4a, 0x88, 0x18, 0x43, 0xf5, 0x01], [0x50, 0xfc, 0xdb, 0xa2, 0x59, 0x21, 0x8d, 0xbd, 0x7e, 0x33, 0xae, 0x2f, 0x87, 0x1a, 0xd0, 0x97, 0xc7, 0x0d, 0x4d, 0x63, 0x01, 0xef, 0x05, 0x84, 0xec, 0x40, 0xdd, 0xa8, 0x0a, 0x4f, 0x70, 0x0b]],
        [[0x41, 0x69, 0x01, 0x67, 0x5c, 0xd3, 0x8a, 0xc5, 0xcf, 0x3f, 0xd1, 0x57, 0xd1, 0x67, 0x3e, 0x01, 0x39, 0xb5, 0xcb, 0x81, 0x56, 0x96, 0x26, 0xb6, 0xc2, 0xe7, 0x5c, 0xfb, 0x63, 0x97, 0x58, 0x06], [0x0c, 0x0e, 0xf3, 0xba, 0xf0, 0xe5, 0xba, 0xb2, 0x57, 0x77, 0xc6, 0x20, 0x9b, 0x89, 0x24, 0xbe, 0xf2, 0x9c, 0x8a, 0xba, 0x69, 0xc1, 0xf1, 0xb0, 0x4f, 0x2a, 0x05, 0x9a, 0xee, 0x10, 0x7e, 0x36]],
        [[0x3f, 0x26, 0xe9, 0x40, 0xe9, 0x03, 0xad, 0x06, 0x69, 0x91, 0xe0, 0xd1, 0x89, 0x60, 0x84, 0x79, 0xde, 0x27, 0x6d, 0xe6, 0x76, 0xbd, 0xea, 0xe6, 0xae, 0x48, 0xc3, 0x67, 0xc0, 0x57, 0xcd, 0x2f], [0x7f, 0xc1, 0xdc, 0xb9, 0xc7, 0xbc, 0x86, 0x3d, 0x55, 0x4b, 0x28, 0x7a, 0xfb, 0x4d, 0xc7, 0xf8, 0xbc, 0x67, 0x2a, 0x60, 0x4d, 0x8f, 0x07, 0x0b, 0x1a, 0x17, 0xbf, 0xfa, 0xac, 0xa7, 0x3d, 0x1a]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x91, 0x3f, 0xed, 0x5e, 0x18, 0x78, 0x3f, 0x23, 0x2c, 0x0d, 0x8c, 0x44, 0x00, 0xe8, 0xfb, 0xe9, 0x8e, 0xd6, 0xd1, 0x36, 0x58, 0x57, 0x9e, 0xae, 0x4b, 0x5c, 0x0b, 0x07, 0xbc, 0x6b, 0x55, 0x2b], [0x6f, 0x4d, 0x17, 0xd7, 0xe1, 0x84, 0xd9, 0x78, 0xb1, 0x90, 0xfd, 0x2e, 0xb3, 0xb5, 0x19, 0x3f, 0x1b, 0xfa, 0xc0, 0x68, 0xb3, 0xdd, 0x00, 0x2e, 0x89, 0xbd, 0x7e, 0x80, 0x32, 0x13, 0xa0, 0x7b]],
        [[0x1a, 0x6f, 0x40, 0xaf, 0x44, 0x44, 0xb0, 0x43, 0x8f, 0x0d, 0xd0, 0x1e, 0xc4, 0x0b, 0x19, 0x5d, 0x8e, 0xfe, 0xc1, 0xf3, 0xc5, 0x5c, 0x91, 0xf8, 0x04, 0x4e, 0xbe, 0x90, 0xb4, 0x47, 0x5c, 0x3f], [0xb0, 0x3b, 0x2c, 0xf3, 0xfe, 0x32, 0x71, 0x07, 0x3f, 0xaa, 0xba, 0x45, 0x60, 0xa8, 0x8d, 0xea, 0x54, 0xcb, 0x39, 0x10, 0xb4, 0xf2, 0x8b, 0xd2, 0x14, 0x82, 0x42, 0x07, 0x8e, 0xe9, 0x7c, 0x53]],
        [[0xb0, 0xae, 0xc1, 0x8d, 0xc9, 0x8f, 0xb9, 0x7a, 0x77, 0xef, 0xba, 0x79, 0xa0, 0x3c, 0xa8, 0xf5, 0x6a, 0xe2, 0x3f, 0x5d, 0x00, 0xe3, 0x4b, 0x45, 0x24, 0x7b, 0x43, 0x78, 0x55, 0x1d, 0x2b, 0x1e], [0x01, 0xb8, 0xd6, 0x16, 0x67, 0xa0, 0x15, 0xb9, 0xe1, 0x58, 0xa4, 0xa7, 0x31, 0x37, 0x77, 0x2f, 0x8b, 0x12, 0x9f, 0xf4, 0x3f, 0xc7, 0x36, 0x66, 0xd2, 0xa8, 0x56, 0xf7, 0x7f, 0x74, 0xc6, 0x41]],
        [[0x5d, 0xf8, 0xb4, 0xa8, 0x30, 0xdd, 0xcc, 0x38, 0xa5, 0xd3, 0xca, 0xd8, 0xd1, 0xf8, 0xb2, 0x31, 0x91, 0xd4, 0x72, 0x05, 0x57, 0x4a, 0x3b, 0x82, 0x4a, 0xc6, 0x68, 0x20, 0xe2, 0x18, 0x41, 0x61], [0x19, 0xd4, 0x8d, 0x47, 0x29, 0x12, 0x65, 0xb0, 0x11, 0x78, 0x47, 0xb5, 0xcb, 0xa3, 0xa5, 0xfa, 0x05, 0x85, 0x54, 0xa9, 0x33, 0x97, 0x8d, 0x2b, 0xc2, 0xfe, 0x99, 0x35, 0x28, 0xe5, 0xeb, 0x63]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xb1, 0x3f, 0x3f, 0xef, 0xd8, 0xf4, 0xfc, 0xb3, 0xa0, 0x60, 0x50, 0x06, 0x2b, 0x29, 0x52, 0x70, 0x15, 0x0b, 0x24, 0x24, 0xf8, 0x5f, 0x79, 0x18, 0xcc, 0xff, 0x89, 0x99, 0x84, 0xa1, 0xae, 0x13], [0x44, 0x1f, 0xb8, 0xc2, 0x01, 0xc1, 0x30, 0x19, 0x55, 0x05, 0x60, 0x10, 0xa4, 0x6c, 0x2d, 0x67, 0x70, 0xe5, 0x25, 0x1b, 0xf2, 0xbf, 0xdd, 0xfb, 0x70, 0x2b, 0xa1, 0x8c, 0x9c, 0x94, 0x84, 0x08]],
        [[0xe7, 0xc4, 0x43, 0x4d, 0xc9, 0x2b, 0x69, 0x5d, 0x1d, 0x3c, 0xaf, 0xbb, 0x43, 0x38, 0x4e, 0x98, 0x3d, 0xed, 0x0d, 0x21, 0x03, 0xfd, 0xf0, 0x99, 0x47, 0x04, 0xb0, 0x98, 0x69, 0x55, 0x72, 0x0f], [0x5e, 0xdf, 0x15, 0x53, 0x3b, 0x86, 0x80, 0xb0, 0xf1, 0x70, 0x68, 0x8f, 0x66, 0x7c, 0x0e, 0x49, 0x1a, 0xd8, 0x6b, 0xfe, 0x4e, 0xef, 0xca, 0x47, 0xd4, 0x03, 0xc1, 0x37, 0x50, 0x9c, 0xc1, 0x16]],
        [[0xcd, 0x24, 0xc6, 0x3e, 0x0c, 0x82, 0x9b, 0x91, 0x2b, 0x61, 0x4a, 0xb2, 0x0f, 0x88, 0x55, 0x5f, 0x5a, 0x57, 0xff, 0xe5, 0x74, 0x0b, 0x13, 0x43, 0x00, 0xd8, 0x6b, 0xcf, 0xd2, 0x15, 0x03, 0x2c], [0xdc, 0xff, 0x15, 0x61, 0x2f, 0x4a, 0x2f, 0x62, 0xf2, 0x04, 0x2f, 0xb5, 0x0c, 0xb7, 0x1e, 0x3f, 0x74, 0x1a, 0x0f, 0xd7, 0xea, 0xcd, 0xd9, 0x7d, 0xf6, 0x12, 0x0e, 0x2f, 0xdb, 0x5a, 0x3b, 0x16]],
        [[0x1b, 0x37, 0x47, 0xe3, 0xf5, 0x9e, 0xea, 0x2c, 0x2a, 0xe7, 0x82, 0x36, 0xf4, 0x1f, 0x81, 0x47, 0x92, 0x4b, 0x69, 0x0e, 0x11, 0x8c, 0x5d, 0x53, 0x5b, 0x81, 0x27, 0x08, 0xbc, 0xa0, 0xae, 0x25], [0x69, 0x32, 0xa1, 0x05, 0x11, 0x42, 0x00, 0xd2, 0x59, 0xac, 0x4d, 0x62, 0x8b, 0x13, 0xe2, 0x50, 0x5d, 0xa0, 0x9d, 0x9b, 0xfd, 0xbb, 0x12, 0x41, 0x75, 0x41, 0x9e, 0xcc, 0xdc, 0xc7, 0xdc, 0x5d]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xd9, 0xe3, 0x38, 0x06, 0x46, 0x70, 0x82, 0x5e, 0x28, 0x49, 0x79, 0xff, 0x25, 0xd2, 0x4e, 0x29, 0x8d, 0x06, 0xb0, 0x23, 0xae, 0x9b, 0x66, 0xe4, 0x7d, 0xc0, 0x70, 0x91, 0xa3, 0xfc, 0xec, 0x4e], [0x62, 0x12, 0x37, 0x6a, 0x30, 0xf6, 0x1e, 0xfb, 0x14, 0x5c, 0x0d, 0x0e, 0xb7, 0x81, 0x6a, 0xe7, 0x08, 0x05, 0xac, 0xaa, 0x38, 0x46, 0xe2, 0x73, 0xea, 0x4b, 0x07, 0x81, 0x43, 0x7c, 0x9e, 0x5e]],
        [[0xfc, 0xf9, 0x21, 0x4f, 0x2e, 0x76, 0x9b, 0x1f, 0x28, 0x60, 0x77, 0x43, 0x32, 0x9d, 0xbe, 0x17, 0x30, 0x2a, 0xc6, 0x18, 0x92, 0x66, 0x62, 0x30, 0x98, 0x40, 0x11, 0xa6, 0x7f, 0x18, 0x84, 0x28], [0x3f, 0xab, 0xd3, 0xf4, 0x8a, 0x76, 0xa1, 0x3c, 0xca, 0x2d, 0x49, 0xc3, 0xea, 0x08, 0x0b, 0x85, 0x17, 0x2a, 0xc3, 0x6c, 0x08, 0xfd, 0x57, 0x9f, 0x3d, 0x5f, 0xdf, 0x67, 0x68, 0x42, 0x00, 0x32]],
        [[0x51, 0x60, 0x1b, 0x06, 0x4f, 0x8a, 0x21, 0xba, 0x38, 0xa8, 0xba, 0xd6, 0x40, 0xf6, 0xe9, 0x9b, 0x76, 0x4d, 0x56, 0x21, 0x5b, 0x0a, 0x9b, 0x2e, 0x4f, 0x3d, 0x81, 0x32, 0x08, 0x9f, 0x97, 0x5b], [0xe5, 0x44, 0xec, 0x06, 0x9d, 0x90, 0x79, 0x9f, 0xd3, 0xe0, 0x79, 0xaf, 0x8f, 0x10, 0xfd, 0xdd, 0x04, 0xae, 0x27, 0x97, 0x46, 0x33, 0x79, 0xea, 0xb8, 0x4e, 0xca, 0x5a, 0x59, 0x57, 0xe1, 0x0e]],
        [[0x1a, 0xda, 0xf3, 0xa5, 0x41, 0x43, 0x28, 0xfc, 0x7e, 0xe7, 0x71, 0xea, 0xc6, 0x3b, 0x59, 0xcc, 0x2e, 0xd3, 0x40, 0xec, 0xb3, 0x13, 0x6f, 0x44, 0xcd, 0x13, 0xb2, 0x37, 0xf2, 0x6e, 0xd9, 0x1c], [0xe3, 0xdb, 0x60, 0xcd, 0x5c, 0x4a, 0x18, 0x0f, 0xef, 0x73, 0x36, 0x71, 0x8c, 0xf6, 0x11, 0xb4, 0xd8, 0xce, 0x17, 0x5e, 0x4f, 0x26, 0x77, 0x97, 0x5f, 0xcb, 0xef, 0x91, 0xeb, 0x6a, 0x62, 0x7a]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x18, 0x4a, 0xa2, 0x97, 0x08, 0x81, 0x2d, 0x83, 0xc4, 0xcc, 0xf0, 0x83, 0x7e, 0xec, 0x0d, 0x95, 0x4c, 0x5b, 0xfb, 0xfa, 0x98, 0x80, 0x4a, 0x66, 0x56, 0x0c, 0x51, 0xb3, 0xf2, 0x04, 0x5d, 0x27], [0x3b, 0xb9, 0xb8, 0x06, 0x5a, 0x2e, 0xfe, 0xc3, 0x82, 0x37, 0x9c, 0xa3, 0x11, 0x1f, 0x9c, 0xa6, 0xda, 0x63, 0x48, 0x9b, 0xad, 0xde, 0x2d, 0xa6, 0xbc, 0x6e, 0x32, 0xda, 0x27, 0x65, 0xdd, 0x57]],
        [[0x84, 0x4f, 0x37, 0x31, 0x7d, 0x2e, 0xbc, 0xad, 0x87, 0x07, 0x2a, 0x6b, 0x37, 0xfc, 0x5f, 0xeb, 0x4e, 0x75, 0x35, 0xa6, 0xde, 0xab, 0x0a, 0x19, 0x3a, 0xb7, 0xb1, 0xef, 0x92, 0x6a, 0x3b, 0x3c], [0x3b, 0xb2, 0x94, 0x6d, 0x39, 0x60, 0xac, 0xee, 0xe7, 0x81, 0x1a, 0x3b, 0x76, 0x87, 0x5c, 0x05, 0x94, 0x2a, 0x45, 0xb9, 0x80, 0xe9, 0x22, 0xb1, 0x07, 0xcb, 0x40, 0x9e, 0x70, 0x49, 0x6d, 0x12]],
        [[0xfd, 0x18, 0x78, 0x84, 0xa8, 0x4c, 0x7d, 0x6e, 0x59, 0xa6, 0xe5, 0x74, 0xf1, 0x19, 0xa6, 0x84, 0x2e, 0x51, 0xc1, 0x29, 0x13, 0xf2, 0x14, 0x6b, 0x5d, 0x53, 0x51, 0xf7, 0xef, 0xbf, 0x01, 0x22], [0xa4, 0x4b, 0x62, 0x4c, 0xe6, 0xfd, 0x72, 0x07, 0xf2, 0x81, 0xfc, 0xf2, 0xbd, 0x12, 0x7c, 0x68, 0x76, 0x2a, 0xba, 0xf5, 0x65, 0xb1, 0x1f, 0x17, 0x0a, 0x38, 0xb0, 0xbf, 0xc0, 0xf8, 0xf4, 0x2a]],
        [[0x55, 0x60, 0x55, 0x5b, 0xe4, 0x1d, 0x71, 0x4c, 0x9d, 0x5b, 0x9f, 0x70, 0xa6, 0x85, 0x9a, 0x2c, 0xa0, 0xe2, 0x32, 0x48, 0xce, 0x9e, 0x2a, 0xa5, 0x07, 0x3b, 0xc7, 0x6c, 0x86, 0x77, 0xde, 0x3c], [0xf7, 0x18, 0x7a, 0x96, 0x7e, 0x43, 0x57, 0xa9, 0x55, 0xfc, 0x4e, 0xb6, 0x72, 0x00, 0xf2, 0xe4, 0xd7, 0x52, 0xd3, 0xd3, 0xb6, 0x85, 0xf6, 0x71, 0xc7, 0x44, 0x3f, 0x7f, 0xd7, 0xb3, 0xf2, 0x79]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x46, 0xca, 0xa7, 0x55, 0x7b, 0x79, 0xf3, 0xca, 0x5a, 0x65, 0xf6, 0xed, 0x50, 0x14, 0x7b, 0xe4, 0xc4, 0x2a, 0x65, 0x9e, 0xe2, 0xf9, 0xca, 0xa7, 0x22, 0x26, 0x53, 0xcb, 0x21, 0x5b, 0xa7, 0x31], [0x90, 0xd7, 0xc5, 0x26, 0x08, 0xbd, 0xb0, 0x53, 0x63, 0x58, 0xc3, 0x31, 0x5e, 0x75, 0x46, 0x15, 0x91, 0xa6, 0xf8, 0x2f, 0x1a, 0x08, 0x65, 0x88, 0x2f, 0x98, 0x04, 0xf1, 0x7c, 0x6e, 0x00, 0x77]],
        [[0x81, 0x21, 0x61, 0x09, 0xf6, 0x4e, 0xf1, 0x92, 0xee, 0x63, 0x61, 0x73, 0x87, 0xc7, 0x54, 0x0e, 0x42, 0x4b, 0xc9, 0x47, 0xd1, 0xb8, 0x7e, 0x91, 0x75, 0x37, 0x99, 0x28, 0xb8, 0xdd, 0x7f, 0x50], [0x89, 0x8f, 0xc0, 0xbe, 0x5d, 0xd6, 0x9f, 0xa0, 0xf0, 0x9d, 0x81, 0xce, 0x3a, 0x7b, 0x98, 0x58, 0xbb, 0xd7, 0x78, 0xc8, 0x3f, 0x13, 0xf1, 0x74, 0x19, 0xdf, 0xf8, 0x98, 0x89, 0x5d, 0xfa, 0x5f]],
        [[0x9e, 0x35, 0x85, 0x94, 0x47, 0x1f, 0x90, 0x15, 0x26, 0xd0, 0x84, 0xed, 0x8a, 0x80, 0xf7, 0x63, 0x42, 0x86, 0x27, 0xd7, 0xf4, 0x75, 0x58, 0xdc, 0x9c, 0xc0, 0x22, 0x7e, 0x20, 0x35, 0xfd, 0x1f], [0x68, 0x0e, 0x6f, 0x97, 0xba, 0x70, 0xbb, 0xa3, 0x0e, 0xe5, 0x0b, 0x12, 0xf4, 0xa2, 0xdc, 0x47, 0xf8, 0xe6, 0xd0, 0x23, 0x6c, 0x33, 0xa8, 0x99, 0x46, 0x6e, 0x0f, 0x44, 0xba, 0x76, 0x48, 0x0f]],
        [[0xa3, 0x2a, 0x61, 0x37, 0xe2, 0x59, 0x12, 0x0e, 0x27, 0xba, 0x64, 0x43, 0xae, 0xc0, 0x42, 0x69, 0x79, 0xa4, 0x1e, 0x29, 0x8b, 0x15, 0xeb, 0xf8, 0xaf, 0xd4, 0xa2, 0x68, 0x33, 0xb5, 0x7a, 0x24], [0x2c, 0x19, 0x33, 0xdd, 0x1b, 0xab, 0xec, 0x01, 0xb0, 0x23, 0xf8, 0x42, 0x2b, 0x06, 0x88, 0xea, 0x3d, 0x2d, 0x00, 0x2a, 0x78, 0x45, 0x4d, 0x38, 0xed, 0x2e, 0x2e, 0x44, 0x49, 0xed, 0xcb, 0x33]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xa0, 0x68, 0xe8, 0x41, 0x8f, 0x91, 0xf8, 0x11, 0x13, 0x90, 0x2e, 0xa7, 0xab, 0x30, 0xef, 0xad, 0xa0, 0x61, 0x00, 0x88, 0xef, 0xdb, 0xce, 0x5b, 0x5c, 0xbb, 0x62, 0xc8, 0x56, 0xf9, 0x00, 0x73], [0x3f, 0x60, 0xc1, 0x82, 0x2d, 0xa3, 0x28, 0x58, 0x24, 0x9e, 0x9f, 0xe3, 0x70, 0xcc, 0x09, 0x4e, 0x1a, 0x3f, 0x11, 0x11, 0x15, 0x07, 0x3c, 0xa4, 0x41, 0xe0, 0x65, 0xa3, 0x0a, 0x41, 0x6d, 0x11]],
        [[0x31, 0x40, 0x01, 0x52, 0x56, 0x94, 0x5b, 0x28, 0x8a, 0xaa, 0x52, 0xee, 0xd8, 0x0a, 0x05, 0x8d, 0xcd, 0xb5, 0xaa, 0x2e, 0x38, 0xaa, 0xb7, 0x87, 0xf7, 0x2b, 0xfb, 0x04, 0xcb, 0x84, 0x3d, 0x54], [0x20, 0xef, 0x59, 0xde, 0xa4, 0x2b, 0x93, 0x6e, 0x2e, 0xec, 0x42, 0x9a, 0xd4, 0x2d, 0xf4, 0x46, 0x58, 0x27, 0x2b, 0x18, 0x8f, 0x83, 0x3d, 0x69, 0x9e, 0xd4, 0x3e, 0xb6, 0xc5, 0xfd, 0x58, 0x03]],
        [[0x33, 0x89, 0xc9, 0x63, 0x62, 0x1c, 0x17, 0xb4, 0x60, 0xc4, 0x26, 0x68, 0x09, 0xc3, 0x2e, 0x37, 0x0f, 0x7b, 0xb4, 0x9c, 0xb6, 0xf9, 0xfb, 0xd4, 0x51, 0x78, 0xc8, 0x63, 0xea, 0x77, 0x47, 0x07], [0x32, 0xb4, 0x18, 0x47, 0x79, 0xcb, 0xd4, 0x5a, 0x07, 0x14, 0x0f, 0xa0, 0xd5, 0xac, 0xd0, 0x41, 0x40, 0xab, 0x61, 0x23, 0xe5, 0x2a, 0x2a, 0x6f, 0xf7, 0xa8, 0xd4, 0x76, 0xef, 0xe7, 0x45, 0x6c]],
        [[0xa1, 0x5e, 0x60, 0x4f, 0xfb, 0xe1, 0x70, 0x6a, 0x1f, 0x55, 0x4f, 0x09, 0xb4, 0x95, 0x33, 0x36, 0xc6, 0x81, 0x01, 0x18, 0x06, 0x25, 0x27, 0xa4, 0xb4, 0x24, 0xa4, 0x86, 0x03, 0x4c, 0xac, 0x02], [0x77, 0x38, 0xde, 0xd7, 0x60, 0x48, 0x07, 0xf0, 0x74, 0xa8, 0xff, 0x54, 0xe5, 0x30, 0x43, 0xff, 0x77, 0xfb, 0x21, 0x07, 0xff, 0xb2, 0x07, 0x6b, 0xe4, 0xe5, 0x30, 0xfc, 0x19, 0x6c, 0xa3, 0x01]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x13, 0xc5, 0x2c, 0xac, 0xd3, 0x83, 0x82, 0x7c, 0x29, 0xf7, 0x05, 0xa5, 0x00, 0xb6, 0x1f, 0x86, 0x55, 0xf4, 0xd6, 0x2f, 0x0c, 0x99, 0xd0, 0x65, 0x9b, 0x6b, 0x46, 0x0d, 0x43, 0xf8, 0x16, 0x28], [0x1e, 0x7f, 0xb4, 0x74, 0x7e, 0xb1, 0x89, 0x4f, 0x18, 0x5a, 0xab, 0x64, 0x06, 0xdf, 0x45, 0x87, 0xe0, 0x6a, 0xc6, 0xf0, 0x0e, 0xc9, 0x24, 0x35, 0x38, 0xea, 0x30, 0x54, 0xb4, 0xc4, 0x52, 0x54]],
        [[0xe9, 0x9f, 0xdc, 0x3f, 0xc1, 0x89, 0x44, 0x74, 0x27, 0xe4, 0xc1, 0x90, 0xff, 0x4a, 0xa7, 0x3c, 0xee, 0xcd, 0xf4, 0x1d, 0x25, 0x94, 0x7f, 0x63, 0x16, 0x48, 0xbc, 0x64, 0xfe, 0x95, 0xc4, 0x0c], [0x8b, 0x19, 0x75, 0x6e, 0x03, 0x06, 0x5e, 0x6a, 0x6f, 0x1a, 0x8c, 0xe3, 0xd3, 0x28, 0xf2, 0xe0, 0xb9, 0x7a, 0x43, 0x69, 0xe6, 0xd3, 0xc0, 0xfe, 0x7e, 0x97, 0xab, 0x6c, 0x7b, 0x8e, 0x13, 0x42]],
        [[0xd4, 0xca, 0x70, 0x3d, 0xab, 0xfb, 0x5f, 0x5e, 0x00, 0x0c, 0xcc, 0x77, 0x22, 0xf8, 0x78, 0x55, 0xae, 0x62, 0x35, 0xfb, 0x9a, 0xc6, 0x03, 0xe4, 0x0c, 0xee, 0xab, 0xc7, 0xc0, 0x89, 0x87, 0x54], [0x32, 0xad, 0xae, 0x85, 0x58, 0x43, 0xb8, 0xb1, 0xe6, 0x3e, 0x00, 0x9c, 0x78, 0x88, 0x56, 0xdb, 0x9c, 0xfc, 0x79, 0xf6, 0xf9, 0x41, 0x5f, 0xb7, 0xbc, 0x11, 0xf9, 0x20, 0x36, 0x1c, 0x53, 0x2b]],
        [[0x5a, 0x20, 0x5b, 0xa1, 0xa5, 0x44, 0x91, 0x24, 0x02, 0x63, 0x12, 0x64, 0xb8, 0x55, 0xf6, 0xde, 0x2c, 0xdb, 0x47, 0xb8, 0xc6, 0x0a, 0xc3, 0x00, 0x78, 0x93, 0xd8, 0xf5, 0xf5, 0x18, 0x28, 0x0a], [0xd6, 0x1b, 0x9a, 0x6c, 0xe5, 0x46, 0xea, 0x70, 0x96, 0x8d, 0x4e, 0x2a, 0x52, 0x21, 0x26, 0x4b, 0xb1, 0xbb, 0x0f, 0x7c, 0xa9, 0x9b, 0x04, 0xbb, 0x51, 0x08, 0xf1, 0x9a, 0xa4, 0x76, 0x7c, 0x18]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xfa, 0x94, 0xf7, 0x40, 0xd0, 0xd7, 0xeb, 0xa9, 0x82, 0x36, 0xd5, 0x15, 0xb9, 0x33, 0x7a, 0xbf, 0x8a, 0xf2, 0x63, 0xaa, 0x37, 0xf5, 0x59, 0xac, 0xbd, 0xbb, 0x32, 0x36, 0xbe, 0x73, 0x99, 0x38], [0x2c, 0xb3, 0xda, 0x7a, 0xd8, 0x3d, 0x99, 0xca, 0xd2, 0xf4, 0xda, 0x99, 0x8e, 0x4f, 0x98, 0xb7, 0xf4, 0xae, 0x3e, 0x9f, 0x8e, 0x35, 0x60, 0xa4, 0x33, 0x75, 0xa4, 0x04, 0x93, 0xb1, 0x6b, 0x4d]],
        [[0x97, 0x9d, 0xa8, 0xcd, 0x97, 0x7b, 0x9d, 0xb9, 0xe7, 0xa5, 0xef, 0xfd, 0xa8, 0x42, 0x6b, 0xc3, 0x62, 0x64, 0x7d, 0xa5, 0x1b, 0xc9, 0x9e, 0xd2, 0x45, 0xb9, 0xee, 0x03, 0xb0, 0xbf, 0xc0, 0x68], [0xed, 0xb7, 0x84, 0x2c, 0xf6, 0xd3, 0xa1, 0x6b, 0x24, 0x6d, 0x87, 0x56, 0x97, 0x59, 0x79, 0x62, 0x9f, 0xac, 0xed, 0xf3, 0xc9, 0x89, 0x21, 0x2e, 0x04, 0xb3, 0xcc, 0x2f, 0xbe, 0xd6, 0x0a, 0x4b]],
        [[0x39, 0x61, 0x05, 0xed, 0x25, 0x89, 0x8b, 0x5d, 0x1b, 0xcb, 0x0c, 0x55, 0xf4, 0x6a, 0x00, 0x8a, 0x46, 0xe8, 0x1e, 0xc6, 0x83, 0xc8, 0x5a, 0x76, 0xdb, 0xcc, 0x19, 0x7a, 0xcc, 0x67, 0x46, 0x0b], [0x53, 0xcf, 0xc2, 0xa1, 0xad, 0x6a, 0xf3, 0xcd, 0x8f, 0xc9, 0xde, 0x1c, 0xf8, 0x6c, 0x8f, 0xf8, 0x76, 0x42, 0xe7, 0xfe, 0xb2, 0x72, 0x21, 0x0a, 0x66, 0x74, 0x8f, 0xb7, 0xeb, 0xe4, 0x6f, 0x01]],
        [[0x22, 0x8c, 0x6b, 0xbe, 0xfc, 0x4d, 0x70, 0x62, 0x6e, 0x52, 0x77, 0x99, 0x88, 0x7e, 0x7b, 0x57, 0x7a, 0x0d, 0xfe, 0xdc, 0x72, 0x92, 0xf1, 0x68, 0x1d, 0x97, 0xd7, 0x7c, 0x8d, 0x53, 0x10, 0x37], [0x53, 0x88, 0x77, 0x02, 0xca, 0x27, 0xa8, 0xe5, 0x45, 0xe2, 0xa8, 0x48, 0x2a, 0xab, 0x18, 0xca, 0xea, 0x2d, 0x2a, 0x54, 0x17, 0x37, 0x32, 0x09, 0xdc, 0xe0, 0x4a, 0xb7, 0x7d, 0x82, 0x10, 0x7d]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x8a, 0x64, 0x1e, 0x14, 0x0a, 0x57, 0xd4, 0xda, 0x5c, 0x96, 0x9b, 0x01, 0x4c, 0x67, 0xbf, 0x8b, 0x30, 0xfe, 0x08, 0xdb, 0x0d, 0xd5, 0xa8, 0xd7, 0x09, 0x11, 0x85, 0xa2, 0xd3, 0x45, 0xfb, 0x7e], [0xda, 0x8c, 0xc2, 0xd0, 0xac, 0x18, 0xe8, 0x52, 0x36, 0xd4, 0x21, 0xa3, 0xdd, 0x57, 0x22, 0x79, 0xb7, 0xf8, 0x71, 0x9d, 0xc6, 0x91, 0x70, 0x86, 0x56, 0xbf, 0xa1, 0x11, 0x8b, 0x19, 0xe1, 0x0f]],
        [[0x18, 0x32, 0x98, 0x2c, 0x8f, 0x91, 0xae, 0x12, 0xf0, 0x8c, 0xea, 0xf3, 0x3c, 0xb9, 0x5d, 0xe4, 0x69, 0xed, 0xb2, 0x47, 0x18, 0xbd, 0xce, 0x16, 0x52, 0x5c, 0x23, 0xe2, 0xa5, 0x25, 0x52, 0x5d], [0xb9, 0xb1, 0xe7, 0x5d, 0x4e, 0xbc, 0xee, 0xbb, 0x40, 0x81, 0x77, 0x82, 0x19, 0xab, 0xb5, 0xc6, 0xee, 0xab, 0x5b, 0x6b, 0x63, 0x92, 0x8a, 0x34, 0x8d, 0xcd, 0xee, 0x4f, 0x49, 0xe5, 0xc9, 0x7e]],
        [[0x21, 0xac, 0x8b, 0x22, 0xcd, 0xc3, 0x9a, 0xe9, 0x5e, 0x78, 0xbd, 0xde, 0xba, 0xad, 0xab, 0xbf, 0x75, 0x41, 0x09, 0xc5, 0x58, 0xa4, 0x7d, 0x92, 0xb0, 0x7f, 0xf2, 0xa1, 0xd1, 0xc0, 0xb3, 0x6d], [0x62, 0x4f, 0xd0, 0x75, 0x77, 0xba, 0x76, 0x77, 0xd7, 0xb8, 0xd8, 0x92, 0x6f, 0x98, 0x34, 0x3d, 0xd6, 0x4e, 0x1c, 0x0f, 0xf0, 0x8f, 0x2e, 0xf1, 0xb3, 0xbd, 0xb1, 0xb9, 0xec, 0x99, 0xb4, 0x07]],
        [[0x60, 0x57, 0x2e, 0x9a, 0x72, 0x1d, 0x6b, 0x6e, 0x58, 0x33, 0x24, 0x8c, 0x48, 0x39, 0x46, 0x8e, 0x89, 0x6a, 0x88, 0x51, 0x23, 0x62, 0xb5, 0x32, 0x09, 0x36, 0xe3, 0x57, 0xf5, 0x98, 0xde, 0x6f], [0x8b, 0x2c, 0x00, 0x48, 0x4a, 0xf9, 0x5b, 0x87, 0x69, 0x52, 0xe5, 0x5b, 0xd1, 0xb1, 0xe5, 0x25, 0x25, 0xe0, 0x9c, 0xc2, 0x13, 0x44, 0xe8, 0xb9, 0x0a, 0x70, 0xad, 0xbd, 0x0f, 0x51, 0x94, 0x69]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xa2, 0xdc, 0xab, 0xa9, 0x25, 0x2d, 0xac, 0x5f, 0x03, 0x33, 0x08, 0xe7, 0x7e, 0xfe, 0x95, 0x36, 0x3c, 0x5b, 0x3a, 0xd3, 0x05, 0x82, 0x1c, 0x95, 0x2d, 0xd8, 0x77, 0x7e, 0x02, 0xd9, 0x5b, 0x70], [0xc2, 0xfe, 0x1b, 0x0c, 0x67, 0xcd, 0xd6, 0xe0, 0x51, 0x8e, 0x2c, 0xe0, 0x79, 0x88, 0xf0, 0xcf, 0x41, 0x4a, 0xad, 0x23, 0xd4, 0x46, 0xca, 0x94, 0xa1, 0xc3, 0xeb, 0x28, 0x06, 0xfa, 0x17, 0x14]],
        [[0x7b, 0xaa, 0x70, 0x0a, 0x4b, 0xfb, 0xf5, 0xbf, 0x80, 0xc5, 0xcf, 0x08, 0x7a, 0xdd, 0xa1, 0xf4, 0x9d, 0x54, 0x50, 0x53, 0x23, 0x77, 0x23, 0xf5, 0x34, 0xa5, 0x22, 0xd1, 0x0d, 0x96, 0x2e, 0x47], [0xcc, 0xb7, 0x32, 0x89, 0x57, 0xd0, 0x98, 0x75, 0xe4, 0x37, 0x99, 0xa9, 0xe8, 0xba, 0xed, 0xba, 0xeb, 0xc7, 0x4f, 0x15, 0x76, 0x07, 0x0c, 0x4c, 0xef, 0x9f, 0x52, 0xfc, 0x04, 0x5d, 0x58, 0x10]],
        [[0xce, 0x82, 0xf0, 0x8f, 0x79, 0x02, 0xa8, 0xd1, 0xda, 0x14, 0x09, 0x48, 0xee, 0x8a, 0x40, 0x98, 0x76, 0x60, 0x54, 0x5a, 0xde, 0x03, 0x24, 0xf5, 0xe6, 0x2f, 0xe1, 0x03, 0xbf, 0x68, 0x82, 0x7f], [0x64, 0xe9, 0x28, 0xc7, 0xa4, 0xcf, 0x2a, 0xf9, 0x90, 0x64, 0x72, 0x2c, 0x8b, 0xeb, 0xec, 0xa0, 0xf2, 0x7d, 0x35, 0xb5, 0x90, 0x4d, 0x7f, 0x5b, 0x4a, 0x49, 0xe4, 0xb8, 0x3b, 0xc8, 0xa1, 0x2f]],
        [[0x8b, 0xc5, 0xcc, 0x3d, 0x69, 0xa6, 0xa1, 0x18, 0x44, 0xbc, 0x4d, 0x77, 0x37, 0xc7, 0x86, 0xec, 0x0c, 0xc9, 0xd6, 0x44, 0xa9, 0x23, 0x27, 0xb9, 0x03, 0x34, 0xa7, 0x0a, 0xd5, 0xc7, 0x34, 0x37], [0xf9, 0x7e, 0x3e, 0x66, 0xee, 0xf9, 0x99, 0x28, 0xff, 0xad, 0x11, 0xd8, 0xe2, 0x66, 0xc5, 0xcd, 0x0f, 0x0d, 0x0b, 0x6a, 0xfc, 0x7c, 0x24, 0xa8, 0x4f, 0xa8, 0x5e, 0x80, 0x45, 0x8b, 0x6c, 0x41]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xef, 0x1e, 0xec, 0xf7, 0x8d, 0x77, 0xf2, 0xea, 0xdb, 0x60, 0x03, 0x21, 0xc0, 0xff, 0x5e, 0x67, 0xc3, 0x71, 0x0b, 0x21, 0xb4, 0x41, 0xa0, 0x68, 0x38, 0xc6, 0x01, 0xa3, 0xd3, 0x51, 0x3c, 0x3c], [0x92, 0xf8, 0xd6, 0x4b, 0xef, 0x42, 0x13, 0xb2, 0x4a, 0xc4, 0x2e, 0x72, 0x3f, 0xc9, 0x11, 0xbd, 0x74, 0x02, 0x0e, 0xf5, 0x13, 0x9d, 0x83, 0x1a, 0x1b, 0xd5, 0x54, 0xde, 0xc4, 0x1e, 0x16, 0x6c]],
        [[0x27, 0x52, 0xe4, 0x63, 0xaa, 0x94, 0xe6, 0xc3, 0x28, 0x9c, 0xc6, 0x56, 0xac, 0xfa, 0xb6, 0xbd, 0xe2, 0xcc, 0x76, 0xc6, 0x27, 0x27, 0xa2, 0x8e, 0x78, 0x2b, 0x84, 0x72, 0x10, 0xbd, 0x4e, 0x2a], [0xea, 0xa7, 0x23, 0xef, 0x04, 0x61, 0x80, 0x50, 0xc9, 0x6e, 0xa5, 0x96, 0xd1, 0xd1, 0xc8, 0xc3, 0x18, 0xd7, 0x2d, 0xfd, 0x26, 0xbd, 0xcb, 0x7b, 0x92, 0x51, 0x0e, 0x4a, 0x65, 0x57, 0xb8, 0x49]],
        [[0xab, 0x55, 0x36, 0xc3, 0xec, 0x63, 0x55, 0x11, 0x55, 0xf6, 0xa5, 0xc7, 0x01, 0x5f, 0xfe, 0x79, 0xd8, 0x0a, 0xf7, 0x03, 0xd8, 0x98, 0x99, 0xf5, 0xd0, 0x00, 0x54, 0x6b, 0x66, 0x28, 0xf5, 0x25], [0x7a, 0x8d, 0xa1, 0x5d, 0x70, 0x5d, 0x51, 0x27, 0xee, 0x30, 0x65, 0x56, 0x95, 0x46, 0xde, 0xbd, 0x03, 0x75, 0xb4, 0x57, 0x59, 0x89, 0xeb, 0x02, 0x9e, 0xcc, 0x89, 0x19, 0xa7, 0xcb, 0x17, 0x67]],
        [[0x6a, 0xeb, 0xfc, 0x9a, 0x9a, 0x10, 0xce, 0xdb, 0x3a, 0x1c, 0x3c, 0x6a, 0x9d, 0xea, 0x46, 0xbc, 0x45, 0x49, 0xac, 0xe3, 0x41, 0x12, 0x7c, 0xf0, 0xf7, 0x4f, 0xf9, 0xf7, 0xff, 0x2c, 0x89, 0x04], [0x30, 0x31, 0x54, 0x1a, 0x46, 0xca, 0xe6, 0xc6, 0xcb, 0xe2, 0xc3, 0xc1, 0x8b, 0x75, 0x81, 0xbe, 0xee, 0xf8, 0xa3, 0x11, 0x1c, 0x25, 0xa3, 0xa7, 0x35, 0x51, 0x55, 0xe2, 0x25, 0xaa, 0xe2, 0x3a]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xb4, 0x48, 0x10, 0x9f, 0x8a, 0x09, 0x76, 0xfa, 0xf0, 0x7a, 0xb0, 0x70, 0xf7, 0x83, 0x80, 0x52, 0x84, 0x2b, 0x26, 0xa2, 0xc4, 0x5d, 0x4f, 0xba, 0xb1, 0xc8, 0x40, 0x0d, 0x78, 0x97, 0xc4, 0x60], [0xd4, 0xb1, 0x6c, 0x08, 0xc7, 0x40, 0x38, 0x73, 0x5f, 0x0b, 0xf3, 0x76, 0x5d, 0xb2, 0xa5, 0x2f, 0x57, 0x57, 0x07, 0xed, 0x08, 0xa2, 0x6c, 0x4f, 0x08, 0x02, 0xb5, 0x0e, 0xee, 0x44, 0xfa, 0x22]],
        [[0x0f, 0x00, 0x3f, 0xa6, 0x04, 0x19, 0x56, 0x65, 0x31, 0x7f, 0x8b, 0xeb, 0x0d, 0xe1, 0x47, 0x89, 0x97, 0x16, 0x53, 0xfa, 0x81, 0xa7, 0xaa, 0xb2, 0xbf, 0x67, 0xeb, 0x72, 0x60, 0x81, 0x0d, 0x48], [0x7e, 0x13, 0x33, 0xcd, 0xa8, 0x84, 0x56, 0x1e, 0x67, 0xaf, 0x6b, 0x43, 0xac, 0x17, 0xaf, 0x16, 0xc0, 0x52, 0x99, 0x49, 0x5b, 0x87, 0x73, 0x7e, 0xb5, 0x43, 0xda, 0x6b, 0x1d, 0x0f, 0x2d, 0x55]],
        [[0xe9, 0x58, 0x1f, 0xff, 0x84, 0x3f, 0x93, 0x1c, 0xcb, 0xe1, 0x30, 0x69, 0xa5, 0x75, 0x19, 0x7e, 0x14, 0x5f, 0xf8, 0xfc, 0x09, 0xdd, 0xa8, 0x78, 0x9d, 0xca, 0x59, 0x8b, 0xd1, 0x30, 0x01, 0x13], [0xff, 0x76, 0x03, 0xc5, 0x4b, 0x89, 0x99, 0x70, 0x00, 0x59, 0x70, 0x9c, 0xd5, 0xd9, 0x11, 0x89, 0x5a, 0x46, 0xfe, 0xef, 0xdc, 0xd9, 0x55, 0x2b, 0x45, 0xa7, 0xb0, 0x2d, 0xfb, 0x24, 0xc2, 0x29]],
        [[0x38, 0x06, 0xf8, 0x0b, 0xac, 0x82, 0xc4, 0x97, 0x2b, 0x90, 0xe0, 0xf7, 0xa8, 0xab, 0x6c, 0x08, 0x80, 0x66, 0x90, 0x46, 0xf7, 0x26, 0x2d, 0xf8, 0xf1, 0xc4, 0x6b, 0x4a, 0x82, 0x98, 0x8e, 0x37], [0x8e, 0xb4, 0xee, 0xb8, 0xd4, 0x3f, 0xb2, 0x1b, 0xe0, 0x0a, 0x3d, 0x75, 0x34, 0x28, 0xa2, 0x8e, 0xc4, 0x92, 0x7b, 0xfe, 0x60, 0x6e, 0x6d, 0xb8, 0x31, 0x1d, 0x62, 0x0d, 0x78, 0x14, 0x42, 0x11]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x5e, 0xa8, 0xd8, 0x04, 0x9b, 0x73, 0xc9, 0xc9, 0xdc, 0x0d, 0x73, 0xbf, 0x0a, 0x0a, 0x73, 0xff, 0x18, 0x1f, 0x9c, 0x51, 0xaa, 0xc6, 0xf1, 0x83, 0x25, 0xfd, 0xab, 0xa3, 0x11, 0xd3, 0x01, 0x24], [0x4d, 0xe3, 0x7e, 0x38, 0x62, 0x5e, 0x64, 0xbb, 0x2b, 0x53, 0xb5, 0x03, 0x68, 0xc4, 0xf2, 0x2b, 0x5a, 0x03, 0x32, 0x99, 0x4a, 0x41, 0x9a, 0xe1, 0x1a, 0xae, 0x8c, 0x48, 0xf3, 0x24, 0x32, 0x65]],
        [[0xe8, 0xdd, 0xad, 0x3a, 0x8c, 0xea, 0xf4, 0xb3, 0xb2, 0xe5, 0x73, 0xf2, 0xed, 0x8b, 0xbf, 0xed, 0xb1, 0x0c, 0x0c, 0xfb, 0x2b, 0xf1, 0x01, 0x48, 0xe8, 0x26, 0x03, 0x8e, 0x27, 0x4d, 0x96, 0x72], [0xc8, 0x09, 0x3b, 0x60, 0xc9, 0x26, 0x4d, 0x7c, 0xf2, 0x9c, 0xd4, 0xa1, 0x3b, 0x26, 0xc2, 0x04, 0x33, 0x44, 0x76, 0x3c, 0x02, 0xbb, 0x11, 0x42, 0x0c, 0x22, 0xb7, 0xc6, 0xe1, 0xac, 0xb4, 0x0e]],
        [[0x6f, 0x85, 0xe7, 0xef, 0xde, 0x67, 0x30, 0xfc, 0xbf, 0x5a, 0xe0, 0x7b, 0x7a, 0x2a, 0x54, 0x6b, 0x5d, 0x62, 0x85, 0xa1, 0xf8, 0x16, 0x88, 0xec, 0x61, 0xb9, 0x96, 0xb5, 0xef, 0x2d, 0x43, 0x4d], [0x7c, 0x31, 0x33, 0xcc, 0xe4, 0xcf, 0x6c, 0xff, 0x80, 0x47, 0x77, 0xd1, 0xd8, 0xe9, 0x69, 0x97, 0x98, 0x7f, 0x20, 0x57, 0x1d, 0x1d, 0x4f, 0x08, 0x27, 0xc8, 0x35, 0x57, 0x40, 0xc6, 0x21, 0x0c]],
        [[0xd2, 0x8e, 0x9b, 0xfa, 0x42, 0x8e, 0xdf, 0x8f, 0xc7, 0x86, 0xf9, 0xa4, 0xca, 0x70, 0x00, 0x9d, 0x21, 0xbf, 0xec, 0x57, 0x62, 0x30, 0x58, 0x8c, 0x0d, 0x35, 0xdb, 0x5d, 0x8b, 0x6a, 0xa0, 0x5a], [0xc1, 0x58, 0x7c, 0x0d, 0x20, 0xdd, 0x11, 0x26, 0x5f, 0x89, 0x3b, 0x97, 0x58, 0xf8, 0x8b, 0xe3, 0xdf, 0x32, 0xe2, 0xfc, 0xd8, 0x67, 0xf2, 0xa5, 0x37, 0x1e, 0x6d, 0xec, 0x7c, 0x27, 0x20, 0x79]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xd0, 0xe9, 0xc0, 0xfa, 0x95, 0x45, 0x23, 0x96, 0xf1, 0x2c, 0x79, 0x25, 0x14, 0xce, 0x40, 0x14, 0x44, 0x2c, 0x36, 0x50, 0xd9, 0x63, 0x56, 0xb7, 0x56, 0x3b, 0x9e, 0xa7, 0xef, 0x89, 0xbb, 0x0e], [0xce, 0x7f, 0xdc, 0x0a, 0xcc, 0x82, 0x1c, 0x0a, 0x78, 0x71, 0xe8, 0x74, 0x8d, 0x01, 0x30, 0x0f, 0xa7, 0x11, 0x4c, 0xdf, 0x38, 0xd7, 0xa7, 0x0d, 0xf8, 0x48, 0x52, 0x00, 0x80, 0x7b, 0x5f, 0x0e]],
        [[0x25, 0x83, 0xe6, 0x94, 0x7b, 0x81, 0xb2, 0x91, 0xae, 0x0e, 0x05, 0xc9, 0xa3, 0x68, 0x2d, 0xd9, 0x88, 0x25, 0x19, 0x2a, 0x61, 0x61, 0x21, 0x97, 0x15, 0xa1, 0x35, 0xa5, 0x46, 0xc8, 0xa2, 0x0e], [0x1b, 0x03, 0x0d, 0x8b, 0x5a, 0x1b, 0x97, 0x4b, 0xf2, 0x16, 0x31, 0x3d, 0x1f, 0x33, 0xa0, 0x50, 0x3a, 0x18, 0xbe, 0x13, 0xa1, 0x76, 0xc1, 0xba, 0x1b, 0xf1, 0x05, 0x7b, 0x33, 0xa8, 0x82, 0x3b]],
        [[0xba, 0x36, 0x7b, 0x6d, 0xa9, 0xea, 0x14, 0x12, 0xc5, 0xfa, 0x91, 0x00, 0xba, 0x9b, 0x99, 0xcc, 0x56, 0x02, 0xe9, 0xa0, 0x26, 0x40, 0x66, 0x8c, 0xc4, 0xf8, 0x85, 0x33, 0x68, 0xe7, 0x03, 0x20], [0x50, 0x5b, 0xff, 0xa9, 0xb2, 0xf1, 0xf1, 0x78, 0xcf, 0x14, 0xa4, 0xa9, 0xfc, 0x09, 0x46, 0x94, 0x54, 0x65, 0x0d, 0x9c, 0x5f, 0x72, 0x21, 0xe2, 0x97, 0xa5, 0x2d, 0x81, 0xce, 0x4a, 0x5f, 0x79]],
        [[0x3d, 0x5f, 0x5c, 0xd2, 0xbc, 0x7d, 0x77, 0x0e, 0x2a, 0x6d, 0x22, 0x45, 0x84, 0x06, 0xc4, 0xdd, 0xc6, 0xa6, 0xc6, 0xd7, 0x49, 0xad, 0x6d, 0x87, 0x91, 0x0e, 0x3a, 0x67, 0x1d, 0x2c, 0x1d, 0x56], [0xfe, 0x7a, 0x74, 0xcf, 0xd4, 0xd2, 0xe5, 0x19, 0xde, 0xd0, 0xdb, 0x70, 0x23, 0x69, 0xe6, 0x6d, 0xec, 0xec, 0xcc, 0x09, 0x33, 0x6a, 0x77, 0xdc, 0x6b, 0x22, 0x76, 0x5d, 0x92, 0x09, 0xac, 0x2d]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x23, 0x15, 0x17, 0xeb, 0xd3, 0xdb, 0x12, 0x5e, 0x01, 0xf0, 0x91, 0xab, 0x2c, 0x41, 0xce, 0xac, 0xed, 0x1b, 0x4b, 0x2d, 0xbc, 0xdb, 0x17, 0x66, 0x89, 0x46, 0xad, 0x4b, 0x1e, 0x6f, 0x0b, 0x14], [0x11, 0xce, 0xbf, 0xb6, 0x77, 0x2d, 0x48, 0x22, 0x18, 0x4f, 0xa3, 0x5d, 0x4a, 0xb0, 0x70, 0x12, 0x3e, 0x54, 0xd7, 0xd8, 0x0e, 0x2b, 0x27, 0xdc, 0x53, 0xff, 0xca, 0x8c, 0x59, 0xb3, 0x4e, 0x44]],
        [[0x07, 0x76, 0x61, 0x0f, 0x66, 0xb2, 0x21, 0x39, 0x7e, 0xc0, 0xec, 0x45, 0x28, 0x82, 0xa1, 0x29, 0x32, 0x44, 0x35, 0x13, 0x5e, 0x61, 0x5e, 0x54, 0xcb, 0x7c, 0xef, 0xf6, 0x41, 0xcf, 0x9f, 0x0a], [0xdd, 0xf9, 0xda, 0x84, 0xc3, 0xe6, 0x8a, 0x9f, 0x24, 0xd2, 0x96, 0x5d, 0x39, 0x6f, 0x58, 0x8c, 0xc1, 0x56, 0x93, 0xab, 0xb5, 0x79, 0x3b, 0xd2, 0xa8, 0x73, 0x16, 0xed, 0xfa, 0xb4, 0x2f, 0x73]],
        [[0x8b, 0xb1, 0x95, 0xe5, 0x92, 0x50, 0x35, 0x11, 0x76, 0xac, 0xf4, 0x4d, 0x24, 0xc3, 0x32, 0xe6, 0xeb, 0xfe, 0x2c, 0x87, 0xc4, 0xf1, 0x56, 0xc4, 0x75, 0x24, 0x7a, 0x56, 0x85, 0x5a, 0x3a, 0x13], [0x0d, 0x16, 0xac, 0x3c, 0x4a, 0x58, 0x86, 0x3a, 0x46, 0x7f, 0x6c, 0xa3, 0x52, 0x6e, 0x37, 0xe4, 0x96, 0x9c, 0xe9, 0x5c, 0x66, 0x41, 0x67, 0xe4, 0xfb, 0x79, 0x0c, 0x05, 0xf6, 0x64, 0xd5, 0x7c]],
        [[0x28, 0xc1, 0xe1, 0x54, 0x73, 0xf2, 0xbf, 0x76, 0x74, 0x19, 0x19, 0x1b, 0xe4, 0xb9, 0xa8, 0x46, 0x65, 0x73, 0xf3, 0x77, 0x9b, 0x29, 0x74, 0x5b, 0xc6, 0x89, 0x6c, 0x2c, 0x7c, 0xf8, 0xb3, 0x0f], [0xf7, 0xd5, 0xe9, 0x74, 0x5d, 0xb8, 0x25, 0x16, 0xb5, 0x30, 0xbc, 0x84, 0xc5, 0xf0, 0xad, 0xca, 0x12, 0x28, 0xbc, 0x9d, 0xd4, 0xfa, 0x82, 0xe6, 0xe3, 0xbf, 0xa2, 0x15, 0x2c, 0xd4, 0x34, 0x10]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x61, 0xb1, 0x46, 0xba, 0x0e, 0x31, 0xa5, 0x67, 0x6c, 0x7f, 0xd6, 0xd9, 0x27, 0x85, 0x0f, 0x79, 0x14, 0xc8, 0x6c, 0x2f, 0x5f, 0x5b, 0x9c, 0x35, 0x3d, 0x38, 0x86, 0x77, 0x65, 0x55, 0x6a, 0x7b], [0xd3, 0xb0, 0x3a, 0x66, 0x60, 0x1b, 0x43, 0xf1, 0x26, 0x58, 0x99, 0x09, 0x8f, 0x2d, 0xa3, 0x14, 0x71, 0x85, 0xdb, 0xed, 0xf6, 0x26, 0xd5, 0x61, 0x9a, 0x73, 0xac, 0x0e, 0xea, 0xac, 0xb7, 0x0c]],
        [[0x5e, 0xf4, 0xe5, 0x17, 0x0e, 0x10, 0x9f, 0xe7, 0x43, 0x5f, 0x67, 0x5c, 0xac, 0x4b, 0xe5, 0x14, 0x41, 0xd2, 0xbf, 0x48, 0xf5, 0x14, 0xb0, 0x71, 0xc6, 0x61, 0xc1, 0xb2, 0x70, 0x58, 0xd2, 0x5a], [0x2d, 0xba, 0x16, 0x07, 0x92, 0x94, 0xdc, 0xbd, 0x50, 0x2b, 0xc9, 0x7f, 0x42, 0x00, 0xba, 0x61, 0xed, 0xf8, 0x43, 0xed, 0xf5, 0xf9, 0x40, 0x60, 0xb2, 0xb0, 0x82, 0xcb, 0xed, 0x75, 0xc7, 0x65]],
        [[0x80, 0xba, 0x0d, 0x09, 0x40, 0xa7, 0x39, 0xa6, 0x67, 0x34, 0x7e, 0x66, 0xbe, 0x56, 0xfb, 0x53, 0x78, 0xc4, 0x46, 0xe8, 0xed, 0x68, 0x6c, 0x7f, 0xce, 0xe8, 0x9f, 0xce, 0xa2, 0x64, 0x58, 0x53], [0xe8, 0xc1, 0xa9, 0xc2, 0x7b, 0x59, 0x21, 0x33, 0xe2, 0x43, 0x73, 0x2b, 0xac, 0x2d, 0xc1, 0x89, 0x3b, 0x15, 0xe2, 0xd5, 0xc0, 0x97, 0x8a, 0xfd, 0x6f, 0x36, 0x33, 0xb7, 0xb9, 0xc3, 0x88, 0x09]],
        [[0xd0, 0xb6, 0x56, 0x30, 0x5c, 0xae, 0xb3, 0x75, 0x44, 0xa4, 0x83, 0x51, 0x6e, 0x01, 0x65, 0xef, 0x45, 0x76, 0xe6, 0xf5, 0xa2, 0x0d, 0xd4, 0x16, 0x3b, 0x58, 0x2f, 0xf2, 0x2f, 0x36, 0x18, 0x3f], [0xfd, 0x2f, 0xe0, 0x9b, 0x1e, 0x8c, 0xc5, 0x18, 0xa9, 0xca, 0xd4, 0x2b, 0x35, 0xb6, 0x95, 0x0a, 0x9f, 0x7e, 0xfb, 0xc4, 0xef, 0x88, 0x7b, 0x23, 0x43, 0xec, 0x2f, 0x0d, 0x0f, 0x7a, 0xfc, 0x5c]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x8d, 0xd2, 0xda, 0xc7, 0x44, 0xd6, 0x7a, 0xdb, 0x26, 0x7d, 0x1d, 0xb8, 0xe1, 0xde, 0x9d, 0x7a, 0x7d, 0x17, 0x7e, 0x1c, 0x37, 0x04, 0x8d, 0x2d, 0x7c, 0x5e, 0x18, 0x38, 0x1e, 0xaf, 0xc7, 0x1b], [0x33, 0x48, 0x31, 0x00, 0x59, 0xf6, 0xf2, 0xca, 0x0f, 0x27, 0x1b, 0x63, 0x12, 0x7e, 0x02, 0x1d, 0x49, 0xc0, 0x5d, 0x79, 0x87, 0xef, 0x5e, 0x7a, 0x2f, 0x1f, 0x66, 0x55, 0xd8, 0x09, 0xd9, 0x61]],
        [[0x54, 0x83, 0x02, 0x18, 0x82, 0x93, 0x99, 0x07, 0xd0, 0xa7, 0xda, 0xd8, 0x75, 0x89, 0xfa, 0xf2, 0xd9, 0xa3, 0xb8, 0x6b, 0x5a, 0x35, 0x28, 0xd2, 0x6b, 0x59, 0xc2, 0xf8, 0x45, 0xe2, 0xbc, 0x06], [0x65, 0xc0, 0xa3, 0x88, 0x51, 0x95, 0xfc, 0x96, 0x94, 0x78, 0xe8, 0x0d, 0x8b, 0x41, 0xc9, 0xc2, 0x58, 0x48, 0x75, 0x10, 0x2f, 0xcd, 0x2a, 0xc9, 0xa0, 0x6d, 0x0f, 0xdd, 0x9c, 0x98, 0x26, 0x3d]],
        [[0x2f, 0x66, 0x29, 0x1b, 0x04, 0x89, 0xbd, 0x7e, 0xee, 0x6e, 0xdd, 0xb7, 0x0e, 0xef, 0xb0, 0x0c, 0xb4, 0xfc, 0x7f, 0xc2, 0xc9, 0x3a, 0x3c, 0x64, 0xef, 0x45, 0x44, 0xaf, 0x8a, 0x90, 0x65, 0x76], [0xa1, 0x4c, 0x70, 0x4b, 0x0e, 0xa0, 0x83, 0x70, 0x13, 0xa4, 0xaf, 0xb8, 0x38, 0x19, 0x22, 0x65, 0x09, 0xb4, 0x02, 0x4f, 0x06, 0xf8, 0x17, 0xce, 0x46, 0x45, 0xda, 0x50, 0x7c, 0x8a, 0xd1, 0x4e]],
        [[0xf7, 0xd4, 0x16, 0x6c, 0x4e, 0x95, 0x9d, 0x5d, 0x0f, 0x91, 0x2b, 0x52, 0xfe, 0x5c, 0x34, 0xe5, 0x30, 0xe6, 0xa4, 0x3b, 0xf3, 0xf3, 0x34, 0x08, 0xa9, 0x4a, 0xa0, 0xb5, 0x6e, 0xb3, 0x09, 0x0a], [0x26, 0xd9, 0x5e, 0xa3, 0x0f, 0xeb, 0xa2, 0xf3, 0x20, 0x3b, 0x37, 0xd4, 0xe4, 0x9e, 0xce, 0x06, 0x3d, 0x53, 0xed, 0xae, 0x2b, 0xeb, 0xb6, 0x24, 0x0a, 0x11, 0xa3, 0x0f, 0xd6, 0x7f, 0xa4, 0x3a]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xdb, 0x9f, 0x2c, 0xfc, 0xd6, 0xb2, 0x1e, 0x2e, 0x52, 0x7a, 0x06, 0x87, 0x2d, 0x86, 0x72, 0x2b, 0x6d, 0x90, 0x77, 0x46, 0x43, 0xb5, 0x7a, 0xf8, 0x60, 0x7d, 0x91, 0x60, 0x5b, 0x9d, 0x9e, 0x07], [0x97, 0x87, 0xc7, 0x04, 0x1c, 0x38, 0x01, 0x39, 0x58, 0xc7, 0x85, 0xa3, 0xfc, 0x64, 0x00, 0x64, 0x25, 0xa2, 0xbf, 0x50, 0x94, 0xca, 0x26, 0x31, 0x45, 0x0a, 0x24, 0xd2, 0x51, 0x29, 0x51, 0x16]],
        [[0x4d, 0x4a, 0xd7, 0x98, 0x71, 0x57, 0xac, 0x7d, 0x8b, 0x37, 0xbd, 0x63, 0xff, 0x87, 0xb1, 0x49, 0x95, 0x20, 0x7c, 0xcf, 0x7c, 0x59, 0xc4, 0x91, 0x9c, 0xef, 0xd0, 0xdb, 0x60, 0x09, 0x9d, 0x46], [0xcb, 0x78, 0x94, 0x90, 0xe4, 0x45, 0xb3, 0xf6, 0xd9, 0xf6, 0x57, 0x74, 0xd5, 0xf8, 0x83, 0x4f, 0x39, 0xc9, 0xbd, 0x88, 0xc2, 0x57, 0x21, 0x1f, 0x24, 0x32, 0x68, 0xf8, 0xc7, 0x21, 0x5f, 0x0b]],
        [[0x2a, 0x36, 0x68, 0xfc, 0x5f, 0xb6, 0x4f, 0xa5, 0xe3, 0x9d, 0x24, 0x2f, 0xc0, 0x93, 0x61, 0xcf, 0xf8, 0x0a, 0xed, 0xe1, 0xdb, 0x27, 0xec, 0x0e, 0x14, 0x32, 0x5f, 0x8e, 0xa1, 0x62, 0x41, 0x16], [0x95, 0x21, 0x01, 0xce, 0x95, 0x5b, 0x0e, 0x57, 0xc7, 0xb9, 0x62, 0xb5, 0x28, 0xca, 0x11, 0xec, 0xb4, 0x46, 0x06, 0x73, 0x26, 0xff, 0xfb, 0x66, 0x7d, 0xee, 0x5f, 0xb2, 0x56, 0xfd, 0x2a, 0x08]],
        [[0x92, 0x67, 0x77, 0x56, 0xa1, 0xff, 0xc4, 0xc5, 0x95, 0xf0, 0xe3, 0x3a, 0x0a, 0xca, 0x94, 0x4d, 0x9e, 0x7e, 0x3d, 0xb9, 0x6e, 0xb6, 0xb0, 0xce, 0xa4, 0x30, 0x89, 0x99, 0xe9, 0xad, 0x11, 0x59], [0xf6, 0x48, 0x95, 0xa1, 0x6f, 0x5f, 0xb7, 0xa5, 0xbb, 0x30, 0x00, 0x1c, 0xd2, 0x8a, 0xd6, 0x25, 0x26, 0x1b, 0xb2, 0x0d, 0x37, 0x6a, 0x05, 0xf4, 0x9d, 0x3e, 0x17, 0x2a, 0x43, 0xd2, 0x3a, 0x06]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x32, 0x99, 0x93, 0xd1, 0x9a, 0x72, 0xf3, 0xa9, 0x16, 0xbd, 0xb4, 0x4c, 0xdd, 0xf9, 0xd4, 0xb2, 0x64, 0x9a, 0xd3, 0x05, 0xe4, 0xa3, 0x73, 0x1c, 0xcb, 0x7e, 0x57, 0x67, 0xff, 0x04, 0xb3, 0x10], [0xb9, 0x4b, 0xa4, 0xad, 0xd0, 0x6d, 0x61, 0x23, 0xb4, 0xaf, 0x34, 0xa9, 0xaa, 0x65, 0xec, 0xd9, 0x69, 0xe3, 0x85, 0xcd, 0xcc, 0xe7, 0xb0, 0x9b, 0x41, 0xc1, 0x1c, 0xf9, 0xa0, 0xfa, 0xb7, 0x13]],
        [[0x04, 0xfd, 0x88, 0x3c, 0x0c, 0xd0, 0x09, 0x52, 0x51, 0x4f, 0x06, 0x19, 0xcc, 0xc3, 0xbb, 0xde, 0x80, 0xc5, 0x33, 0xbc, 0xf9, 0xf3, 0x17, 0x36, 0xdd, 0xc6, 0xde, 0xe8, 0x9b, 0x5d, 0x79, 0x1b], [0x65, 0x0a, 0xbe, 0x51, 0x57, 0xad, 0x50, 0x79, 0x08, 0x71, 0x9b, 0x07, 0x95, 0x8f, 0xfb, 0xae, 0x4b, 0x38, 0xba, 0xcf, 0x53, 0x2a, 0x86, 0x1e, 0xc0, 0x50, 0x5c, 0x67, 0x1b, 0xf6, 0x87, 0x6c]],
        [[0x4f, 0x00, 0xb2, 0x66, 0x55, 0xed, 0x4a, 0xed, 0x8d, 0xe1, 0x66, 0x18, 0xb2, 0x14, 0x74, 0x8d, 0xfd, 0x1a, 0x36, 0x0f, 0x26, 0x5c, 0x8b, 0x89, 0xf3, 0xab, 0xf2, 0xf3, 0x24, 0x67, 0xfd, 0x70], [0xfd, 0x4e, 0x2a, 0xc1, 0x3a, 0xca, 0x8f, 0x00, 0xd8, 0xec, 0x74, 0x67, 0xef, 0x61, 0xe0, 0x28, 0xd0, 0x96, 0xf4, 0x48, 0xde, 0x81, 0xe3, 0xef, 0xdc, 0xaa, 0x7d, 0xf3, 0xb6, 0x55, 0xa6, 0x65]],
        [[0xeb, 0xcb, 0xc5, 0x70, 0x91, 0x31, 0x10, 0x93, 0x0d, 0xc8, 0xd0, 0xef, 0x62, 0xe8, 0x6f, 0x82, 0xe3, 0x69, 0x3d, 0x91, 0x7f, 0x31, 0xe1, 0x26, 0x35, 0x3c, 0x4a, 0x2f, 0xab, 0xc4, 0x9a, 0x5e], [0xab, 0x1b, 0xb5, 0xe5, 0x2b, 0xc3, 0x0e, 0x29, 0xb0, 0xd0, 0x73, 0xe6, 0x4f, 0x64, 0xf2, 0xbc, 0xe4, 0xe4, 0xe1, 0x9a, 0x52, 0x33, 0x2f, 0xbd, 0xcc, 0x03, 0xee, 0x8a, 0xfa, 0x00, 0x5f, 0x50]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xf6, 0xdb, 0x0d, 0x22, 0x3d, 0xb5, 0x14, 0x75, 0x31, 0xf0, 0x81, 0xe2, 0xb9, 0x37, 0xa2, 0xa9, 0x84, 0x11, 0x9a, 0x07, 0xb5, 0x53, 0x89, 0x78, 0xa9, 0x30, 0x27, 0xa1, 0xf1, 0x4e, 0x5c, 0x2e], [0x8b, 0x00, 0x54, 0xfb, 0x4d, 0xdc, 0xcb, 0x17, 0x35, 0x40, 0xff, 0xb7, 0x8c, 0xfe, 0x4a, 0xe4, 0x4e, 0x99, 0x4e, 0xa8, 0x74, 0x54, 0x5d, 0x5c, 0x96, 0xa3, 0x12, 0x55, 0x36, 0x31, 0x17, 0x5c]],
        [[0xce, 0x24, 0xef, 0x7b, 0x86, 0xf2, 0x0f, 0x77, 0xe8, 0x5c, 0x7d, 0x87, 0x38, 0x2d, 0xef, 0xaf, 0xf2, 0x8c, 0x72, 0x2e, 0xeb, 0xb6, 0x55, 0x4b, 0x6e, 0xf1, 0x4e, 0x8a, 0x0e, 0x9a, 0x6c, 0x4c], [0x25, 0xea, 0x86, 0xc2, 0xd1, 0x4f, 0xb7, 0x3e, 0xa8, 0x5c, 0x8d, 0x66, 0x81, 0x25, 0xed, 0xc5, 0x4c, 0x05, 0xb9, 0xd8, 0xd6, 0x70, 0xbe, 0x73, 0x82, 0xe8, 0xa1, 0xe5, 0x1e, 0x71, 0xd5, 0x26]],
        [[0x4e, 0x6d, 0xc3, 0xa7, 0x4f, 0x22, 0x45, 0x26, 0xa2, 0x7e, 0x16, 0xf7, 0xf7, 0x63, 0xdc, 0x86, 0x01, 0x2a, 0x71, 0x38, 0x5c, 0x33, 0xc3, 0xce, 0x30, 0xff, 0xf9, 0x2c, 0x91, 0x71, 0x8a, 0x72], [0x8c, 0x44, 0x09, 0x28, 0xd5, 0x23, 0xc9, 0x8f, 0xf3, 0x84, 0x45, 0xc6, 0x9a, 0x5e, 0xff, 0xd2, 0xc7, 0x57, 0x93, 0xa3, 0xc1, 0x69, 0xdd, 0x62, 0x0f, 0xda, 0x5c, 0x30, 0x59, 0x5d, 0xe9, 0x4c]],
        [[0x92, 0x7e, 0x50, 0x27, 0x72, 0xd7, 0x0c, 0xd6, 0x69, 0x96, 0x81, 0x35, 0x84, 0x94, 0x35, 0x8b, 0x6c, 0xaa, 0x62, 0x86, 0x6e, 0x1c, 0x15, 0xf3, 0x6c, 0xb3, 0xff, 0x65, 0x1b, 0xa2, 0x9b, 0x59], [0xe2, 0xa9, 0x65, 0x88, 0xc4, 0x50, 0xfa, 0xbb, 0x3b, 0x6e, 0x5f, 0x44, 0x01, 0xca, 0x97, 0xd4, 0xdd, 0xf6, 0xcd, 0x3f, 0x3f, 0xe5, 0x97, 0x67, 0x2b, 0x8c, 0x66, 0x0f, 0x35, 0x9b, 0xf5, 0x07]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xf1, 0x59, 0x27, 0xd8, 0xdb, 0x5a, 0x11, 0x5e, 0x82, 0xf3, 0x38, 0xff, 0x1c, 0xed, 0xfe, 0x3f, 0x64, 0x54, 0x3f, 0x7f, 0xd1, 0x81, 0xed, 0xef, 0x65, 0xc5, 0xcb, 0xfd, 0xe1, 0x80, 0xcd, 0x11], [0xe0, 0xdb, 0x22, 0x28, 0xe6, 0xff, 0x61, 0x9d, 0x41, 0x14, 0x2d, 0x3b, 0x26, 0x22, 0xdf, 0xf1, 0x34, 0x81, 0xe9, 0x45, 0xee, 0x0f, 0x98, 0x8b, 0xa6, 0x3f, 0xef, 0xf7, 0x43, 0x19, 0xf1, 0x43]],
        [[0xee, 0xf3, 0x00, 0xa1, 0x50, 0xde, 0xc0, 0xb6, 0x01, 0xe3, 0x8c, 0x3c, 0x4d, 0x31, 0xd2, 0xb0, 0x58, 0xcd, 0xed, 0x10, 0x4a, 0x7a, 0xef, 0x80, 0xa9, 0x19, 0x32, 0xf3, 0xd8, 0x33, 0x8c, 0x06], [0xcb, 0x7d, 0x4f, 0xff, 0x30, 0xd8, 0x12, 0x3b, 0x39, 0x1c, 0x06, 0xf9, 0x4c, 0x34, 0x35, 0x71, 0xb5, 0x16, 0x94, 0x67, 0xdf, 0xee, 0x11, 0xde, 0xa4, 0x1d, 0x88, 0x93, 0x35, 0xa9, 0x32, 0x10]],
        [[0xe9, 0xc3, 0xbc, 0x7b, 0x5c, 0xfc, 0xb2, 0xf9, 0xc9, 0x2f, 0xe5, 0xba, 0x3a, 0x0b, 0xab, 0x64, 0x38, 0x6f, 0x5b, 0x4b, 0x93, 0xda, 0x64, 0xec, 0x4d, 0x3d, 0xa0, 0xf5, 0xbb, 0xba, 0x47, 0x48], [0x60, 0xbc, 0x45, 0x1f, 0x23, 0xa2, 0x3b, 0x70, 0x76, 0xe6, 0x97, 0x99, 0x4f, 0x77, 0x54, 0x67, 0x30, 0x9a, 0xe7, 0x66, 0xd6, 0xcd, 0x2e, 0x51, 0x24, 0x2c, 0x42, 0x4a, 0x11, 0xfe, 0x6f, 0x7e]],
        [[0x87, 0xc0, 0xb1, 0xf0, 0xa3, 0x6f, 0x0c, 0x93, 0xa9, 0x0a, 0x72, 0xef, 0x5c, 0xbe, 0x65, 0x35, 0xa7, 0x6a, 0x4e, 0x2c, 0xbf, 0x21, 0x23, 0xe8, 0x2f, 0x97, 0xc7, 0x3e, 0xc8, 0x17, 0xac, 0x1e], [0x7b, 0xef, 0x21, 0xe5, 0x40, 0xcc, 0x1e, 0xdc, 0xd6, 0xbd, 0x97, 0x7a, 0x7c, 0x75, 0x86, 0x7a, 0x25, 0x5a, 0x6e, 0x7c, 0xe5, 0x51, 0x3c, 0x1b, 0x5b, 0x82, 0x9a, 0x07, 0x60, 0xa1, 0x19, 0x04]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x96, 0x88, 0xa6, 0xab, 0x8f, 0xe3, 0x3a, 0x49, 0xf8, 0xfe, 0x34, 0xe7, 0x6a, 0xb2, 0xfe, 0x40, 0x26, 0x74, 0x57, 0x4c, 0xf6, 0xd4, 0x99, 0xce, 0x5d, 0x7b, 0x2f, 0x67, 0xd6, 0x5a, 0xe4, 0x4e], [0x5c, 0x82, 0xb3, 0xbd, 0x55, 0x25, 0xf6, 0x6a, 0x93, 0xa4, 0x02, 0xc6, 0x7d, 0x5c, 0xb1, 0x2b, 0x5b, 0xff, 0xfb, 0x56, 0xf8, 0x01, 0x41, 0x90, 0xc6, 0xb6, 0xac, 0x4f, 0xfe, 0xa7, 0x41, 0x70]],
        [[0xdb, 0xfa, 0x9b, 0x2c, 0xd4, 0x23, 0x67, 0x2c, 0x8a, 0x63, 0x6c, 0x07, 0x26, 0x48, 0x4f, 0xc2, 0x03, 0xd2, 0x53, 0x20, 0x28, 0xed, 0x65, 0x71, 0x47, 0xa9, 0x16, 0x16, 0x12, 0xbc, 0x28, 0x33], [0x39, 0xc0, 0xfa, 0xfa, 0xcd, 0x33, 0x43, 0xc7, 0x97, 0x76, 0x9b, 0x93, 0x91, 0x72, 0xeb, 0xc5, 0x18, 0x67, 0x4c, 0x11, 0xf0, 0xf4, 0xe5, 0x73, 0xb2, 0x5c, 0x1b, 0xc2, 0x26, 0x3f, 0xbf, 0x2b]],
        [[0x86, 0xe6, 0x8c, 0x1d, 0xdf, 0xca, 0xfc, 0xd5, 0xf8, 0x3a, 0xc3, 0x44, 0x72, 0xe6, 0x78, 0x9d, 0x2b, 0x97, 0xf8, 0x28, 0x45, 0xb4, 0x20, 0xc9, 0x2a, 0x8c, 0x67, 0xaa, 0x11, 0xc5, 0x5b, 0x2f], [0x17, 0x0f, 0x86, 0x52, 0xd7, 0x9d, 0xc3, 0x44, 0x51, 0x76, 0x32, 0x65, 0xb4, 0x37, 0x81, 0x99, 0x46, 0x37, 0x62, 0xed, 0xcf, 0x64, 0x9d, 0x72, 0x40, 0x7a, 0x4c, 0x0b, 0x76, 0x2a, 0xfb, 0x56]],
        [[0x33, 0xa7, 0x90, 0x7c, 0xc3, 0x6f, 0x17, 0xa5, 0xa0, 0x67, 0x72, 0x17, 0xea, 0x7e, 0x63, 0x14, 0x83, 0xde, 0xc1, 0x71, 0x2d, 0x41, 0x32, 0x7a, 0xf3, 0xd1, 0x2b, 0xd8, 0x2a, 0xa6, 0x46, 0x36], [0xac, 0xcc, 0x6b, 0x7c, 0xf9, 0xb8, 0x8b, 0x08, 0x5c, 0xd0, 0x7d, 0x8f, 0x73, 0xea, 0x20, 0xda, 0x86, 0xca, 0x00, 0xc7, 0xad, 0x73, 0x4d, 0xe9, 0xe8, 0xa9, 0xda, 0x1f, 0x03, 0x06, 0xdd, 0x24]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x9c, 0xb2, 0x61, 0x0a, 0x98, 0x2a, 0xa5, 0xd7, 0xee, 0xa9, 0xac, 0x65, 0xcb, 0x0a, 0x1e, 0xe2, 0xbe, 0xdc, 0x85, 0x59, 0x0f, 0x9c, 0xa6, 0x57, 0x34, 0xa5, 0x87, 0xeb, 0x7b, 0x1e, 0x0c, 0x3c], [0x2f, 0xbd, 0x84, 0x63, 0x0d, 0xb5, 0xa0, 0xf0, 0x4b, 0x9e, 0x93, 0xc6, 0x34, 0x9a, 0x34, 0xff, 0x73, 0x19, 0x2f, 0x6e, 0x54, 0x45, 0x2c, 0x92, 0x31, 0x76, 0x34, 0xf1, 0xb2, 0x26, 0xe8, 0x74]],
        [[0x0a, 0x67, 0x90, 0x6d, 0x0c, 0x4c, 0xcc, 0xc0, 0xe6, 0xbd, 0xa7, 0x5e, 0x55, 0x8c, 0xcd, 0x58, 0x9b, 0x11, 0xa2, 0xbb, 0x4b, 0xb1, 0x43, 0x04, 0x3c, 0x55, 0xed, 0x23, 0xfe, 0xcd, 0xb1, 0x53], [0x05, 0xfb, 0x75, 0xf5, 0x01, 0xaf, 0x38, 0x72, 0x58, 0xfc, 0x04, 0x29, 0x34, 0x7a, 0x67, 0xa2, 0x08, 0x50, 0x6e, 0xd0, 0x2b, 0x73, 0xd5, 0xb8, 0xe4, 0x30, 0x96, 0xad, 0x45, 0xdf, 0xa6, 0x5c]],
        [[0x0d, 0x88, 0x1a, 0x90, 0x7e, 0xdc, 0xd8, 0xfe, 0xc1, 0x2f, 0x5d, 0x67, 0xee, 0x67, 0x2f, 0xed, 0x6f, 0x55, 0x43, 0x5f, 0x87, 0x14, 0x35, 0x42, 0xd3, 0x75, 0xae, 0xd5, 0xd3, 0x85, 0x1a, 0x76], [0x87, 0xc8, 0xa0, 0x6e, 0xe1, 0xb0, 0xad, 0x6a, 0x4a, 0x34, 0x71, 0xed, 0x7c, 0xd6, 0x44, 0x03, 0x65, 0x4a, 0x5c, 0x5c, 0x04, 0xf5, 0x24, 0x3f, 0xb0, 0x16, 0x5e, 0x8c, 0xb2, 0xd2, 0xc5, 0x20]],
        [[0x98, 0x83, 0xc2, 0x37, 0xa0, 0x41, 0xa8, 0x48, 0x5c, 0x5f, 0xbf, 0xc8, 0xfa, 0x24, 0xe0, 0x59, 0x2c, 0xbd, 0xf6, 0x81, 0x7e, 0x88, 0xe6, 0xca, 0x04, 0xd8, 0x5d, 0x60, 0xbb, 0x74, 0xa7, 0x0b], [0x21, 0x13, 0x91, 0xbf, 0x77, 0x7a, 0x33, 0xbc, 0xe9, 0x07, 0x39, 0x0a, 0xdd, 0x7d, 0x06, 0x10, 0x9a, 0xee, 0x47, 0x73, 0x1b, 0x15, 0x5a, 0xfb, 0xcd, 0x4d, 0xd0, 0xd2, 0x3a, 0x01, 0xba, 0x54]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x48, 0xd5, 0x39, 0x4a, 0x0b, 0x20, 0x6a, 0x43, 0xa0, 0x07, 0x82, 0x5e, 0x49, 0x7c, 0xc9, 0x47, 0xf1, 0x7c, 0x37, 0xb9, 0x23, 0xef, 0x6b, 0x46, 0x45, 0x8c, 0x45, 0x76, 0xdf, 0x14, 0x6b, 0x6e], [0x42, 0xc9, 0xca, 0x29, 0x4c, 0x76, 0x37, 0xda, 0x8a, 0x2d, 0x7c, 0x3a, 0x58, 0xf2, 0x03, 0xb4, 0xb5, 0xb9, 0x1a, 0x13, 0x2d, 0xde, 0x5f, 0x6b, 0x9d, 0xba, 0x52, 0xc9, 0x5d, 0xb3, 0xf3, 0x30]],
        [[0x4c, 0x6f, 0xfe, 0x6b, 0x0c, 0x62, 0xd7, 0x48, 0x71, 0xef, 0xb1, 0x85, 0x79, 0xc0, 0xed, 0x24, 0xb1, 0x08, 0x93, 0x76, 0x8e, 0xf7, 0x38, 0x8e, 0xeb, 0xfe, 0x80, 0x40, 0xaf, 0x90, 0x64, 0x49], [0x4a, 0x88, 0xda, 0xc1, 0x98, 0x44, 0x3c, 0x53, 0x4e, 0xdb, 0x4b, 0xb9, 0x12, 0x5f, 0xcd, 0x08, 0x04, 0xef, 0x75, 0xe7, 0xb1, 0x3a, 0xe5, 0x07, 0xfa, 0xca, 0x65, 0x7b, 0x72, 0x10, 0x64, 0x7f]],
        [[0x3d, 0x81, 0xf0, 0xeb, 0x16, 0xfd, 0x58, 0x33, 0x8d, 0x7c, 0x1a, 0xfb, 0x20, 0x2c, 0x8a, 0xee, 0x90, 0xbb, 0x33, 0x6d, 0x45, 0xe9, 0x8e, 0x99, 0x85, 0xe1, 0x08, 0x1f, 0xc5, 0xf1, 0xb5, 0x46], [0xe4, 0xe7, 0x43, 0x4b, 0xa0, 0x3f, 0x2b, 0x06, 0xba, 0x17, 0xae, 0x3d, 0xe6, 0xce, 0xbd, 0xb8, 0xed, 0x74, 0x11, 0x35, 0xec, 0x96, 0xfe, 0x31, 0xe3, 0x0e, 0x7a, 0x4e, 0xc9, 0x1d, 0xcb, 0x20]],
        [[0xe0, 0x67, 0xe9, 0x7b, 0xdb, 0x96, 0x5c, 0xb0, 0x32, 0xd0, 0x59, 0x31, 0x90, 0xdc, 0x92, 0x97, 0xac, 0x09, 0x38, 0x31, 0x0f, 0x7e, 0xd6, 0x5d, 0xd0, 0x06, 0xb6, 0x1f, 0xea, 0xf0, 0x5b, 0x07], [0x81, 0x9f, 0xc7, 0xde, 0x6b, 0x41, 0x22, 0x35, 0x14, 0x67, 0x77, 0x3e, 0x90, 0x81, 0xb0, 0xd9, 0x85, 0x4c, 0xca, 0x9b, 0x3f, 0x04, 0x59, 0xd6, 0xaa, 0x17, 0xc3, 0x88, 0x34, 0x37, 0xba, 0x43]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x4c, 0xb6, 0x69, 0xc8, 0x81, 0x95, 0x94, 0x33, 0x92, 0x34, 0xe9, 0x3c, 0x84, 0x0d, 0x3d, 0x5a, 0x37, 0x9c, 0x22, 0xa0, 0xaa, 0x65, 0xce, 0xb4, 0xc2, 0x2d, 0x66, 0x67, 0x02, 0xff, 0x74, 0x10], [0x22, 0xb0, 0xd5, 0xe6, 0xc7, 0xef, 0xb1, 0xa7, 0x13, 0xda, 0x60, 0xb4, 0x80, 0xc1, 0x42, 0x7d, 0x10, 0x70, 0x97, 0x04, 0x4d, 0xda, 0x23, 0x89, 0xc2, 0x0e, 0x68, 0xcb, 0xde, 0xe0, 0x9b, 0x29]],
        [[0x33, 0xfe, 0x42, 0x2a, 0x36, 0x2b, 0x2e, 0x36, 0x64, 0x5c, 0x8b, 0xcc, 0x81, 0x6a, 0x15, 0x08, 0xa1, 0x27, 0xe8, 0x57, 0xe5, 0x78, 0x8e, 0xf2, 0x58, 0x19, 0x12, 0x42, 0xae, 0xc4, 0x63, 0x3e], [0x78, 0x96, 0x9c, 0xa7, 0xca, 0x80, 0xae, 0x02, 0x85, 0xb1, 0x7c, 0x04, 0x5c, 0xc1, 0x5b, 0x26, 0xc1, 0xba, 0xed, 0xa5, 0x59, 0x70, 0x85, 0x8c, 0x8c, 0xe8, 0x87, 0xac, 0x6a, 0x28, 0x99, 0x35]],
        [[0x9f, 0x04, 0x08, 0x28, 0xbe, 0x87, 0xda, 0x80, 0x28, 0x38, 0xde, 0x9f, 0xcd, 0xe4, 0xe3, 0x62, 0xfb, 0x2e, 0x46, 0x8d, 0x01, 0xb3, 0x06, 0x51, 0xd4, 0x19, 0x3b, 0x11, 0xfa, 0xe2, 0xad, 0x1e], [0xa0, 0x20, 0x99, 0x69, 0x0a, 0xae, 0xa3, 0x70, 0x4e, 0x64, 0x80, 0xb7, 0x85, 0x9c, 0x87, 0x54, 0x43, 0x43, 0x55, 0x80, 0x6d, 0x8d, 0x7c, 0xa9, 0x64, 0xca, 0x6c, 0x2e, 0x21, 0xd8, 0xc8, 0x6c]],
        [[0x91, 0x4a, 0x07, 0xad, 0x08, 0x75, 0xc1, 0x4f, 0xa4, 0xb2, 0xc3, 0x6f, 0x46, 0x3e, 0xb1, 0xce, 0x52, 0xab, 0x67, 0x09, 0x54, 0x48, 0x6b, 0x6c, 0xd7, 0x1d, 0x71, 0x76, 0xcb, 0xff, 0xdd, 0x31], [0x36, 0x88, 0xfa, 0xfd, 0xf0, 0x36, 0x6f, 0x07, 0x74, 0x88, 0x50, 0xd0, 0x95, 0x38, 0x4a, 0x48, 0x2e, 0x07, 0x64, 0x97, 0x11, 0x76, 0x01, 0x1a, 0x27, 0x4d, 0x8e, 0x25, 0x9a, 0x9b, 0x1c, 0x22]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xbe, 0x57, 0xbd, 0x0e, 0x0f, 0xac, 0x5e, 0x76, 0xa3, 0x71, 0xad, 0x2b, 0x10, 0x45, 0x02, 0xec, 0x59, 0xd5, 0x5d, 0xa9, 0x44, 0xcc, 0x25, 0x4c, 0xb3, 0x3c, 0x5b, 0x69, 0x07, 0x55, 0x26, 0x6b], [0x30, 0x6b, 0xd4, 0xa7, 0x51, 0x29, 0xe3, 0xf9, 0x7a, 0x75, 0x2a, 0x82, 0x2f, 0xd6, 0x1d, 0x99, 0x2b, 0x80, 0xd5, 0x67, 0x1e, 0x15, 0x9d, 0xca, 0xfd, 0xeb, 0xac, 0x97, 0x35, 0x09, 0x7f, 0x3f]],
        [[0x35, 0x0d, 0x34, 0x0a, 0xb8, 0x67, 0x56, 0x29, 0x20, 0xf3, 0x19, 0x5f, 0xe2, 0x83, 0x42, 0x73, 0x53, 0xa8, 0xc5, 0x02, 0x19, 0x33, 0xb4, 0x64, 0xbd, 0xc3, 0x87, 0x8c, 0xd7, 0x76, 0xed, 0x25], [0x47, 0x39, 0x37, 0x76, 0x0d, 0x1d, 0x0c, 0xf5, 0x5a, 0x6d, 0x43, 0x88, 0x99, 0x15, 0xb4, 0x52, 0x0f, 0x2a, 0xb3, 0xb0, 0x3f, 0xa6, 0xb3, 0x26, 0xb3, 0xc7, 0x45, 0xf5, 0x92, 0x5f, 0x9b, 0x17]],
        [[0x9d, 0x23, 0xbd, 0x15, 0xfe, 0x52, 0x52, 0x15, 0x26, 0x79, 0x86, 0xba, 0x06, 0x56, 0x66, 0xbb, 0x8c, 0x2e, 0x10, 0x11, 0xd5, 0x4a, 0x18, 0x52, 0xda, 0x84, 0x44, 0xf0, 0x3e, 0xe9, 0x8c, 0x35], [0xad, 0xa0, 0x41, 0xec, 0xc8, 0x4d, 0xb9, 0xd2, 0x6e, 0x96, 0x4e, 0x5b, 0xc5, 0xc2, 0xa0, 0x1b, 0xcf, 0x0c, 0xbf, 0x17, 0x66, 0x57, 0xc1, 0x17, 0x90, 0x45, 0x71, 0xc2, 0xe1, 0x24, 0xeb, 0x27]],
        [[0x2c, 0xb9, 0x42, 0xa4, 0xaf, 0x3b, 0x42, 0x0e, 0xc2, 0x0f, 0xf2, 0xea, 0x83, 0xaf, 0x9a, 0x13, 0x17, 0xb0, 0xbd, 0x89, 0x17, 0xe3, 0x72, 0xcb, 0x0e, 0x76, 0x7e, 0x41, 0x63, 0x04, 0x88, 0x71], [0x75, 0x78, 0x38, 0x86, 0x57, 0xdd, 0x9f, 0xee, 0x54, 0x70, 0x65, 0xbf, 0xf1, 0x2c, 0xe0, 0x39, 0x0d, 0xe3, 0x89, 0xfd, 0x8e, 0x93, 0x4f, 0x43, 0xdc, 0xd5, 0x5b, 0xde, 0xf9, 0x98, 0xe5, 0x7b]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xe7, 0x3b, 0x65, 0x11, 0xdf, 0xb2, 0xf2, 0x63, 0x94, 0x12, 0x6f, 0x5c, 0x9e, 0x77, 0xc1, 0xb6, 0xd8, 0xab, 0x58, 0x7a, 0x1d, 0x95, 0x73, 0xdd, 0xe7, 0xe3, 0x6f, 0xf2, 0x03, 0x1d, 0xdb, 0x76], [0xae, 0x06, 0x4e, 0x2c, 0x52, 0x1b, 0xbc, 0x5a, 0x5a, 0xa5, 0xbe, 0x27, 0xbd, 0xeb, 0xe1, 0x14, 0x17, 0x68, 0x26, 0x07, 0x03, 0xd1, 0x18, 0x0b, 0xdf, 0xf1, 0x06, 0x5c, 0xa6, 0x1b, 0xb9, 0x24]],
        [[0xc5, 0x66, 0x80, 0x13, 0x0e, 0x48, 0x8c, 0x87, 0x31, 0x84, 0xb4, 0x60, 0xed, 0xc5, 0xec, 0xb6, 0xc5, 0x05, 0x33, 0x5f, 0x2f, 0x7d, 0x40, 0xb6, 0x32, 0x1d, 0x38, 0x74, 0x1b, 0xf1, 0x09, 0x3d], [0xd4, 0x69, 0x82, 0xbc, 0x8d, 0xf8, 0x34, 0x36, 0x75, 0x55, 0x18, 0x55, 0x58, 0x3c, 0x79, 0xaf, 0x26, 0x80, 0xab, 0x9b, 0x95, 0x00, 0xf1, 0xcb, 0xda, 0xc1, 0x9f, 0xf6, 0x2f, 0xa2, 0xf4, 0x45]],
        [[0x17, 0xbe, 0xeb, 0x85, 0xed, 0x9e, 0xcd, 0x56, 0xf5, 0x17, 0x45, 0x42, 0xb4, 0x1f, 0x44, 0x4c, 0x05, 0x74, 0x15, 0x47, 0x00, 0xc6, 0x6a, 0x3d, 0x24, 0x09, 0x0d, 0x58, 0xb1, 0x42, 0xd7, 0x04], [0x8d, 0xbd, 0xa3, 0xc4, 0x06, 0x9b, 0x1f, 0x90, 0x58, 0x60, 0x74, 0xb2, 0x00, 0x3b, 0x3c, 0xd2, 0xda, 0x82, 0xbb, 0x10, 0x90, 0x69, 0x92, 0xa9, 0xb4, 0x30, 0x81, 0xe3, 0x7c, 0xa8, 0x89, 0x45]],
        [[0x3f, 0xdc, 0x05, 0xcb, 0x41, 0x3c, 0xc8, 0x23, 0x04, 0x2c, 0x38, 0x99, 0xe3, 0x68, 0x55, 0xf9, 0xd3, 0x32, 0xc7, 0xbf, 0xfa, 0xd4, 0x1b, 0x5d, 0xde, 0xdc, 0x10, 0x42, 0xc0, 0x42, 0xd9, 0x75], [0x2d, 0xab, 0x35, 0x4e, 0x87, 0xc4, 0x65, 0x97, 0x67, 0x24, 0xa4, 0x47, 0xad, 0x3f, 0x8e, 0xf3, 0xcb, 0x31, 0x17, 0x77, 0xc5, 0xe2, 0xd7, 0x8f, 0x3c, 0xc1, 0xcd, 0x56, 0x48, 0xc1, 0x6c, 0x69]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x14, 0xae, 0x5f, 0x88, 0x7b, 0xa5, 0x90, 0xdf, 0x10, 0xb2, 0x8b, 0x5e, 0x24, 0x17, 0xc3, 0xa3, 0xd4, 0x0f, 0x92, 0x61, 0x1a, 0x19, 0x5a, 0xad, 0x76, 0xbd, 0xd8, 0x1c, 0xdd, 0xe0, 0x12, 0x6d], [0x8e, 0xbd, 0x70, 0x8f, 0x02, 0xa3, 0x24, 0x4d, 0x5a, 0x67, 0xc4, 0xda, 0xf7, 0x20, 0x0f, 0x81, 0x5b, 0x7a, 0x05, 0x24, 0x67, 0x83, 0x0b, 0x2a, 0x80, 0xe7, 0xfd, 0x74, 0x4b, 0x9e, 0x5c, 0x0d]],
        [[0x94, 0xd5, 0x5f, 0x1f, 0xa2, 0xfb, 0xeb, 0xe1, 0x07, 0x34, 0xf8, 0x20, 0xad, 0x81, 0x30, 0x06, 0x2d, 0xa1, 0x81, 0x95, 0x36, 0xcf, 0x11, 0x0b, 0xaf, 0xc1, 0x2b, 0x9a, 0x6c, 0x55, 0xc1, 0x16], [0x36, 0x4f, 0xf1, 0x5e, 0x74, 0x35, 0x13, 0x28, 0xd7, 0x11, 0xcf, 0xb8, 0xde, 0x93, 0xb3, 0x05, 0xb8, 0xb5, 0x73, 0xe9, 0xeb, 0xad, 0x19, 0x1e, 0x89, 0x0f, 0x8b, 0x15, 0xd5, 0x8c, 0xe3, 0x23]],
        [[0x33, 0x79, 0xe7, 0x18, 0xe6, 0x0f, 0x57, 0x93, 0x15, 0xa0, 0xa7, 0xaa, 0xc4, 0xbf, 0x4f, 0x30, 0x74, 0x95, 0x5e, 0x69, 0x4a, 0x5b, 0x45, 0xe4, 0x00, 0xeb, 0x23, 0x74, 0x4c, 0xdf, 0x6b, 0x45], [0x97, 0x29, 0x6c, 0xc4, 0x42, 0x0b, 0xdd, 0xc0, 0x29, 0x5c, 0x9b, 0x34, 0x97, 0xd0, 0xc7, 0x79, 0x80, 0x63, 0x74, 0xe4, 0x8e, 0x37, 0xb0, 0x2b, 0x7c, 0xe8, 0x68, 0x6c, 0xc3, 0x82, 0x97, 0x57]],
        [[0x22, 0xbe, 0x83, 0xb6, 0x4b, 0x80, 0x6b, 0x43, 0x24, 0x5e, 0xef, 0x99, 0x9b, 0xa8, 0xfc, 0x25, 0x8d, 0x3b, 0x03, 0x94, 0x2b, 0x3e, 0xe7, 0x95, 0x76, 0x9b, 0xcc, 0x15, 0xdb, 0x32, 0xe6, 0x66], [0x84, 0xf0, 0x4a, 0x13, 0xa6, 0xd6, 0xfa, 0x93, 0x46, 0x07, 0xf6, 0x7e, 0x5c, 0x6d, 0x5e, 0xf6, 0xa6, 0xe7, 0x48, 0xf0, 0x06, 0xea, 0xff, 0x90, 0xc1, 0xcc, 0x4c, 0x19, 0x9c, 0x3c, 0x4e, 0x53]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x2a, 0x50, 0xe3, 0x07, 0x15, 0x59, 0xf2, 0x8b, 0x81, 0xf2, 0xf3, 0xd3, 0x6c, 0x99, 0x8c, 0x70, 0x67, 0xec, 0xcc, 0xee, 0x9e, 0x59, 0x45, 0x59, 0x7d, 0x47, 0x75, 0x69, 0xf5, 0x24, 0x93, 0x5d], [0x6a, 0x4f, 0x1b, 0xbe, 0x6b, 0x30, 0xcf, 0x75, 0x46, 0xe3, 0x7b, 0x9d, 0xfc, 0xcd, 0xd8, 0x5c, 0x1f, 0xb4, 0xc8, 0xe2, 0x24, 0xec, 0x1a, 0x28, 0x05, 0x32, 0x57, 0xfd, 0x3c, 0x5a, 0x98, 0x10]],
        [[0xa3, 0xdb, 0xf7, 0x30, 0xd8, 0xc2, 0x9a, 0xe1, 0xd3, 0xce, 0x22, 0xe5, 0x80, 0x1e, 0xd9, 0xe4, 0x1f, 0xab, 0xc0, 0x71, 0x1a, 0x86, 0x0e, 0x27, 0x99, 0x5b, 0xfa, 0x76, 0x99, 0xb0, 0x08, 0x3c], [0x2a, 0x93, 0xd2, 0x85, 0x1b, 0x6a, 0x5d, 0xa6, 0xee, 0xd1, 0xd1, 0x33, 0xbd, 0x6a, 0x36, 0x73, 0x37, 0x3a, 0x44, 0xb4, 0xec, 0xa9, 0x7a, 0xde, 0x83, 0x40, 0xd7, 0xdf, 0x28, 0xba, 0xa2, 0x30]],
        [[0xd3, 0xb5, 0x6d, 0x05, 0x3f, 0x9f, 0xf3, 0x15, 0x8d, 0x7c, 0xca, 0xc9, 0xfc, 0x8a, 0x7c, 0x94, 0xb0, 0x63, 0x36, 0x9b, 0x78, 0xd1, 0x91, 0x1f, 0x93, 0xd8, 0x57, 0x43, 0xde, 0x76, 0xa3, 0x43], [0x9b, 0x35, 0xe2, 0xa9, 0x3d, 0x32, 0x1e, 0xbb, 0x16, 0x28, 0x70, 0xe9, 0x45, 0x2f, 0x8f, 0x70, 0x7f, 0x08, 0x7e, 0x53, 0xc4, 0x7a, 0xbf, 0xf7, 0xe1, 0xa4, 0x6a, 0xd8, 0xac, 0x64, 0x1b, 0x11]],
        [[0xb2, 0xeb, 0x47, 0x46, 0x18, 0x3e, 0x1f, 0x99, 0x0c, 0xcc, 0xf1, 0x2c, 0xe0, 0xe7, 0x8f, 0xe0, 0x01, 0x7e, 0x65, 0xb8, 0x0c, 0xd0, 0xfb, 0xc8, 0xb9, 0x90, 0x98, 0x33, 0x61, 0x3b, 0xd8, 0x27], [0xa0, 0xbe, 0x72, 0x3a, 0x50, 0x4b, 0x74, 0xab, 0x01, 0xc8, 0x93, 0xc5, 0xe4, 0xc7, 0x08, 0x6c, 0xb4, 0xca, 0xee, 0xeb, 0x8e, 0xd7, 0x4e, 0x26, 0xc6, 0x1d, 0xe2, 0x71, 0xaf, 0x89, 0xa0, 0x2a]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x98, 0x0b, 0xe4, 0xde, 0xdb, 0xa8, 0xfa, 0x82, 0x74, 0x06, 0x52, 0x6d, 0x08, 0x52, 0x8a, 0xff, 0x62, 0xc5, 0x6a, 0x44, 0x0f, 0x51, 0x8c, 0x1f, 0x6e, 0xb6, 0xc6, 0x2c, 0x81, 0xd3, 0x76, 0x46], [0xf4, 0x29, 0x74, 0x2e, 0x80, 0xa7, 0x1a, 0x8f, 0xf6, 0xbd, 0xd6, 0x8e, 0xbf, 0xc1, 0x95, 0x2a, 0xeb, 0xa0, 0x7f, 0x45, 0xa0, 0x50, 0x14, 0x05, 0xb1, 0x57, 0x4c, 0x74, 0xb7, 0xe2, 0x89, 0x7d]],
        [[0x07, 0xee, 0xa7, 0xad, 0xb7, 0x09, 0x0b, 0x49, 0x4e, 0xbf, 0xca, 0xe5, 0x21, 0xe6, 0xe6, 0xaf, 0xd5, 0x67, 0xf3, 0xce, 0x7e, 0x7c, 0x93, 0x7b, 0x5a, 0x10, 0x12, 0x0e, 0x6c, 0x06, 0x11, 0x75], [0xd5, 0xfc, 0x86, 0xa3, 0x3b, 0xa3, 0x3e, 0x0a, 0xfb, 0x0b, 0xf7, 0x36, 0xb1, 0x5b, 0xda, 0x70, 0xb7, 0x00, 0xa7, 0xda, 0x88, 0x8f, 0x84, 0xa8, 0xbc, 0x1c, 0x39, 0xb8, 0x65, 0xf3, 0x4d, 0x60]],
        [[0x96, 0x9d, 0x31, 0xf4, 0xa2, 0xbe, 0x81, 0xb9, 0xa5, 0x59, 0x9e, 0xba, 0x07, 0xbe, 0x74, 0x58, 0xd8, 0xeb, 0xc5, 0x9f, 0x3d, 0xd1, 0xf4, 0xae, 0xce, 0x53, 0xdf, 0x4f, 0xc7, 0x2a, 0x89, 0x4d], [0x29, 0xd8, 0xf2, 0xaa, 0xe9, 0x0e, 0xf7, 0x2e, 0x5f, 0x9d, 0x8a, 0x5b, 0x09, 0xed, 0xc9, 0x24, 0x22, 0xf4, 0x0f, 0x25, 0x8f, 0x1c, 0x84, 0x6e, 0x34, 0x14, 0x6c, 0xea, 0xb3, 0x86, 0x5d, 0x04]],
        [[0x07, 0x98, 0x61, 0xe8, 0x6a, 0xd2, 0x81, 0x49, 0x25, 0xd5, 0x5b, 0x18, 0xc7, 0x35, 0x52, 0x51, 0xa4, 0x46, 0xad, 0x18, 0x0d, 0xc9, 0x5f, 0x18, 0x91, 0x3b, 0xb4, 0xc0, 0x60, 0x59, 0x8d, 0x66], [0x03, 0x1b, 0x79, 0x53, 0x6e, 0x24, 0xae, 0x57, 0xd9, 0x58, 0x09, 0x85, 0x48, 0xa2, 0xd3, 0xb5, 0xe2, 0x4d, 0x11, 0x82, 0xe6, 0x86, 0x3c, 0xe9, 0xb1, 0x00, 0x19, 0xc2, 0x57, 0xf7, 0x66, 0x7a]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x0f, 0xe3, 0x89, 0x03, 0xd7, 0x22, 0x95, 0x9f, 0xca, 0xb4, 0x8d, 0x9e, 0x6d, 0x97, 0xff, 0x8d, 0x21, 0x59, 0x07, 0xef, 0x03, 0x2d, 0x5e, 0xf8, 0x44, 0x46, 0xe7, 0x85, 0x80, 0xc5, 0x89, 0x50], [0x8b, 0xd8, 0x53, 0x86, 0x24, 0x86, 0x29, 0x52, 0x01, 0xfa, 0x20, 0xc3, 0x4e, 0x95, 0xcb, 0xad, 0x7b, 0x34, 0x94, 0x30, 0xb7, 0x7a, 0xfa, 0x96, 0x41, 0x60, 0x2b, 0xcb, 0x59, 0xb9, 0xca, 0x50]],
        [[0xc2, 0x5b, 0x9b, 0x78, 0x23, 0x1b, 0x3a, 0x88, 0x94, 0x5f, 0x0a, 0x9b, 0x98, 0x2b, 0x6e, 0x53, 0x11, 0xf6, 0xff, 0xc6, 0x7d, 0x42, 0xcc, 0x02, 0x80, 0x40, 0x0d, 0x1e, 0xfb, 0xaf, 0x61, 0x07], [0xb0, 0xe6, 0x2f, 0x81, 0x70, 0xa1, 0x2e, 0x39, 0x04, 0x7c, 0xc4, 0x2c, 0x87, 0x45, 0x4a, 0x5b, 0x69, 0x97, 0xac, 0x6d, 0x2c, 0x10, 0x42, 0x7c, 0x3b, 0x15, 0x70, 0x60, 0x0e, 0x11, 0x6d, 0x3a]],
        [[0x9b, 0x18, 0x80, 0x5e, 0xdb, 0x05, 0xbd, 0xc6, 0xb7, 0x3c, 0xc2, 0x40, 0x4d, 0x5d, 0xce, 0x97, 0x8a, 0x34, 0x15, 0xab, 0x28, 0x5d, 0x10, 0xf0, 0x37, 0x0c, 0xcc, 0x16, 0xfa, 0x1f, 0x33, 0x0d], [0x19, 0xf9, 0x35, 0xaa, 0x59, 0x1a, 0x0c, 0x5c, 0x06, 0xfc, 0x6a, 0x0b, 0x97, 0x53, 0x36, 0xfc, 0x2a, 0xa5, 0x5a, 0x9b, 0x30, 0xef, 0x23, 0xaf, 0x39, 0x5d, 0x9a, 0x6b, 0x75, 0x57, 0x48, 0x0b]],
        [[0x26, 0xdc, 0x76, 0x3b, 0xfc, 0xf9, 0x9c, 0x3f, 0x89, 0x0b, 0x62, 0x53, 0xaf, 0x83, 0x01, 0x2e, 0xbc, 0x6a, 0xc6, 0x03, 0x0d, 0x75, 0x2a, 0x0d, 0xe6, 0x94, 0x54, 0xcf, 0xb3, 0xe5, 0x96, 0x25], [0xfe, 0x82, 0xb1, 0x74, 0x31, 0x8a, 0xa7, 0x6f, 0x56, 0xbd, 0x8d, 0xf4, 0xe0, 0x94, 0x51, 0x59, 0xde, 0x2c, 0x5a, 0xf4, 0x84, 0x6b, 0x4a, 0x88, 0x93, 0xc0, 0x0c, 0x9a, 0xac, 0xa7, 0xa0, 0x68]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x25, 0x0d, 0xd6, 0xc7, 0x23, 0x47, 0x10, 0xad, 0xc7, 0x08, 0x5c, 0x87, 0x87, 0x93, 0x98, 0x18, 0xb8, 0xd3, 0x9c, 0xac, 0x5a, 0x3d, 0xc5, 0x75, 0xf8, 0x49, 0x32, 0x14, 0xcc, 0x51, 0x96, 0x24], [0x65, 0x9c, 0x5d, 0xf0, 0x37, 0x04, 0xf0, 0x34, 0x69, 0x2a, 0xf0, 0xa5, 0x64, 0xca, 0xde, 0x2b, 0x5b, 0x15, 0x10, 0xd2, 0xab, 0x06, 0xdd, 0xc4, 0xb0, 0xb6, 0x5b, 0xc1, 0x17, 0xdf, 0x8f, 0x02]],
        [[0xbd, 0x59, 0x3d, 0xbf, 0x5c, 0x31, 0x44, 0x2c, 0x32, 0x94, 0x04, 0x60, 0x84, 0x0f, 0xad, 0x00, 0xb6, 0x8f, 0xc9, 0x1d, 0xcc, 0x5c, 0xa2, 0x49, 0x0e, 0x50, 0x91, 0x08, 0x9a, 0x43, 0x55, 0x05], [0x5d, 0x93, 0x55, 0xdf, 0x9b, 0x12, 0x19, 0xec, 0x93, 0x85, 0x42, 0x9e, 0x66, 0x0f, 0x9d, 0xaf, 0x99, 0xaf, 0x26, 0x89, 0xbc, 0x61, 0xfd, 0xff, 0xce, 0x4b, 0xf4, 0x33, 0x95, 0xc9, 0x35, 0x58]],
        [[0x12, 0x55, 0xf9, 0xda, 0xcb, 0x44, 0xa7, 0xdc, 0x57, 0xe2, 0xf9, 0x9a, 0xe6, 0x07, 0x23, 0x60, 0x54, 0xa7, 0x39, 0xa5, 0x9b, 0x84, 0x56, 0x6e, 0xaa, 0x8b, 0x8f, 0xb0, 0x2c, 0x87, 0xaf, 0x67], [0x00, 0xa9, 0x4c, 0xb2, 0x12, 0xf8, 0x32, 0xa8, 0x7a, 0x00, 0x4b, 0x49, 0x32, 0xba, 0x1f, 0x5d, 0x44, 0x8e, 0x44, 0x7a, 0xdc, 0x11, 0xfb, 0x39, 0x08, 0x57, 0x87, 0xa5, 0x12, 0x42, 0x93, 0x0e]],
        [[0x17, 0xb4, 0xae, 0x72, 0x59, 0xd0, 0xaa, 0xa8, 0x16, 0x8b, 0x63, 0x11, 0xb3, 0x43, 0x04, 0xda, 0x0c, 0xa8, 0xb7, 0x68, 0xdd, 0x4e, 0x54, 0xe7, 0xaf, 0x5d, 0x5d, 0x05, 0x76, 0x36, 0xec, 0x0d], [0x6d, 0x7c, 0x82, 0x32, 0x38, 0x55, 0x57, 0x74, 0x5b, 0x7d, 0xc3, 0xc4, 0xfb, 0x06, 0x29, 0xf0, 0x13, 0x55, 0x54, 0xc6, 0xa7, 0xdc, 0x4c, 0x9f, 0x98, 0x49, 0x20, 0xa8, 0xc3, 0x8d, 0xfa, 0x48]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x87, 0x47, 0x9d, 0xe9, 0x25, 0xd5, 0xe3, 0x47, 0x78, 0xdf, 0x85, 0xa7, 0x85, 0x5e, 0x7a, 0x4c, 0x5f, 0x79, 0x1a, 0xf3, 0xa2, 0xb2, 0x28, 0xa0, 0x9c, 0xdd, 0x30, 0x40, 0xd4, 0x38, 0xbd, 0x28], [0xfc, 0xbb, 0xd5, 0x78, 0x6d, 0x1d, 0xd4, 0x99, 0xb4, 0xaa, 0x44, 0x44, 0x7a, 0x1b, 0xd8, 0xfe, 0xb4, 0x99, 0xb9, 0xcc, 0xe7, 0xc4, 0xd3, 0x3a, 0x73, 0x83, 0x41, 0x5c, 0x40, 0xd7, 0x2d, 0x55]],
        [[0x26, 0xe1, 0x7b, 0x5f, 0xe5, 0xdc, 0x3f, 0x7d, 0xa1, 0xa7, 0x26, 0x44, 0x22, 0x23, 0xc0, 0x8f, 0x7d, 0xf1, 0xb5, 0x11, 0x47, 0x7b, 0x19, 0xd4, 0x75, 0x6f, 0x1e, 0xa5, 0x27, 0xfe, 0xc8, 0x0e], [0xd3, 0x11, 0x3d, 0xab, 0xef, 0x2c, 0xed, 0xb1, 0x3d, 0x7c, 0x32, 0x81, 0x6b, 0xfe, 0xf8, 0x1c, 0x3c, 0x7b, 0xc0, 0x61, 0xdf, 0xb8, 0x75, 0x76, 0x7f, 0xaa, 0xd8, 0x93, 0xaf, 0x3d, 0xe8, 0x3d]],
        [[0xfd, 0x5b, 0x4e, 0x8d, 0xb6, 0x7e, 0x82, 0x9b, 0xef, 0xce, 0x04, 0x69, 0x51, 0x52, 0xff, 0xef, 0xa0, 0x52, 0xb5, 0x79, 0x17, 0x5e, 0x2f, 0xde, 0xd6, 0x3c, 0x2d, 0xa0, 0x43, 0xb4, 0x0b, 0x19], [0xc0, 0x61, 0x48, 0x48, 0x17, 0xf4, 0x9e, 0x18, 0x51, 0x2d, 0xea, 0x2f, 0xf2, 0xf2, 0xe0, 0xa3, 0x14, 0xb7, 0x8b, 0x3a, 0x30, 0xf5, 0x81, 0xc1, 0x5d, 0x71, 0x39, 0x62, 0x55, 0x1f, 0x60, 0x5a]],
        [[0xe5, 0x89, 0x8a, 0x76, 0x6c, 0xdb, 0x4d, 0x0a, 0x5b, 0x72, 0x9d, 0x59, 0x6e, 0x63, 0x63, 0x18, 0x7c, 0xe3, 0xfa, 0xe2, 0xdb, 0xa1, 0x8d, 0xf4, 0xa5, 0xd7, 0x16, 0xb2, 0xd0, 0xb3, 0x3f, 0x39], [0xce, 0x60, 0x09, 0x6c, 0xf5, 0x76, 0x17, 0x24, 0x80, 0x3a, 0x96, 0xc7, 0x94, 0x2e, 0xf7, 0x6b, 0xef, 0xb5, 0x05, 0x96, 0xef, 0xd3, 0x7b, 0x51, 0xda, 0x05, 0x44, 0x67, 0xbc, 0x07, 0x21, 0x4e]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xe9, 0x73, 0x6f, 0x21, 0xb9, 0xde, 0x22, 0x7d, 0xeb, 0x97, 0x31, 0x10, 0xa3, 0xea, 0xe1, 0xc6, 0x37, 0xeb, 0x8f, 0x43, 0x58, 0xde, 0x41, 0x64, 0x0e, 0x3e, 0x07, 0x99, 0x3d, 0xf1, 0xdf, 0x1e], [0xf8, 0xad, 0x43, 0xc2, 0x17, 0x06, 0xe2, 0xe4, 0xa9, 0x86, 0xcd, 0x18, 0xd7, 0x78, 0xc8, 0x74, 0x66, 0xd2, 0x09, 0x18, 0xa5, 0xf1, 0xca, 0xa6, 0x62, 0x92, 0xc1, 0xcb, 0x00, 0xeb, 0x42, 0x2e]],
        [[0x7b, 0x34, 0x24, 0x4c, 0xcf, 0x38, 0xe5, 0x6c, 0x0a, 0x01, 0x2c, 0x22, 0x0b, 0x24, 0x38, 0xad, 0x24, 0x7e, 0x19, 0xf0, 0x6c, 0xf9, 0x31, 0xf4, 0x35, 0x11, 0xf6, 0x46, 0x33, 0x3a, 0x23, 0x59], [0x20, 0x0b, 0xa1, 0x08, 0x19, 0xad, 0x39, 0x54, 0xea, 0x3e, 0x23, 0x09, 0xb6, 0xe2, 0xd2, 0xbc, 0x4d, 0xfc, 0x9c, 0xf0, 0x13, 0x16, 0x22, 0x3f, 0xb9, 0xd2, 0x11, 0x86, 0x90, 0x55, 0xce, 0x3c]],
        [[0xc4, 0x0b, 0x4b, 0x62, 0x99, 0x37, 0x84, 0x3f, 0x74, 0xa2, 0xf9, 0xce, 0xe2, 0x0b, 0x0f, 0x2a, 0x3d, 0xa3, 0xe3, 0xdb, 0x5a, 0x9d, 0x93, 0xcc, 0xa5, 0xef, 0x82, 0x91, 0x1d, 0xe6, 0x6c, 0x68], [0xa3, 0x64, 0x17, 0x9b, 0x8b, 0xc8, 0x3a, 0x61, 0xe6, 0x9d, 0xc6, 0xed, 0x7b, 0x03, 0x52, 0x26, 0x9d, 0x3a, 0xb3, 0x13, 0xcc, 0x8a, 0xfd, 0x2c, 0x1a, 0x1d, 0xed, 0x13, 0xd0, 0x55, 0x57, 0x0e]],
        [[0x1a, 0xea, 0xbf, 0xfd, 0x4a, 0x3c, 0x8e, 0xec, 0x29, 0x7e, 0x77, 0x77, 0x12, 0x99, 0xd7, 0x84, 0xf9, 0x55, 0x7f, 0xf1, 0x8b, 0xb4, 0xd2, 0x95, 0xa3, 0x8d, 0xf0, 0x8a, 0xa7, 0xeb, 0x82, 0x4b], [0x2c, 0x28, 0xf4, 0x3a, 0xf6, 0xde, 0x0a, 0xe0, 0x41, 0x44, 0x23, 0xf8, 0x3f, 0x03, 0x64, 0x9f, 0xc3, 0x55, 0x4c, 0xc6, 0xc1, 0x94, 0x1c, 0x24, 0x5d, 0x5f, 0x92, 0x45, 0x96, 0x57, 0x37, 0x14]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xc1, 0xcd, 0x90, 0x66, 0xb9, 0x76, 0xa0, 0x5b, 0xa5, 0x85, 0x75, 0x23, 0xf9, 0x89, 0xa5, 0x82, 0xb2, 0x6f, 0xb1, 0xeb, 0xc4, 0x69, 0x6f, 0x18, 0x5a, 0xed, 0x94, 0x3d, 0x9d, 0xd9, 0x2c, 0x1a], [0x35, 0xb0, 0xe6, 0x73, 0x06, 0xb7, 0x37, 0xe0, 0xf8, 0xb0, 0x22, 0xe8, 0xd2, 0xed, 0x0b, 0xef, 0xe6, 0xc6, 0x5a, 0x99, 0x9e, 0x1a, 0x9f, 0x04, 0x97, 0xe4, 0x4d, 0x0b, 0xbe, 0xba, 0x44, 0x40]],
        [[0xc1, 0x56, 0x96, 0x91, 0x5f, 0x1f, 0xbb, 0x54, 0x6f, 0x88, 0x89, 0x0a, 0xb2, 0xd6, 0x41, 0x42, 0x6a, 0x82, 0xee, 0x14, 0xaa, 0x76, 0x30, 0x65, 0x0f, 0x67, 0x39, 0xa6, 0x51, 0x7c, 0x49, 0x24], [0x35, 0xa3, 0x78, 0xd1, 0x11, 0x0f, 0x75, 0xd3, 0x70, 0x46, 0xdb, 0x20, 0x51, 0xcb, 0x92, 0x80, 0x54, 0x10, 0x74, 0x36, 0x86, 0xa9, 0xd7, 0xa3, 0x08, 0x78, 0xf1, 0x01, 0x29, 0xf8, 0x80, 0x3b]],
        [[0xdb, 0xa7, 0x9d, 0x9d, 0xbf, 0xa0, 0xcc, 0xed, 0x53, 0xa2, 0xa2, 0x19, 0x39, 0x48, 0x83, 0x19, 0x37, 0x58, 0xd1, 0x04, 0x28, 0x40, 0xf7, 0x8a, 0xc2, 0x08, 0xb7, 0xa5, 0x42, 0xcf, 0x53, 0x4c], [0xa7, 0xbb, 0xf6, 0x8e, 0xad, 0xdd, 0xf7, 0x90, 0xdd, 0x5f, 0x93, 0x89, 0xae, 0x04, 0x37, 0xe6, 0x9a, 0xb7, 0xe8, 0xc0, 0xdf, 0x16, 0x2a, 0xbf, 0xc4, 0x3a, 0x3c, 0x41, 0xd5, 0x89, 0x72, 0x5a]],
        [[0x1f, 0x96, 0xff, 0x34, 0x2c, 0x13, 0x21, 0xcb, 0x0a, 0x89, 0x85, 0xbe, 0xb3, 0x70, 0x9e, 0x1e, 0xde, 0x97, 0xaf, 0x96, 0x30, 0xf7, 0x48, 0x89, 0x40, 0x8d, 0x07, 0xf1, 0x25, 0xf0, 0x30, 0x58], [0x1e, 0xd4, 0x93, 0x57, 0xe2, 0x17, 0xe7, 0x9d, 0xab, 0x3c, 0x55, 0x03, 0x82, 0x2f, 0x2b, 0xdb, 0x56, 0x1e, 0x30, 0x2e, 0x24, 0x47, 0x6e, 0xe6, 0xff, 0x33, 0x24, 0x2c, 0x75, 0x51, 0xd4, 0x67]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0x2b, 0x06, 0xd9, 0xa1, 0x5d, 0xe1, 0xf4, 0xd1, 0x1e, 0x3c, 0x9a, 0xc6, 0x29, 0x2b, 0x13, 0x13, 0x78, 0xc0, 0xd8, 0x16, 0x17, 0x2d, 0x9e, 0xa9, 0xc9, 0x79, 0x57, 0xab, 0x24, 0x91, 0x92, 0x19], [0x69, 0xfb, 0xa1, 0x9c, 0xa6, 0x75, 0x49, 0x7d, 0x60, 0x73, 0x40, 0x42, 0xc4, 0x13, 0x0a, 0x95, 0x79, 0x1e, 0x04, 0x83, 0x94, 0x99, 0x9b, 0x1e, 0x0c, 0xe8, 0x1f, 0x54, 0xef, 0xcb, 0xc0, 0x52]],
        [[0x14, 0x89, 0x73, 0xa1, 0x37, 0x87, 0x6a, 0x7a, 0xcf, 0x1d, 0xd9, 0x2e, 0x1a, 0x67, 0xed, 0x74, 0xc0, 0xf0, 0x9c, 0x33, 0xdd, 0xdf, 0x08, 0xbf, 0x7b, 0xd1, 0x66, 0xda, 0xe6, 0xc9, 0x49, 0x08], [0xe9, 0xdd, 0x5e, 0x55, 0xb0, 0x0a, 0xde, 0x21, 0x4c, 0x5a, 0x2e, 0xd4, 0x80, 0x3a, 0x57, 0x92, 0x7a, 0xf1, 0xc4, 0x2c, 0x40, 0xaf, 0x2f, 0xc9, 0x92, 0x03, 0xe5, 0x5a, 0xbc, 0xdc, 0xf4, 0x09]],
        [[0xf3, 0xe1, 0x2b, 0x7c, 0x05, 0x86, 0x80, 0x93, 0x4a, 0xad, 0xb4, 0x8f, 0x7e, 0x99, 0x0c, 0xfd, 0xcd, 0xef, 0xd1, 0xff, 0x2c, 0x69, 0x34, 0x13, 0x41, 0x64, 0xcf, 0x3b, 0xd0, 0x90, 0x09, 0x1e], [0x9d, 0x45, 0xd6, 0x80, 0xe6, 0x45, 0xaa, 0xf4, 0x15, 0xaa, 0x5c, 0x34, 0x87, 0x99, 0xa2, 0x8c, 0x26, 0x84, 0x62, 0x7d, 0xb6, 0x29, 0xc0, 0x52, 0xea, 0xf5, 0x81, 0x18, 0x0f, 0x35, 0xa9, 0x0e]],
        [[0xe7, 0x20, 0x72, 0x7c, 0x6d, 0x94, 0x5f, 0x52, 0x44, 0x54, 0xe3, 0xf1, 0xb2, 0xb0, 0x36, 0x46, 0x0f, 0xae, 0x92, 0xe8, 0x70, 0x9d, 0x6e, 0x79, 0xb1, 0xad, 0x37, 0xa9, 0x5f, 0xc0, 0xde, 0x03], [0x15, 0x55, 0x37, 0xc6, 0x1c, 0x27, 0x1c, 0x6d, 0x14, 0x4f, 0xca, 0xa4, 0xc4, 0x88, 0x25, 0x46, 0x39, 0xfc, 0x5a, 0xe5, 0xfe, 0x29, 0x11, 0x69, 0xf5, 0x72, 0x84, 0x4d, 0x78, 0x9f, 0x94, 0x15]],
        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],
        [[0xec, 0xd3, 0xff, 0x57, 0x0b, 0xb0, 0xb2, 0xdc, 0xf8, 0x4f, 0xe2, 0x12, 0xd5, 0x36, 0xbe, 0x6b, 0x09, 0x43, 0x6d, 0xa3, 0x4d, 0x90, 0x2d, 0xb8, 0x74, 0xe8, 0x71, 0x45, 0x19, 0x8b, 0x0c, 0x6a], [0xb8, 0x42, 0x1c, 0x03, 0xad, 0x2c, 0x03, 0x8e, 0xac, 0xd7, 0x98, 0x29, 0x13, 0xc6, 0x02, 0x29, 0xb5, 0xd4, 0xe7, 0xcf, 0xcc, 0x8b, 0x83, 0xec, 0x35, 0xc7, 0x9c, 0x74, 0xb7, 0xad, 0x85, 0x5f]],
        [[0x78, 0x84, 0xe1, 0x56, 0x45, 0x69, 0x68, 0x5a, 0x4f, 0xb8, 0xb1, 0x29, 0xff, 0x33, 0x03, 0x31, 0xb7, 0xcb, 0x96, 0x25, 0xe6, 0xe6, 0x41, 0x98, 0x1a, 0xbb, 0x03, 0x56, 0xf2, 0xb2, 0x91, 0x34], [0x2c, 0x6c, 0xf7, 0x66, 0xa4, 0x62, 0x6b, 0x39, 0xb3, 0xba, 0x65, 0xd3, 0x1c, 0xf8, 0x11, 0xaa, 0xbe, 0xdc, 0x80, 0x59, 0x87, 0xf5, 0x7b, 0xe5, 0xe3, 0xb3, 0x3e, 0x39, 0xda, 0xbe, 0x88, 0x09]],
        [[0x8b, 0xf1, 0xa0, 0xf5, 0xdc, 0x29, 0xb4, 0xe2, 0x07, 0xc6, 0x7a, 0x00, 0xd0, 0x89, 0x17, 0x51, 0xd4, 0xbb, 0xd4, 0x22, 0xea, 0x7e, 0x7d, 0x7c, 0x24, 0xea, 0xf2, 0xe8, 0x22, 0x12, 0x95, 0x06], [0xda, 0x7c, 0xa4, 0x0c, 0xf4, 0xba, 0x6e, 0xe1, 0x89, 0xb5, 0x59, 0xca, 0xf1, 0xc0, 0x29, 0x36, 0x09, 0x44, 0xe2, 0x7f, 0xd1, 0x63, 0x15, 0x99, 0xea, 0x25, 0xcf, 0x0c, 0x9d, 0xc0, 0x44, 0x6f]],
        [[0x1d, 0x86, 0x4e, 0xcf, 0xf7, 0x37, 0x10, 0x25, 0x8f, 0x12, 0xfb, 0x19, 0xfb, 0xe0, 0xed, 0x10, 0xc8, 0xe2, 0xf5, 0x75, 0xb1, 0x33, 0xc0, 0x96, 0x0d, 0xfb, 0x15, 0x6c, 0x0d, 0x07, 0x5f, 0x05], [0x69, 0x3e, 0x47, 0x97, 0x2c, 0xaf, 0x52, 0x7c, 0x78, 0x83, 0xad, 0x1b, 0x39, 0x82, 0x2f, 0x02, 0x6f, 0x47, 0xdb, 0x2a, 0xb0, 0xe1, 0x91, 0x99, 0x55, 0xb8, 0x99, 0x3a, 0xa0, 0x44, 0x11, 0x51]]
    ];
    var arrFact = arrays.makeFactory();
    for (var i = 0; i < 425; i += 1) {
        exports.base_multiples_affine[i] = make_ge25519_aff(arrFact);
        exports.base_multiples_affine[i].x.set(init_data[i][0]);
        exports.base_multiples_affine[i].y.set(init_data[i][1]);
    }
    init_data = null;
})();
Object.freeze(exports);

},{"../util/arrays":17,"./fe25519":12}],15:[function(require,module,exports){
/* Copyright(c) 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
function make_sc25519(arrFactory) {
    return arrFactory.getUint32Array(32);
}
exports.make_sc25519 = make_sc25519;
function make_shortsc25519(arrFactory) {
    return arrFactory.getUint32Array(16);
}
exports.make_shortsc25519 = make_shortsc25519;
/**
 * Analog of constant m in crypto_sign/ed25519/ref/sc25519.c
 * Length === 32.
 */
var m = new Uint8Array([0xED, 0xD3, 0xF5, 0x5C, 0x1A, 0x63, 0x12, 0x58, 0xD6, 0x9C, 0xF7, 0xA2, 0xDE, 0xF9, 0xDE, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10]);
/**
 * Analog of constant mu in crypto_sign/ed25519/ref/sc25519.c
 * Length === 33.
 */
var mu = new Uint8Array([0x1B, 0x13, 0x2C, 0x0A, 0xA3, 0xE5, 0x9C, 0xED, 0xA7, 0x29, 0x63, 0x08, 0x5D, 0x21, 0x06, 0x21, 0xEB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F]);
/**
 * Analog of lt in crypto_sign/ed25519/ref/sc25519.c
 * All inputs are 16-bit.
 */
function lt(a, b) {
    return (a < b) ? 1 : 0;
    //	return ((a - b) >>> 31); /* (a less than b) ? 1: yes; 0: no */
}
/**
 * Analog of reduce_add_sub in crypto_sign/ed25519/ref/sc25519.c
 * Reduce coefficients of r before calling reduce_add_sub
 */
function reduce_add_sub(r, arrFactory) {
    var pb = 0;
    var b;
    var mask;
    var t = arrFactory.getUint8Array(32);
    for (var i = 0; i < 32; i += 1) {
        pb += m[i];
        b = lt(r[i], pb);
        t[i] = r[i] - pb + (b << 8);
        pb = b;
    }
    mask = (b - 1) | 0;
    for (var i = 0; i < 32; i += 1) {
        r[i] ^= mask & (r[i] ^ t[i]);
    }
    arrFactory.recycle(t);
}
/**
 * Analog of barrett_reduce in crypto_sign/ed25519/ref/sc25519.c
 * Reduce coefficients of x before calling barrett_reduce
 */
function barrett_reduce(r, x, arrFactory) {
    /* See HAC, Alg. 14.42 */
    var q2 = arrFactory.getUint32Array(66);
    var q3 = q2.subarray(33);
    var r1 = arrFactory.getUint32Array(33);
    var r2 = arrFactory.getUint32Array(33);
    var carry;
    var pb = 0;
    var b;
    for (var i = 0; i < 66; i += 1) {
        q2[i] = 0;
    }
    for (var i = 0; i < 33; i += 1) {
        r2[i] = 0;
    }
    for (var i = 0; i < 33; i += 1) {
        for (var j = 0; j < 33; j += 1) {
            if (i + j >= 31) {
                q2[i + j] += mu[i] * x[j + 31];
            }
        }
    }
    carry = q2[31] >>> 8;
    q2[32] += carry;
    carry = q2[32] >>> 8;
    q2[33] += carry;
    for (var i = 0; i < 33; i += 1) {
        r1[i] = x[i];
    }
    for (var i = 0; i < 32; i += 1) {
        for (var j = 0; j < 33; j += 1) {
            if (i + j < 33) {
                r2[i + j] += m[i] * q3[j];
            }
        }
    }
    for (var i = 0; i < 32; i += 1) {
        carry = r2[i] >>> 8;
        r2[i + 1] += carry;
        r2[i] &= 0xff;
    }
    for (var i = 0; i < 32; i += 1) {
        pb += r2[i];
        b = lt(r1[i], pb);
        r[i] = r1[i] - pb + (b << 8);
        pb = b;
    }
    /* XXX: Can it really happen that r<0?, See HAC, Alg 14.42, Step 3
     * If so: Handle	it here!
     */
    reduce_add_sub(r, arrFactory);
    reduce_add_sub(r, arrFactory);
    arrFactory.recycle(q2, r1, r2);
}
/**
 * Analog of sc25519_from32bytes in crypto_sign/ed25519/ref/sc25519.c
 */
function from32bytes(r, x, arrFactory) {
    var t = arrFactory.getUint32Array(64);
    for (var i = 0; i < 32; i += 1) {
        t[i] = x[i];
    }
    for (var i = 32; i < 64; i += 1) {
        t[i] = 0;
    }
    barrett_reduce(r, t, arrFactory);
    arrFactory.recycle(t);
}
exports.from32bytes = from32bytes;
/**
 * Analog of sc25519_from64bytes in crypto_sign/ed25519/ref/sc25519.c
 */
function from64bytes(r, x, arrFactory) {
    var t = arrFactory.getUint32Array(64);
    for (var i = 0; i < 64; i += 1) {
        t[i] = x[i];
    }
    barrett_reduce(r, t, arrFactory);
    arrFactory.recycle(t);
}
exports.from64bytes = from64bytes;
/**
 * Analog of sc25519_to32bytes in crypto_sign/ed25519/ref/sc25519.c
 */
function to32bytes(r, x) {
    for (var i = 0; i < 32; i += 1) {
        r[i] = x[i];
    }
}
exports.to32bytes = to32bytes;
/**
 * Analog of sc25519_add in crypto_sign/ed25519/ref/sc25519.c
 */
function add(r, x, y, arrFactory) {
    var carry;
    for (var i = 0; i < 32; i += 1) {
        r[i] = x[i] + y[i];
    }
    for (var i = 0; i < 31; i += 1) {
        carry = r[i] >>> 8;
        r[i + 1] += carry;
        r[i] &= 0xff;
    }
    reduce_add_sub(r, arrFactory);
}
exports.add = add;
/**
 * Analog of sc25519_mul in crypto_sign/ed25519/ref/sc25519.c
 */
function mul(r, x, y, arrFactory) {
    var carry;
    var t = arrFactory.getUint32Array(64);
    for (var i = 0; i < 64; i += 1) {
        t[i] = 0;
    }
    for (var i = 0; i < 32; i += 1) {
        for (var j = 0; j < 32; j += 1) {
            t[i + j] += x[i] * y[j];
        }
    }
    for (var i = 0; i < 63; i += 1) {
        carry = t[i] >>> 8;
        t[i + 1] += carry;
        t[i] &= 0xff;
    }
    barrett_reduce(r, t, arrFactory);
    arrFactory.recycle(t);
}
exports.mul = mul;
/**
 * Analog of sc25519_window3 in crypto_sign/ed25519/ref/sc25519.c
 */
function window3(r, s) {
    for (var i = 0; i < 10; i += 1) {
        r[8 * i + 0] = s[3 * i + 0] & 7;
        r[8 * i + 1] = (s[3 * i + 0] >>> 3) & 7;
        r[8 * i + 2] = (s[3 * i + 0] >>> 6) & 7;
        r[8 * i + 2] ^= (s[3 * i + 1] << 2) & 7;
        r[8 * i + 3] = (s[3 * i + 1] >>> 1) & 7;
        r[8 * i + 4] = (s[3 * i + 1] >>> 4) & 7;
        r[8 * i + 5] = (s[3 * i + 1] >>> 7) & 7;
        r[8 * i + 5] ^= (s[3 * i + 2] << 1) & 7;
        r[8 * i + 6] = (s[3 * i + 2] >>> 2) & 7;
        r[8 * i + 7] = (s[3 * i + 2] >>> 5) & 7;
    }
    r[8 * i + 0] = s[3 * i + 0] & 7;
    r[8 * i + 1] = (s[3 * i + 0] >>> 3) & 7;
    r[8 * i + 2] = (s[3 * i + 0] >>> 6) & 7;
    r[8 * i + 2] ^= (s[3 * i + 1] << 2) & 7;
    r[8 * i + 3] = (s[3 * i + 1] >>> 1) & 7;
    r[8 * i + 4] = (s[3 * i + 1] >>> 4) & 7;
    /* Making it signed */
    var carry = 0;
    for (var i = 0; i < 84; i += 1) {
        r[i] += carry;
        r[i + 1] += r[i] >>> 3;
        r[i] &= 7;
        carry = r[i] >>> 2;
        r[i] -= carry << 3;
    }
    r[84] += carry;
}
exports.window3 = window3;
/**
 * Analog of sc25519_2interleave2 in crypto_sign/ed25519/ref/sc25519.c
 */
function interleave2(r, s1, s2) {
    for (var i = 0; i < 31; i += 1) {
        r[4 * i] = (s1[i] & 3) ^ ((s2[i] & 3) << 2);
        r[4 * i + 1] = ((s1[i] >>> 2) & 3) ^ (((s2[i] >>> 2) & 3) << 2);
        r[4 * i + 2] = ((s1[i] >>> 4) & 3) ^ (((s2[i] >>> 4) & 3) << 2);
        r[4 * i + 3] = ((s1[i] >>> 6) & 3) ^ (((s2[i] >>> 6) & 3) << 2);
    }
    r[124] = (s1[31] & 3) ^ ((s2[31] & 3) << 2);
    r[125] = ((s1[31] >>> 2) & 3) ^ (((s2[31] >>> 2) & 3) << 2);
    r[126] = ((s1[31] >>> 4) & 3) ^ (((s2[31] >>> 4) & 3) << 2);
}
exports.interleave2 = interleave2;
Object.freeze(exports);

},{}],16:[function(require,module,exports){
/* Copyright(c) 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
var ge = require('./ge25519');
var sc = require('./sc25519');
var sha512 = require('../hash/sha512');
var arrays = require('../util/arrays');
var vectVerify = require('../util/verify');
/**
 * Analog of crypto_sign_keypair in crypto_sign/ed25519/ref/keypair.c
 */
function generate_keypair(seed, arrFactory) {
    if (!(seed instanceof Uint8Array)) {
        throw new TypeError("Seed must be Uint8Array.");
    }
    if (seed.length !== 32) {
        throw new Error("Seed should have 32 " + "elements (bytes) in it, but it is " + seed.length + " elements long.");
    }
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var scsk = sc.make_sc25519(arrFactory);
    var gepk = ge.make_ge25519(arrFactory);
    var az = sha512.hash(seed, arrFactory);
    az[0] &= 248;
    az[31] &= 127;
    az[31] |= 64;
    sc.from32bytes(scsk, az, arrFactory);
    ge.scalarmult_base(gepk, scsk, arrFactory);
    var pk = arrFactory.getUint8Array(32);
    ge.pack(pk, gepk, arrFactory);
    var sk = arrFactory.getUint8Array(64);
    for (var i = 0; i < 32; i += 1) {
        sk[i] = seed[i];
    }
    for (var i = 32; i < 64; i += 1) {
        sk[i] = pk[i - 32];
    }
    arrFactory.wipeRecycled();
    return {
        skey: sk,
        pkey: pk
    };
}
exports.generate_keypair = generate_keypair;
function extract_pkey(sk) {
    if (sk.BYTES_PER_ELEMENT !== 1) {
        throw new TypeError("Key array sk must be Uint8Array.");
    }
    if (sk.length !== 64) {
        throw new Error("Key array sk should have 64 " + "elements (bytes) in it, but it is " + sk.length + " elements long.");
    }
    var pk = new Uint8Array(32);
    for (var i = 32; i < 64; i += 1) {
        pk[i - 32] = sk[i];
    }
    return pk;
}
exports.extract_pkey = extract_pkey;
/**
 * Analog of crypto_sign in crypto_sign/ed25519/ref/sign.c
 */
function sign(m, sk, arrFactory) {
    if (!(sk instanceof Uint8Array)) {
        throw new TypeError("Key array sk must be Uint8Array.");
    }
    if (sk.length !== 64) {
        throw new Error("Key array sk should have 64 " + "elements (bytes) in it, but it is " + sk.length + " elements long.");
    }
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var sck = sc.make_sc25519(arrFactory);
    var scs = sc.make_sc25519(arrFactory);
    var scsk = sc.make_sc25519(arrFactory);
    var ger = ge.make_ge25519(arrFactory);
    var pk = arrFactory.getUint8Array(32);
    pk.set(sk.subarray(32));
    /* pk: 32-byte public key A */
    var az = sha512.hash(sk.subarray(0, 32), arrFactory);
    az[0] &= 248;
    az[31] &= 127;
    az[31] |= 64;
    /* az: 32-byte scalar a, 32-byte randomizer z */
    var sm = new Uint8Array(m.length + 64);
    sm.subarray(64).set(m);
    sm.subarray(32, 64).set(az.subarray(32));
    /* sm: 32-byte uninit, 32-byte z, mlen-byte m */
    var nonce = sha512.hash(sm.subarray(32), arrFactory);
    /* nonce: 64-byte H(z,m) */
    sc.from64bytes(sck, nonce, arrFactory);
    ge.scalarmult_base(ger, sck, arrFactory);
    ge.pack(sm.subarray(0, 32), ger, arrFactory);
    /* sm: 32-byte R, 32-byte z, mlen-byte m */
    sm.set(pk, 32);
    /* sm: 32-byte R, 32-byte A, mlen-byte m */
    var hram = sha512.hash(sm, arrFactory);
    /* hram: 64-byte H(R,A,m) */
    sc.from64bytes(scs, hram, arrFactory);
    sc.from32bytes(scsk, az, arrFactory);
    sc.mul(scs, scs, scsk, arrFactory);
    sc.add(scs, scs, sck, arrFactory);
    /* scs: S = nonce + H(R,A,m)a */
    sc.to32bytes(sm.subarray(32, 64), scs);
    /* sm: 32-byte R, 32-byte S, mlen-byte m */
    arrFactory.recycle(az, nonce, hram, sck, scs, scsk, pk);
    arrFactory.wipeRecycled();
    return sm;
}
exports.sign = sign;
function signature(m, sk, arrFactory) {
    if (!(sk instanceof Uint8Array)) {
        throw new TypeError("Key array sk must be Uint8Array.");
    }
    if (sk.length !== 64) {
        throw new Error("Key array sk should have 64 " + "elements (bytes) in it, but it is " + sk.length + " elements long.");
    }
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var hasher = sha512.makeHasher(false, arrFactory);
    var sck = sc.make_sc25519(arrFactory);
    var scs = sc.make_sc25519(arrFactory);
    var scsk = sc.make_sc25519(arrFactory);
    var ger = ge.make_ge25519(arrFactory);
    var pk = arrFactory.getUint8Array(32);
    pk.set(sk.subarray(32));
    /* pk: 32-byte public key A */
    hasher.update(sk.subarray(0, 32));
    var az = hasher.digest();
    az[0] &= 248;
    az[31] &= 127;
    az[31] |= 64;
    /* az: 32-byte scalar a, 32-byte randomizer z */
    var sig = arrFactory.getUint8Array(64);
    sig.subarray(32, 64).set(az.subarray(32));
    /* sig: 32-byte uninit, 32-byte z */
    hasher.update(sig.subarray(32));
    hasher.update(m);
    var nonce = hasher.digest();
    /* nonce: 64-byte H(z,m) */
    sc.from64bytes(sck, nonce, arrFactory);
    ge.scalarmult_base(ger, sck, arrFactory);
    ge.pack(sig.subarray(0, 32), ger, arrFactory);
    /* sig: 32-byte R, 32-byte z */
    hasher.update(sig.subarray(0, 32));
    hasher.update(pk);
    hasher.update(m);
    var hram = hasher.digest();
    /* hram: 64-byte H(R,A,m) */
    sc.from64bytes(scs, hram, arrFactory);
    sc.from32bytes(scsk, az, arrFactory);
    sc.mul(scs, scs, scsk, arrFactory);
    sc.add(scs, scs, sck, arrFactory);
    /* scs: S = nonce + H(R,A,m)a */
    sc.to32bytes(sig.subarray(32), scs);
    /* sig: 32-byte R, 32-byte S */
    arrFactory.recycle(az, nonce, hram, sck, scs, scsk, pk);
    hasher.destroy();
    arrFactory.wipeRecycled();
    return sig;
}
exports.signature = signature;
/**
 * Analog of crypto_sign_open in crypto_sign/ed25519/ref/open.c
 */
function open(sm, pk, arrFactory) {
    if (!(pk instanceof Uint8Array)) {
        throw new TypeError("Key array pk must be Uint8Array.");
    }
    if (pk.length !== 32) {
        throw new Error("Key array pk should have 32 " + "elements (bytes) in it, but it is " + pk.length + " elements long.");
    }
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var rcopy = arrFactory.getUint8Array(32);
    var rcheck = arrFactory.getUint8Array(32);
    var get1 = ge.make_ge25519(arrFactory);
    var get2 = ge.make_ge25519(arrFactory);
    var schram = sc.make_sc25519(arrFactory);
    var scs = sc.make_sc25519(arrFactory);
    if ((sm.length < 64) || (sm[63] & 224) || !ge.unpackneg_vartime(get1, pk, arrFactory)) {
        return null;
    }
    rcopy.set(sm.subarray(0, 32));
    sc.from32bytes(scs, sm.subarray(32, 64), arrFactory);
    var m = new Uint8Array(sm.length);
    m.set(sm);
    m.set(pk, 32);
    var hram = sha512.hash(m, arrFactory);
    sc.from64bytes(schram, hram, arrFactory);
    ge.double_scalarmult_vartime(get2, get1, schram, ge.base, scs, arrFactory);
    ge.pack(rcheck, get2, arrFactory);
    var isOK = vectVerify.v32(rcopy, rcheck);
    for (var i = 0; i < 64; i += 1) {
        m[i] = 0;
    }
    arrFactory.recycle(rcopy, rcheck, hram, schram, scs);
    ge.recycle_ge25519(arrFactory, get1, get2);
    arrFactory.wipeRecycled();
    return (isOK ? m.subarray(64) : null);
}
exports.open = open;
function verify(sig, m, pk, arrFactory) {
    if (!(pk instanceof Uint8Array)) {
        throw new TypeError("Key array pk must be Uint8Array.");
    }
    if (pk.length !== 32) {
        throw new Error("Key array pk should have 32 " + "elements (bytes) in it, but it is " + pk.length + " elements long.");
    }
    if (!arrFactory) {
        arrFactory = arrays.makeFactory();
    }
    var rcopy = arrFactory.getUint8Array(32);
    var rcheck = arrFactory.getUint8Array(32);
    var get1 = ge.make_ge25519(arrFactory);
    var get2 = ge.make_ge25519(arrFactory);
    var schram = sc.make_sc25519(arrFactory);
    var scs = sc.make_sc25519(arrFactory);
    if ((sig.length < 64) || (sig[63] & 224) || !ge.unpackneg_vartime(get1, pk, arrFactory)) {
        return false;
    }
    rcopy.set(sig.subarray(0, 32));
    sc.from32bytes(scs, sig.subarray(32, 64), arrFactory);
    var hasher = sha512.makeHasher(true, arrFactory);
    hasher.update(sig.subarray(0, 32));
    hasher.update(pk);
    hasher.update(m);
    var hram = hasher.digest();
    sc.from64bytes(schram, hram, arrFactory);
    ge.double_scalarmult_vartime(get2, get1, schram, ge.base, scs, arrFactory);
    ge.pack(rcheck, get2, arrFactory);
    var isOK = vectVerify.v32(rcopy, rcheck);
    arrFactory.recycle(rcopy, rcheck, hram, schram, scs);
    ge.recycle_ge25519(arrFactory, get1, get2);
    hasher.destroy();
    arrFactory.wipeRecycled();
    return isOK;
}
exports.verify = verify;
exports.JWK_ALG_NAME = 'NaCl-sign-Ed25519';
exports.PUBLIC_KEY_LENGTH = 32;
exports.SECRET_KEY_LENGTH = 64;
Object.freeze(exports);

},{"../hash/sha512":9,"../util/arrays":17,"../util/verify":19,"./ge25519":13,"./sc25519":15}],17:[function(require,module,exports){
/* Copyright(c) 2013-2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
/**
 * This module provide an object pool for typed arrays used in the library.
 * When we turn off reusing, by always making new arrays, time for boxes goes up
 * dramatically (due to arrays needed in stream?).
 */
var NumericArrPool = (function () {
    function NumericArrPool(numOfElemsInObj) {
        this.arrFactory = null;
        this.pool = new Array(16);
        this.poolIndex = -1;
        this.wipedIndex = -1;
        this.numOfElemsInObj = numOfElemsInObj;
        Object.seal(this);
    }
    NumericArrPool.makeUint8ArrayPool = function (numOfElemsInObj) {
        var pool = new NumericArrPool(numOfElemsInObj);
        pool.arrFactory = function () {
            return new Uint8Array(pool.numOfElemsInObj);
        };
        return pool;
    };
    NumericArrPool.makeUint32ArrayPool = function (numOfElemsInObj) {
        var pool = new NumericArrPool(numOfElemsInObj);
        pool.arrFactory = function () {
            return new Uint32Array(pool.numOfElemsInObj);
        };
        return pool;
    };
    /**
     * This either creates new, or gets a spare array from the pool.
     * Newly created array is not put into pool, because it is given to someone for
     * use.
     * If someone forgets to return it, there shall be no leaking references.
     * @returns TypedArray, created by set arrFactory, with set number of elements
     * in it.
     * Note that array may and shall have arbitrary data in it, thus, any
     * initialization must be performed explicitly.
     */
    NumericArrPool.prototype.get = function () {
        var arr;
        if (this.poolIndex < 0) {
            arr = this.arrFactory();
        }
        else {
            arr = this.pool[this.poolIndex];
            this.pool[this.poolIndex] = null;
            this.poolIndex -= 1;
            if (this.poolIndex < this.wipedIndex) {
                this.wipedIndex = this.poolIndex;
            }
        }
        return arr;
    };
    /**
     * This puts array into the pool, but it does not touch a content of array.
     * @param arr
     */
    NumericArrPool.prototype.recycle = function (arr) {
        this.poolIndex += 1;
        this.pool[this.poolIndex] = arr;
    };
    /**
     * This wipes all arrays in this pool.
     */
    NumericArrPool.prototype.wipe = function () {
        var uintArr;
        for (var i = (this.wipedIndex + 1); i <= this.poolIndex; i += 1) {
            uintArr = this.pool[i];
            for (var j = 0; j < uintArr.length; j += 1) {
                uintArr[j] = 0;
            }
        }
        this.wipedIndex = this.poolIndex;
    };
    return NumericArrPool;
})();
function makeFactory() {
    var f = new ArrFactory();
    return {
        getUint8Array: f.getUint8Array.bind(f),
        getUint32Array: f.getUint32Array.bind(f),
        recycle: f.recycle.bind(f),
        wipeRecycled: f.wipeRecycled.bind(f),
        clear: f.clear.bind(f),
        wipe: wipe
    };
}
exports.makeFactory = makeFactory;
var ArrFactory = (function () {
    function ArrFactory() {
        this.uint8s = {};
        this.uint32s = {};
        this.wipe = wipe;
        Object.freeze(this);
    }
    ArrFactory.prototype.getUint8Array = function (len) {
        var pool = this.uint8s[len];
        return (pool ? pool.get() : new Uint8Array(len));
    };
    ArrFactory.prototype.getUint32Array = function (len) {
        var pool = this.uint32s[len];
        return (pool ? pool.get() : new Uint32Array(len));
    };
    ArrFactory.prototype.recycleUint8Array = function (arr) {
        var pool = this.uint8s[arr.length];
        if (!pool) {
            pool = NumericArrPool.makeUint8ArrayPool(arr.length);
            this.uint8s[arr.length] = pool;
        }
        pool.recycle(arr);
    };
    ArrFactory.prototype.recycleUint32Array = function (arr) {
        var pool = this.uint32s[arr.length];
        if (!pool) {
            pool = NumericArrPool.makeUint32ArrayPool(arr.length);
            this.uint32s[arr.length] = pool;
        }
        pool.recycle(arr);
    };
    ArrFactory.prototype.recycle = function () {
        var arrays = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arrays[_i - 0] = arguments[_i];
        }
        var arr;
        for (var i = 0; i < arrays.length; i += 1) {
            arr = arrays[i];
            if (!arr)
                continue;
            if ((arr.byteOffset !== 0) || (arr.length * arr.BYTES_PER_ELEMENT !== arr.buffer.byteLength)) {
                throw new TypeError("Given, as argument #" + (i + 1) + " is a view " + "of an array, and these are not supposed to be recycled.");
            }
            if (arr instanceof Uint8Array) {
                this.recycleUint8Array(arr);
            }
            else if (arr instanceof Uint32Array) {
                this.recycleUint32Array(arr);
            }
            else {
                throw new TypeError("This works with typed arrays that have 1 or 4 bytes " + "per element, while given at position " + i + " array claims to have " + arr.BYTES_PER_ELEMENT);
            }
        }
    };
    ArrFactory.prototype.wipeRecycled = function () {
        for (var fieldName in this.uint8s) {
            this.uint8s[fieldName].wipe();
        }
        for (var fieldName in this.uint32s) {
            this.uint32s[fieldName].wipe();
        }
    };
    ArrFactory.prototype.clear = function () {
        for (var fieldName in this.uint8s) {
            delete this.uint8s[fieldName];
        }
        for (var fieldName in this.uint32s) {
            delete this.uint32s[fieldName];
        }
    };
    return ArrFactory;
})();
Object.freeze(ArrFactory);
Object.freeze(ArrFactory.prototype);
/**
 * This zeros all elements of given arrays, or given array views.
 * Use this function on things that needs secure cleanup, but should not be
 * recycled due to their odd and/or huge size, as it makes pooling inefficient.
 */
function wipe() {
    var arrays = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arrays[_i - 0] = arguments[_i];
    }
    var arr;
    for (var i = 0; i < arrays.length; i += 1) {
        arr = arrays[i];
        if (!arr)
            continue;
        try {
            for (var j = 0; j < arr.length; j += 1) {
                arr[j] = 0;
            }
        }
        catch (e) {
        }
    }
}
exports.wipe = wipe;
Object.freeze(exports);

},{}],18:[function(require,module,exports){
/* Copyright(c) 2013 - 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
function loadLEU32(x, i) {
    return (x[i + 3] << 24) | (x[i + 2] << 16) | (x[i + 1] << 8) | x[i];
}
function storeLEU32(x, i, u) {
    x[i + 3] = u >>> 24;
    x[i + 2] = u >>> 16;
    x[i + 1] = u >>> 8;
    x[i] = u;
}
/**
 * This takes a given 24-byte nonce as three 8-byte numbers, and adds
 * a given delta to each number.
 * @param n is Uint8Array, 24 bytes long nonce that will be changed in-place.
 * @param delta is a number from 1 to 255 inclusive.
 */
function advance(n, delta) {
    if (n.length !== 24) {
        throw new Error("Nonce array n should have 24 elements (bytes) in it, but it is " + n.length + " elements long.");
    }
    if ((delta < 1) || (delta > 255)) {
        throw new Error("Given delta is out of limits.");
    }
    for (var i = 0; i < 3; i += 1) {
        storeLEU32(n, i * 4, (loadLEU32(n, i * 4) + delta));
    }
}
exports.advance = advance;
/**
 * This takes a given 24-byte nonce as three 8-byte numbers, and adds
 * 1 to each number.
 * @param n is Uint8Array, 24 bytes long nonce that will be changed in-place.
 */
function advanceOddly(n) {
    advance(n, 1);
}
exports.advanceOddly = advanceOddly;
/**
 * This takes a given 24-byte nonce as three 8-byte numbers, and adds
 * 2 to each number.
 * @param n is Uint8Array, 24 bytes long nonce that will be changed in-place.
 */
function advanceEvenly(n) {
    advance(n, 2);
}
exports.advanceEvenly = advanceEvenly;
/**
 * @param initNonce
 * @param delta
 * @return new nonce, calculated from an initial one by adding a delta to it.
 */
function calculateNonce(initNonce, delta, arrFactory) {
    if ((delta > 0xffffffff) || (delta < 0)) {
        throw new Error("Given delta is out of limits.");
    }
    var n = arrFactory.getUint8Array(24);
    for (var i = 0; i < 3; i += 1) {
        storeLEU32(n, i * 4, (loadLEU32(initNonce, i * 4) + delta));
    }
    return n;
}
exports.calculateNonce = calculateNonce;
/**
 * @param n1
 * @param n2
 * @return delta (unsigned 32-bit integer), which, when added to the first
 * nonce (n1), produces the second nonce (n2).
 * Null is returned, if given nonces are not related to each other.
 */
function calculateDelta(n1, n2) {
    var delta = loadLEU32(n2, 0) - loadLEU32(n1, 0);
    for (var i = 1; i < 3; i += 1) {
        if (delta !== (loadLEU32(n2, i * 4) - loadLEU32(n1, i * 4))) {
            return null;
        }
    }
    if (delta < 0) {
        delta += 0x100000000;
    }
    return delta;
}
exports.calculateDelta = calculateDelta;
Object.freeze(exports);

},{}],19:[function(require,module,exports){
/* Copyright(c) 2013 - 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
/**
 * @param x is typed array
 * @param y is typed array, of the same length as x
 * @param n is number of element to compare, starting from each arrays head.
 * If this number is greater than length of given arrays, behaviour is undefined.
 * Therefore, users of this function must check lengths of given arrays
 * before calling this function.
 * It also implies that this function cannot be directly expose by the library.
 * @returns true when n first elements of arrays were found to correspond in each array,
 *          and false otherwise.
 *          Notice, that C's crypto_verify 16 and 32 return 0 (falsy value), for same elements,
 *          and -1 (truethy value), for different elements.
 */
function verify(x, y, len) {
    var differentbits = 0;
    for (var i = 0; i < len; i += 1) {
        differentbits |= x[i] ^ y[i];
    }
    return (differentbits === 0);
}
exports.verify = verify;
/**
 * @param x is typed array
 * @param y is typed array, of the same length as x
 * @returns true when 16 first elements of arrays were found to correspond in each array,
 *          and false otherwise.
 *          Notice, that C's crypto_verify 16 and 32 return 0 (falsy value), for same elements,
 *          and -1 (truethy value), for different elements.
 */
function v16(x, y) {
    return verify(x, y, 16);
}
exports.v16 = v16;
/**
 * @param x is typed array
 * @param y is typed array, of the same length as x
 * @returns true when 32 first elements of arrays were found to correspond in each array,
 *          and false otherwise.
 *          Notice, that C's crypto_verify 16 and 32 return 0 (falsy value), for same elements,
 *          and -1 (truethy value), for different elements.
 */
function v32(x, y) {
    return verify(x, y, 32);
}
exports.v32 = v32;
Object.freeze(exports);

},{}],"ecma-nacl":[function(require,module,exports){
/* Copyright(c) 2013 - 2015 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */
/**
 * This file is an external interface of Ecma-NaCl library.
 */
/// <reference path="../typings/tsd.d.ts" />
exports.secret_box = require('./boxes/secret_box');
exports.box = require('./boxes/box');
exports.nonce = require('./util/nonce');
exports.signing = require('./signing/sign');
exports.fileXSP = require('./file/xsp');
var sha512Mod = require('./hash/sha512');
var hashing;
(function (hashing) {
    var sha512;
    (function (sha512) {
        sha512.hash = sha512Mod.hash;
        sha512.makeHasher = sha512Mod.makeHasher;
    })(sha512 = hashing.sha512 || (hashing.sha512 = {}));
})(hashing = exports.hashing || (exports.hashing = {}));
Object.freeze(hashing);
Object.freeze(hashing.sha512);
var scryptMod = require('./scrypt/scrypt');
exports.scrypt = scryptMod.scrypt;
exports.arrays = require('./util/arrays');
var verify = require('./util/verify');
/**
 * @param x typed array
 * @param y typed array
 * @returns true, if arrays have the same length and their elements are equal;
 * and false, otherwise.
 */
function compareVectors(x, y) {
    if (x.length !== y.length) {
        return false;
    }
    return verify.verify(x, y, x.length);
}
exports.compareVectors = compareVectors;
Object.freeze(exports);

},{"./boxes/box":1,"./boxes/secret_box":5,"./file/xsp":8,"./hash/sha512":9,"./scrypt/scrypt":10,"./signing/sign":16,"./util/arrays":17,"./util/nonce":18,"./util/verify":19}]},{},[]);
